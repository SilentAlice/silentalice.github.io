<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilentMing&#39;s Gensokyo</title>
  
  <subtitle>初心忘れるべからず</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://silentming.net/"/>
  <updated>2023-03-27T16:12:03.507Z</updated>
  <id>http://silentming.net/</id>
  
  <author>
    <name>SilentMing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using CloudFlare Warp to Access ChatGPT</title>
    <link href="http://silentming.net/blog/2023/03/27/using-cfwraper/"/>
    <id>http://silentming.net/blog/2023/03/27/using-cfwraper/</id>
    <published>2023-03-27T11:39:51.000Z</published>
    <updated>2023-03-27T16:12:03.507Z</updated>
    
    <content type="html"><![CDATA[<p>最近互联网的宠儿想必非ChatGPT莫属，在人工智能大火以后的这么多年，第一款让所有打工人都切实感受到或方便或恐惧的AI工具诞生了，但是在火热的当前更多的小白还无法接触这一最新的技术革命，直接访问openai得到的是对中国大陆的拒绝，好不容易使用vps搭了VPN的也惨遭Block封锁……</p><p>本篇记录通过CloudFlare Warp套壳获得ChatGPT访问权限的过程。</p><a id="more"></a><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul><li><p>VPN首先需要自己的VPN, 能够访问<code>openai.com</code>，这是一切的开始<br>可以参考: <a href="https://silentming.net/blog/2019/03/03/aws/">使用免费的亚马逊云服务(AWS)</a>获取免费的VPS(Virtual Personal Server)与<a href="https://silentming.net/blog/2023/03/26/v2ray/">使用V2Ray搭建个人VPN</a>来搭建个人VPN</p></li><li><p>OpenAI AccountOpenAI账号需要在官方自己注册，注册时需要国外的手机号，这里推荐一个比较便宜的平台:<code>https://sms-activate.org/</code> 20min不限次短信的虚拟个人手机号。一个OpenAI的虚拟手机价格大约在3￥RMB左右</p></li></ul><p>理论上来说，这个时候直接访问chatgpt: <code>https://chat.openai.com/</code>就可以使用了，然而大体量的云服务商如亚马逊、甲骨文、阿里云这些都被屏蔽了。OpenAI使用了CloudFlare的服务，我们也惨遭封禁……</p><img src="https://live.staticflickr.com/65535/52772012626_8a411e9450_w_d.jpg"><p>上面的IP是我AWS服务器日本地区的IP, 通过<code>ip138.com</code>也可以查询到结果:</p><blockquote><p>您的iP地址是：[18.181.68.227 ] 来自：日本东京 亚马逊云</p></blockquote><p>如果你和我有一样的问题，那么就可以开始我们本篇的正文了:</p><h2 id="CloudFlare-Warp"><a href="#CloudFlare-Warp" class="headerlink" title="CloudFlare Warp"></a>CloudFlare Warp</h2><h4 id="What’s-Warp"><a href="#What’s-Warp" class="headerlink" title="What’s Warp?"></a>What’s Warp?</h4><p>根据<a href="https://1.1.1.1/" target="_blank" rel="noopener">CloudFlare官方</a>的介绍:</p><blockquote><p>1.1.1.1 with WARP replaces the connection between your device andthe Internet with a modern, optimized, protocol.</p></blockquote><p><code>1.1.1.1</code>是CloudFlare提供的DNS解析，经过它家的DNS，结合Warp可以给我们的流量套一层安全壳。</p><h4 id="Warp-vs-VPN"><a href="#Warp-vs-VPN" class="headerlink" title="Warp vs VPN"></a>Warp vs VPN</h4><p>根据<a href="https://www.purevpn.com/blog/warp-vs-vpn/" target="_blank" rel="noopener">purevpn官网</a>的介绍:</p><p>Warp的作用是: DNS查询将受到Cloudflare的1.1.1.1 DNS服务的保护，WARP会添加一层加密以确保的流量不会被窥探者获取。但是WARP不会掩盖IP地址，这也意味着我们无法直接使用它进行翻墙。</p><p>所以Warp的作为主要是作为对隐私和安全的保护，达不到翻墙的作用。</p><h4 id="Why-Warp"><a href="#Why-Warp" class="headerlink" title="Why Warp"></a>Why Warp</h4><p>Warp虽然无法帮助我们翻墙，但是可以帮助我们穿过它们自家的墙:D,现在想要绕过CloudFlare的墙，要么换真国外机房、要么隐藏我们的IP。使用Tor也可以达到一样的效果，不过这个听说比较慢，所以我们使用简单且免费的Warp</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><p>一键安装脚本: <a href="https://gitlab.com/rwkgyg/CFwarp" target="_blank" rel="noopener">https://gitlab.com/rwkgyg/CFwarp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/rwkgyg/CFwarp/raw/main/CFwarp.sh &amp;&amp; bash CFwarp.sh</span><br></pre></td></tr></table></figure><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>官方安装指导: <code>https://pkg.cloudflareclient.com/install</code></p><p>按照官方教程添加对应的源，并安装: (以ubuntu为例)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install</span></span><br><span class="line">apt install cloudflare-warp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register device</span></span><br><span class="line">warp-cli register</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开代理模式</span></span><br><span class="line">warp-cli <span class="built_in">set</span>-mode proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Warp</span></span><br><span class="line">warp-cli connect</span><br></pre></td></tr></table></figure><p>验证效果:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check current IP (return proxy ip)</span></span><br><span class="line">curl ifconfig.me --proxy socks5://127.0.0.1:40000</span><br></pre></td></tr></table></figure><p>上面会显示现在经过warp后的IP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check ChatGPT</span></span><br><span class="line">curl chat.openai.com</span><br><span class="line">curl chat.openai.com --proxy socks5://127.0.0.1:40000</span><br></pre></td></tr></table></figure><p>如果配置正确的话，前者会返回1020的错误，后者则没有返回</p><h2 id="配置V2Ray"><a href="#配置V2Ray" class="headerlink" title="配置V2Ray"></a>配置V2Ray</h2><p>如果有桌面，那么直接设置socks5的代理就可以了，对于使用V2ray (xray)的用户，可以设置一层转发:</p><p>在outbounds里添加新的<code>outbounds</code>:</p><figure class="highlight"><figcaption><span>/usr/local/etc/v2ray/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"outbounds": [</span><br><span class="line">    &#123; ... &#125;, // Original outbounds</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"tag"</span>: <span class="string">"chatgpt_proxy"</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>: &#123;</span><br><span class="line">            <span class="attr">"servers"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">                    <span class="attr">"port"</span>: <span class="number">40000</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在routing里面添加路由规则:</p><figure class="highlight"><figcaption><span>/usr/local/etc/v2ray/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"routing": &#123;</span><br><span class="line">    "rules": [</span><br><span class="line">        &#123; ... &#125;, // Original rules</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">            <span class="attr">"outboundTag"</span>: <span class="string">"chatgpt_proxy"</span>,</span><br><span class="line">            <span class="attr">"domain"</span>: [</span><br><span class="line">                <span class="string">"openai.com"</span>,</span><br><span class="line">                <span class="string">"ip138.com"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>ip138.com</code>是为了后面进行测试加入的，路由规则把所有<code>openai.com</code>都转发到了<code>chatgpt_proxy</code>的出口上</p><p>同样也可以通过<code>ip138.com</code>来进行测试:</p><blockquote><p>您的iP地址是：[104.28.196.81 ] 来自：澳大利亚新南威尔士悉尼 Cloudflare</p></blockquote><p>至此我们大功造成，可以在Client端访问了！</p><img src="https://live.staticflickr.com/65535/52772537304_2c3117ec0e_c_d.jpg"><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>目前Android使用V2rayNG的话还是无法访问，即使VPS已经设置了转发, Android上的V2rayNG还是无法走Warp从而被拦下,目前还没有特别好的方法。</p><p>不过MacOS(使用v2ray)与Windows(使用V2rayN)均可以访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近互联网的宠儿想必非ChatGPT莫属，在人工智能大火以后的这么多年，
第一款让所有打工人都切实感受到或方便或恐惧的AI工具诞生了，
但是在火热的当前更多的小白还无法接触这一最新的技术革命，
直接访问openai得到的是对中国大陆的拒绝，
好不容易使用vps搭了VPN的也惨遭Block封锁……&lt;/p&gt;
&lt;p&gt;本篇记录通过CloudFlare Warp套壳获得ChatGPT访问权限的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tutorial" scheme="http://silentming.net/tags/tutorial/"/>
    
      <category term="record" scheme="http://silentming.net/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>使用V2Ray搭建个人VPN</title>
    <link href="http://silentming.net/blog/2023/03/26/v2ray/"/>
    <id>http://silentming.net/blog/2023/03/26/v2ray/</id>
    <published>2023-03-26T15:50:51.000Z</published>
    <updated>2023-03-27T16:12:03.507Z</updated>
    
    <content type="html"><![CDATA[<p>在服务器上部署自己的端口转发服务，V2ray是一个非常好的选择。目前V2ray支持多种协议，拥有方便的Android与Windows客户端，Linux上的配置文件简单方便，本篇记录V2ray的使用与配置方式。</p><a id="more"></a><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>使用亚马逊搭建个人服务器可参考: <a href="https://silentming.net/blog/2019/03/03/aws/">使用免费的亚马逊云服务(AWS)</a></p><p>V2ray的相关仓可以直接从github上进行获取:</p><ul><li>Main: <a href="https://github.com/v2ray" target="_blank" rel="noopener">https://github.com/v2ray</a></li><li>MacOS: <a href="https://github.com/v2ray/homebrew-v2ray" target="_blank" rel="noopener">https://github.com/v2ray/homebrew-v2ray</a></li><li>Android: <a href="https://github.com/v2ray/V2RayNG" target="_blank" rel="noopener">https://github.com/v2ray/V2RayNG</a></li><li>Windows: <a href="https://github.com/2dust/v2rayN" target="_blank" rel="noopener">https://github.com/2dust/v2rayN</a></li><li>Other Awesome tools: <a href="https://www.v2ray.com/en/awesome/tools.html" target="_blank" rel="noopener">https://www.v2ray.com/en/awesome/tools.html</a></li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>官方一键安装脚本: <code>https://github.com/v2fly/fhs-install-v2ray</code></p><h2 id="Configs"><a href="#Configs" class="headerlink" title="Configs"></a>Configs</h2><ul><li>Path: <code>/usr/local/etc/v2ray/config.json</code></li><li>Manual: <code>https://v2ray.com</code></li><li>Sample: <code>https://www.v2ray.com/en/welcome/start.html</code></li></ul><h3 id="Using-as-server"><a href="#Using-as-server" class="headerlink" title="Using as server"></a>Using as server</h3><p>在服务端的<code>/usr/local/etc/v2ray/config.json</code> 设置接受端口vmess协议并向外直接转发:</p><figure class="highlight"><figcaption><span>/usr/local/etc/v2ray/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [&#123;</span><br><span class="line">      // Server port, need to add TCP security policy in AWS security group</span><br><span class="line">      "port": 11223,</span><br><span class="line">      "protocol": "vmess",</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "clients": [&#123; "id": "81498305-0be0-4923-a270-df4e490a086b" &#125;] // Same as client</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  "outbounds": [&#123;</span><br><span class="line">    "protocol": "freedom",</span><br><span class="line">    "settings": &#123;&#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-as-client"><a href="#Using-as-client" class="headerlink" title="Using as client"></a>Using as client</h3><p>在客户端的<code>/usr/local/etc/v2ray/config.json</code>同样文件里设置本地端口转发到服务端的对应对口上:</p><figure class="highlight"><figcaption><span>/usr/local/etc/v2ray/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Log output to var and set log level to error</span><br><span class="line">    "log": &#123;</span><br><span class="line">        "access": "/var/log/v2ray/log",</span><br><span class="line">        "error": "/var/log/v2ray/log",</span><br><span class="line">        "loglevel": "error"</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Accept local socks request</span><br><span class="line">    "inbounds": [&#123;</span><br><span class="line">        "listen": "127.0.0.1",</span><br><span class="line">        "port": 11112,</span><br><span class="line">        "protocol": "socks",</span><br><span class="line">        "tag": "socks-inbound",</span><br><span class="line">        "settings": &#123;</span><br><span class="line">            "auth": "noauth",</span><br><span class="line">            "udp": true,</span><br><span class="line">            "userlevel": 8,</span><br><span class="line">            "ip": "127.0.0.1"</span><br><span class="line">        &#125;,</span><br><span class="line">        "sniffing": &#123;</span><br><span class="line">            "enabled": true,</span><br><span class="line">            "destOverride": ["http", "tls"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Accept local http request</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">11111</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line">        <span class="attr">"tag"</span>: <span class="string">"http-inbound"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>: &#123;</span><br><span class="line">            <span class="attr">"userlevel"</span>: <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    // Transfer to vps server using vmess</span><br><span class="line">    "outbounds": [&#123;</span><br><span class="line">        "mux": &#123;</span><br><span class="line">            "concurrency": -1,</span><br><span class="line">            "enabled": false</span><br><span class="line">        &#125;,</span><br><span class="line">        "protocol": "vmess",</span><br><span class="line">        "settings": &#123;</span><br><span class="line">            "vnext": [&#123;</span><br><span class="line">                "address": "server.ip.address",</span><br><span class="line">                "port": 11223, // Same as server</span><br><span class="line">                "users": [&#123;</span><br><span class="line">                    "alterId": 0,</span><br><span class="line">                    "id": "81498305-0be0-4923-a270-df4e490a086b",</span><br><span class="line">                    "security": "auto",</span><br><span class="line">                    "level": 8</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        "streamSettings": &#123;</span><br><span class="line">            "network": "tcp",</span><br><span class="line">            "security":""</span><br><span class="line">        &#125;,</span><br><span class="line">        "tag": "proxy"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    "routing": &#123;</span><br><span class="line">        "domainStrategy": "IPIfNonMatch",</span><br><span class="line">        "rules":[ ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    "dns": &#123;</span><br><span class="line">        "hosts": &#123;</span><br><span class="line">            "domain:github.io": "pages.github.com",</span><br><span class="line">            "domain:wikipedia.org": "www.wikimedia.org",</span><br><span class="line">            "domain:shadowsocks.org": "electronicsrealm.com",</span><br><span class="line">            "domain:googleapis.cn": "googleapis.com"</span><br><span class="line">        &#125;,</span><br><span class="line">        "servers": [</span><br><span class="line">            <span class="string">"1.1.1.1"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    "policy": &#123;</span><br><span class="line">        "levels": &#123;</span><br><span class="line">            "8": &#123;</span><br><span class="line">                "connIdle": 300,</span><br><span class="line">                "uplinkOnly": 1,</span><br><span class="line">                "handshake": 4,</span><br><span class="line">                "downlinkOnly": 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "system": &#123;</span><br><span class="line">            "statsInboundUplink": false,</span><br><span class="line">            "statsInboundDownlink": false,</span><br><span class="line">            "statsOutboundUplink": false,</span><br><span class="line">            "statsOutboundDownlink": false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Running-service"><a href="#Running-service" class="headerlink" title="Running service"></a>Running service</h2><p>客户端和服务端都启动v2ray:</p><p>Directly Run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2ray --config /usr/<span class="built_in">local</span>/etc/v2ray/config.json &amp;</span><br></pre></td></tr></table></figure><p>Start as systemd service</p><figure class="highlight sh"><figcaption><span>Linux</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set v2ray as startup service</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> v2ray</span><br><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>MacOS</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services start v2ray</span><br></pre></td></tr></table></figure><p>之后在客户端使用对应代理就可以了:</p><figure class="highlight sh"><figcaption><span>linux/unix</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy = <span class="string">"127.0.0.1:11111"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy = <span class="string">"127.0.0.1:11111"</span></span><br></pre></td></tr></table></figure><p>在Windows上配置浏览器代理即可</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在服务器上部署自己的端口转发服务，V2ray是一个非常好的选择。
目前V2ray支持多种协议，拥有方便的Android与Windows客户端，
Linux上的配置文件简单方便，本篇记录V2ray的使用与配置方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tutorial" scheme="http://silentming.net/tags/tutorial/"/>
    
      <category term="record" scheme="http://silentming.net/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>Install Both Android Emulator &amp; WSL2 on Windows 11</title>
    <link href="http://silentming.net/blog/2022/10/30/install-wsl2-on-win11/"/>
    <id>http://silentming.net/blog/2022/10/30/install-wsl2-on-win11/</id>
    <published>2022-10-30T12:40:29.000Z</published>
    <updated>2023-03-19T16:59:18.811Z</updated>
    
    <content type="html"><![CDATA[<p>Install both android emulator and wsl(windows linux subsystem).</p><p>If you directly install the android emulator like nox, mumu it will tell you that “pleaseopen Intel vT” or “system configuration is not compatible”.</p><p>Let’s solve the problem and run both of them!</p><a id="more"></a><h2 id="Brief-Introduction-to-Referred-Concepts"><a href="#Brief-Introduction-to-Referred-Concepts" class="headerlink" title="Brief Introduction to Referred Concepts"></a>Brief Introduction to Referred Concepts</h2><h4 id="WSL-Windows-Subsystem-for-Linux"><a href="#WSL-Windows-Subsystem-for-Linux" class="headerlink" title="WSL (Windows Subsystem for Linux)"></a>WSL (Windows Subsystem for Linux)</h4><p>You could find the detailed info from <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noopener">wiki</a>. For most target users the wsl is afast linux virtual machine running windows.</p><p>The wsl released version 2 on May 2019 with Hyper-V (microsoft para-virtualization,see previous posts <a href="https://silentming.net/blog/2018/06/13/virtualization-intro-0/">Virtualization Introduction</a> and <a href="https://silentming.net/blog/2017/02/28/xen-log-11-what-color-is-your-guest/">What Color Is Your Guest(Chinese)</a>)</p><p>So it’s recommended to use it on latest version of windows 11. (The vim or qemu in wsl runsslowly when I was using win10. But the issue is fixed on Win11)</p><h4 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h4><p>The official introduction of <a href="https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/" target="_blank" rel="noopener">Hyper-V</a> only talked the pros but won’t tell you thatyour Android Emulator or other VM software (like VMWare) will be breaked once the featureis enabled. I didn’t dig into the implementation only guess that the Hyper-V will intervenethe virtualization interface so that original VM software couldn’t get correctly resultwhen they want to use hardware supported virtualization directly.</p><p>The Microsoft will recommend you to build VM using Hyper-V but we actually want to useour own virtualization managers. So how about just shut down the Hyper-V feature?Unfortunately, the latest version of WSL force you open the Virtual Machine Platformwhich depends on Hyper-V and will open partial related modules even though we didn’topen the Hyper-V feature. So if we want to use both WSL and Emulator we have to findcorrect alternatives.</p><h2 id="Run-Linux-Subsystem"><a href="#Run-Linux-Subsystem" class="headerlink" title="Run Linux Subsystem"></a>Run Linux Subsystem</h2><h4 id="Install-WSL2"><a href="#Install-WSL2" class="headerlink" title="Install WSL2"></a>Install WSL2</h4><p>It’s easy to install the WSL2 (<a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener">official tutorial</a>).</p><ol><li>Open your microsoft store</li><li>Search the WSL</li><li>Choose one distribution (Debian, Ubuntu, SUSE, etc)</li><li>Run it</li></ol><p>Oops, the software tell you that you should open the feature first!</p><h4 id="Open-Virtualization-Support"><a href="#Open-Virtualization-Support" class="headerlink" title="Open Virtualization Support"></a>Open Virtualization Support</h4><p>Search VT-x in your BIOS and enable it. The VT-x is microsoft virtualizationsupport upon which the hypervisor kernel could be run and leverage the hardwaresupport to create virtual machine(The CPU virtualization in <a href="https://silentming.net/blog/2018/06/13/virtualization-intro-0/">Virtualization Introduction</a>).</p><p>You could also open SR-IOV (Single Root I/O Virtualization, IO virtualization hardware support) if your mainboard support it.</p><h4 id="Open-Features"><a href="#Open-Features" class="headerlink" title="Open Features"></a>Open Features</h4><p>Easy way:</p><blockquote><ol><li>Open “Start” (Press Windows key) and search “control panel)</li><li>Open “Programs”</li><li>Open “Turn Windows features on or off” in “Program and Features”</li><li>Check the “Virtual Machine Platform” and “Windows Subsystem for Linux”</li></ol></blockquote><p>or you could open it in cmd:</p><blockquote><ol><li>“Win+R” to open running</li><li>Open “CMD” as Administrator</li><li>Open the feature in cmd:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line">&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>You have to reboot the system when you change the above features.</p><h4 id="Run-WSL2"><a href="#Run-WSL2" class="headerlink" title="Run WSL2"></a>Run WSL2</h4><p>Now we could open and run our WSL. Here to change the default fonts (The fonts will changed back everytime we reopen the wsl), we have to modify the regentry manually.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Open regedit (Win+R and run regedit)</span><br><span class="line">2. Computer\HKEY_CURRENT_USER\Console\your_linux_subsystem_distribution</span><br><span class="line">3. Add CodePage (Type: DWORD, Value: 0x01b5). This is Lucida Consola</span><br></pre></td></tr></table></figure><h2 id="Run-Android-Emulator"><a href="#Run-Android-Emulator" class="headerlink" title="Run Android Emulator"></a>Run Android Emulator</h2><p>We have no choice but to choose the “correct one”. The BludStack has Hyper-V supported versionso we could use it for our gameplay.</p><p><a href="https://www.bluestacks.com/" target="_blank" rel="noopener">Offical Download Page</a></p><p>Before install it, please open other Hyper-V features: (All of them could be opened in “control panel”</p><ul><li>Hyper-V</li><li>Windows Hypervisor Platform</li><li>Windows Sandbox</li></ul><p>Reboot the system and install the bluestacks. It will prompt and let you grant the Hyper-V feature to it. After the installation you could now use BludStack Emulator on Hyper-V enabled windows. The WSL could also be run of course.</p><hr><p>Most android emulators are built upon the bludstack since it is open source. So we should beoptimistic that other emulators will support Hyper-V in the future. And this will let youremulators run much faster.</p><p>Enjoy your gameplay and works now!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Install both android emulator and wsl(windows linux subsystem).&lt;/p&gt;
&lt;p&gt;If you directly install the android emulator like nox, mumu it will tell you that “please
open Intel vT” or “system configuration is not compatible”.&lt;/p&gt;
&lt;p&gt;Let’s solve the problem and run both of them!&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://silentming.net/tags/linux/"/>
    
      <category term="virtualization" scheme="http://silentming.net/tags/virtualization/"/>
    
      <category term="windows" scheme="http://silentming.net/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>上海隔离日记</title>
    <link href="http://silentming.net/blog/2022/04/11/shanghai-quarantine-life/"/>
    <id>http://silentming.net/blog/2022/04/11/shanghai-quarantine-life/</id>
    <published>2022-04-11T15:50:51.000Z</published>
    <updated>2023-03-25T16:15:03.199Z</updated>
    
    <content type="html"><![CDATA[<p>3月初开始上海每日就有着零星的病例，可能是香港输入，也可能是其他地方的传播，那时住在上海的打工人没有人会想到不到一个月，上海的疫情会扩散到全民封城的地步。平日两点一线往返于工作地与家，与我一样寄居在出租屋的打工仔们，又有多少心理与实际的准备，来面对着突如其来的长时间封城呢？</p><a id="more"></a><p>昨晚做了个梦，梦见自己出差去广州，然后开车跑到了越南的“久岐市”，车的手刹还不太灵……入关的时候海关人员和蔼地跟我说，当地防疫已经不需要带口罩了，但长期处于严格防疫状态的我还是坚持带着口罩参观。跟随导览观看了一处活火山的岩浆，火山口有一个像绿巨人一样的人从口中向游客吐出岩浆球，我害怕地看向导览，导览一笑：“这个是表演……”，我还对此啧啧称奇。在路上遇到了同样本该在上海隔离的朋友，我们相视一笑，而此刻岩浆球喷到了我把我喷醒了……</p><p>我寻思可能是居家时间太久，连梦里都变成了离开上海出国旅游。所玩的游戏要出一个角色叫“久岐忍”，可能因此我到达了一个不存在的“久岐市”;所玩的另一款游戏有一个经常使用的技能“岩石球”，所以在梦里见到了岩浆球吧。至于为什么是从广东开车跑到越南，说实话我也摸不着头脑，想来想去可能需要写篇日记缓和一下自己的居家情绪，免得时间更长梦里出来更多乱七八糟的东西，因此有了此文。</p><h3 id="决赛圈的小区"><a href="#决赛圈的小区" class="headerlink" title="决赛圈的小区"></a>决赛圈的小区</h3><p>从3月初开始就有同事因为次密接等原因陆陆续续被要求居家隔离，尤其是由于工作的原因我们一些同事需要往返于广深与上海，在深圳疫情扩散的那段时间，去过广深的同事都根据当地的各种政策有过不同长度的隔离。</p><p>在那时上海每日只有零星几个病例，我深圳在3月中旬还能够去南京出差，即使是后续的动态网格核算筛查，我们小区以出色的全阴表现，从未有人被要求居家或无法到达工作岗位。看着同事的小区一个个跑毒<a href="#1"><sup>[1]</sup></a>失败，决赛圈<a href="#1"><sup>[1]</sup></a>的我甚至还想居家两天来体验一下隔离生活的感觉，毕竟最差也不会比2020年差嘛，每天可以多睡半小时，叫外卖就能过活，看起来也没那么糟糕？</p><p>和同一小区的同学每天回家路上也会是不是调侃，就像在游戏里处于决赛圈的玩家都会开心的看着跑毒玩家一样，我们也在调侃中似乎忘记了真实的世界里又怎会留出一个“安全区”呢？</p><p>3月26日，周六，加班下班回来的路上，同一小区的同学X从舍友处得知，我们小区要被封了，闻此，我们屁颠屁颠跑到盒马置办了一些物资，买的时候是以居家2-4天为考虑的，因为根据之前的经验，这次只是动态网格排查到了我们小区而已，不出意外48小时就会解封。</p><img src="https://live.staticflickr.com/65535/51994213030_7def957da2_k_d.jpg" title="3人份的物资"><p>这是3人买的物资，我主要买了些零食和水果。</p><h3 id="急转而下的形势"><a href="#急转而下的形势" class="headerlink" title="急转而下的形势"></a>急转而下的形势</h3><p>从盒马回来的路上，我们路径一个小区正在被工人用木板围住，“可能是防止通过栏杆拿外卖导致疫情扩散吧？”同学X发出了这样的猜疑，而那一声声咚咚钉木板的声音都预示着这次疫情的不乐观，当身边看到了如此严格的封闭时，自己才会切身体会到疫情已经扩散到了自己身边。</p><p>3月26日晚，我们听到楼下有不寻常的声音，下楼一看惊讶的发现也被木板隔离了，而且我们和同学X是同一小区的，在小区内部竟然也拉起了木板，两边要各自走各自的大门。“难道是对面出了什么意外？担心扩散到我们这边所以拉起了木板？”这是我的第一反应，而当晚上同学X在群内说被大白检测了核酸后，更加印证了我的这一猜想。</p><p>3月27日，大白开始对我们进行了核酸，与之相配的是，小区的另一半解除了封闭，而我们这边则开始了严格的消杀。？！这木板原来是为了隔离我们！原来是我们这侧出现了病例！看来这封城一时半会要好不了了。与此同时我和舍友则泛起些微的担忧，看着空空的厨房，长期两点一线的我们哪会预料到这个？空有炉灶但没有一口锅，微波炉、电磁炉、碗碟筷一概没有！所幸两人各有一个烧水壶，还有角落里的几盒泡面，加上刚买的盒马物资，一周时间还是能熬过去的，大概吧。</p><img src="https://live.staticflickr.com/65535/51993950119_7aa1bb012b_h_d.jpg"><p>木板的另一边就是小区的另一半，也是同学X所在的一半，我们这一半打开了平时许久不用的另一个大门，在大门处有一条过道和好几个货架，当外卖与快递送来时，社区志愿者会进行消杀后放到货架上，等我们到达后再让志愿者拿给我们以实现全程的无接触配送。</p><h3 id="外卖小哥就是我的再生父母"><a href="#外卖小哥就是我的再生父母" class="headerlink" title="外卖小哥就是我的再生父母"></a>外卖小哥就是我的再生父母</h3><p>所幸现在只是我们小区被封闭，外卖依旧可以点，就是因为被封的小区有点多，选择的余地少些罢了。</p><p><strong>3.27 星期日； 早：沙琪玛+牛奶; 中：泡面; 晚：蜀相人家外卖</strong></p><p>周末过得似乎没什么不同，我依旧乐呵呵打开老头环打了一天，美哉美哉。中午吃泡面纯粹是因为游戏打久了，点外卖等不及了，嘿嘿</p><p><strong>3.28 早：沙琪玛；中：凉皮肉夹馍；晚：泡面</strong></p><p>周一我们申请了居家办公，作为IT行业居家办公与在公司办公除了沟通效率有所降低外没什么不同，自己的行业受疫情影响较小，自己的职位也和消费民生关系不大，所以工作依旧~</p><p>晚上17:00快下半时打开了饿了么与美团却惊愕地发现所有的店家都关!门!了！其实下午16:00店家就都关了，外卖也没了，晚上只能再吃一份泡面，我心里隐隐感觉到了不安，至少……明天中午订餐的时候把全天的饭都买了吧。</p><p><strong>3.29 早：舍友的蛋糕；中：番茄鸡蛋盖浇饭；晚：中午一起买的水饺</strong></p><p>和预想的一样，下午一过16:00就没有了外卖，舍友靠着买的许多烘培度过，而我晚上则吃着不热不冷的水饺。看着形势越来越不对劲，当晚我就买了第二天的饭，找了一家还在营业的餐馆，定了几个不错的菜：鱼香肉丝饭、麻婆豆腐饭、虾仁炒蛋。改善一下伙食吧！</p><p><strong>3.30 早: 舍友的面包; 中：泡面；晚：！！！</strong></p><p>从早上上班开始我就时不时刷着APP看着外卖的进度，外卖小哥从早上11点不到就开始在餐馆等，到了快13:00依旧在等，而我等不及便又泡了一桶泡面。</p><p>到了14:30，外卖小哥等不及了，取消了配送。我赶紧在APP上要了小哥微信以此了解情况。外卖小哥也是有责任心的好人，担心我吃不到饭说帮我解决，他找了家不在线上的餐馆，发了一个长长的菜单让我挑，我的眼中瞬间燃起了希望，直接下单3份饭菜，保证了晚上和第二天的伙食。</p><p>真是佩服自己的智慧，也就这样我通过一个没有点到的外卖认识了一位外卖小哥，让小哥帮我直接买饭，这样这几天不就都可以快活过了？哈哈哈，佩服自己！我给了小哥双倍的路费以示感谢。</p><img src="https://live.staticflickr.com/65535/51993715296_fafdb7f993_c_d.jpg"><p>订单在下午15:30左右我也识相地取消了，这份饭也是不可能送到了，但是也因此认识了一位外卖小哥。</p><img src="https://live.staticflickr.com/65535/51993731121_ebf7f01c61_o_d.jpg"><p>晚上我吃的非常好，毕竟这是几天晚上吃的最热乎与丰盛的晚餐了，3种菜样，都是下饭的：青椒肉丝、番茄炒蛋、麻婆豆腐；舍友这两天买到了一次KFC，5个汉堡和各类炸鸡，真的是各凭本事了。</p><p><strong>3.31 早：沙琪玛；中：昨天小哥买的饭; 晚：水饺</strong></p><p>在外卖平台上发现一家卖牛肉面的店家在卖冻饺，二话不说下单买了几份，在中午消耗掉小哥的饭后晚上吃了份冻饺。</p><p>你问隔夜饭怎么加热？为什么不继续找小哥帮买？我没有锅怎么煮的冻饺？</p><p>隔夜饭是通过煮水壶烧水然后蒸热的，后面两点只能说情况每时每秒都在改变，我也只能随机应变了……</p><h3 id="热心、负责、温柔的楼组长阿姨！"><a href="#热心、负责、温柔的楼组长阿姨！" class="headerlink" title="热心、负责、温柔的楼组长阿姨！"></a>热心、负责、温柔的楼组长阿姨！</h3><p>没错，3月31日，上海宣布封城了，这个拉不下脸的城市正式放低了身段开始进行了封城，说什么先封浦东后封浦西只不过是自欺欺人的说法，封城就是封城。在这里我也不散播什么不可信的阴谋论，但是前期防疫的不坚决是这次疫情扩散的主要原因，至少开始封城意味着态度与风向的转变，也算是好事吧。只不过封城前的狂欢则让人实在气不过管理者的愚钝，前几日只是我们小区被封，但是很多小区是正常的，因此在封城通知前大家进行了几小时的疯狂购物，其结果嘛不用想也知道会导致大规模聚集……</p><p>不知是不是提前预感到了这一点，外卖小哥在昨晚便告诉我31日不再出来送货，这也是我当晚无法继续找小哥买饭的原因, 看来找外卖小哥这条路也断了……</p><p>我们小区是一个基层动作执行非常规范的小区，拜提前封闭所赐，志愿者、居委准备的非常充足，每个楼栋都有楼组长负责帮我们团购物资。我们的楼组长是一位住在这里的上海本地阿姨，阿姨人好心善，得知我们没有锅之后慷慨地借给了我们一口锅，这样团购买的菜至少可以煮了。</p><p>好巧不巧，因为我喜欢吃椰子、苹果之类的，刚好买了水果刀和削皮器；为了减少一次性筷子使用，之前买了自己的筷子和洗洁精；之前搬过来时因为买过烧烤用的高级海盐，舍不得丢所以带了一袋盐；曾经帮社区做过一词问卷调研，当时送了个案板，现在还没拆封；刚好同一小区有另两位同学，其中一位在封城前去了女友那边，我和舍友找他们借了碗、碟、铲、酱油……这不，真是好巧不巧，做饭的东西齐活了！</p><p>这里要感谢热心的楼组长！比心！</p><h3 id="自给自足的日子"><a href="#自给自足的日子" class="headerlink" title="自给自足的日子"></a>自给自足的日子</h3><p>4月1日是上海开始正式封城的日子，也是我开始居家自己做饭的日子。舍友是个作息比我规律的人，早上会去APP上抢菜，多亏他买到了好几次像海底捞、牛奶、肉品、蛋糕等改善生活品质的物资。</p><p>我则像个寄生虫一样蹲在楼组长的群里面每时每秒等着楼组长发起的团购，每天都有着不错的伙食，就是每天要多花一些时间做饭，而且一口锅又蒸米、又炒菜效率还是低啊…… (食物流水账放文章末尾了)</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><h4 id="必须点赞的社区"><a href="#必须点赞的社区" class="headerlink" title="必须点赞的社区"></a>必须点赞的社区</h4><p>这次居家生活质量的好坏完全取决于社区基层的执行能力，政府能够做到的只有调配物资，但联系团购、分配到家、信息收集与统计等等都需要社区来完成，我们社区是一个比较老的上海本地社区，不乏老人。但是社区阿姨大叔真的十分负责，令人感动。</p><p>核酸检测井井有序，按栋检测。团购物资虽然说不上丰富，但至少可以解决温饱，一周一到两次的不限量团购大可以让自己过上不饿肚子的生活。</p><p>相比一些小区物资送不到，物业没人，有的小区生硬的不允许外部物资进入小区，美其名曰防止外部感染，全然不顾里面居住的居民生活。基层的执行动作不到位导致上海的负面新闻频出，作为一个生活在防疫区的人，身边确有同事饿过肚子，抢不到菜，和开始的我一样没有炊具的人也不少，依靠着泡面、面包糕点惶惶度日。但这都是基层执行的问题，经过一周的阵痛期，之前了解到的生活较为惨淡的同事现在也基本上好了起来，大体向好。</p><p>我身边有这么好的社区实在不易，尤其还是较老的小区，不是通过物业而是通过居民组成的居委做的这么专业，令人不得不佩服。</p><p>也希望疫情能够快速过去，大家也多给基层一些鼓励和信心。</p><h4 id="平时的未雨绸缪"><a href="#平时的未雨绸缪" class="headerlink" title="平时的未雨绸缪"></a>平时的未雨绸缪</h4><p>这波疫情结束后，消毒物资、炊具我肯定会常备了，从来没有想到某一天会因为吃不到东西而担忧，果然是好日子过惯了呢。</p><p>同样的，掌握做饭的本事也至关重要，自己之前练习过一些菜肴让只有一口锅的我在居家时也不会显得那么不安。一些不贵的东西：水果刀、削皮器、洗洁精，在这种时候竟然显得这么好用！平时赚再多的钱又有什么用？连自己的生活都顾不好怎是一个合格的打工仔！</p><h4 id="前期拉跨的防疫"><a href="#前期拉跨的防疫" class="headerlink" title="前期拉跨的防疫"></a>前期拉跨的防疫</h4><p>这次疫情上海的动作和执行网上流传的说法很多，无论上海的当局者想要怎么做都无法否认这次上海前期的防疫是失败的。</p><p>在上海实行动态网格的时候我就不以为然，作为曾经横穿上海上班的我，每日来回往返不同区域的人大有人在，封一部分小区放一部分小区并不能阻断病毒传播的路径，最多减少了病毒传播的效率，但是对于动态清零的政策来讲没有任何用处。</p><p>即便被全网职责时，也依旧有发言人在发布会上声称上海是全国的上海，不能封云云。试想深圳作为制造业集中的沿海大市，港口众多，紧接香港都能坚决封城从而快速清零，上海这一说辞实在算不上合理，反而体现了些许的傲慢，按理说金融中心白领众多，大部分可以居家办公，封城带来的影响会更小才是。所幸后面还是老实封城了。</p><h4 id="共存的思潮"><a href="#共存的思潮" class="headerlink" title="共存的思潮"></a>共存的思潮</h4><p>在3月中旬我曾出差到南京，当时与其他属地的同事交流时就有人提过当前严格的防疫可能是既得利益集团想要从医保中赚取抗疫拨款，毕竟检测试剂也是门生意，奥密克戎变种根据西方的研究大部分都是轻症，可以自愈，其实可以共存的。</p><p>不知是否是这一思潮在金融中心更易发散，身边确实有不少这么认为的同事，但是当人民打完疫苗之后才达到和流感一样的死亡率时，当已经有了如此充足的应对之后才勉强和流感差不多时，我很难将它和流感划等号。</p><p>美国逐年增多的死亡人数、有着特效药和疫苗却被疫情一轮轮清洗的日子又如何说服我共存是合理的呢？更别说那些后遗症，谁知道下一个踩狗屎的是不是自己呢？</p><p>当然后续上海的抢菜难更加坚定了我认为必须清零的信念。毕竟连菜都抢不到，等疫情铺开后又怎么保证自己能抢到一张病床呢？</p><h4 id="独居与合租，本地与外地"><a href="#独居与合租，本地与外地" class="headerlink" title="独居与合租，本地与外地"></a>独居与合租，本地与外地</h4><p>刚毕业有段时间我也是一人独居，一居室没有厨房，只有一个烧水壶和微波炉，如果现在还住在这样的环境中，可以想象当封城来临时生活会受到多大的打击。说艰难，和艰苦地区相比似乎又有些矫情，但不适应是一定的。</p><p>生活上的不适应好歹还能看到改进的希望，心理上的不适应则需要认真纾解。本地的同学有许多朋友，在群里大家一起聊天可以一定程度上缓解一个人的孤独，但是同样也能更多看到身边人生活的艰难，亦容易变成负能量的聚集地。同学X是上海本地人，当作为子女发现自己的父母也因为疫情吃不上菜，帮父母凌晨起来抢菜又空手而归时，那种焦虑与不安让本就不好的自己更受打击。若是一个人生活则更容易产生心理的阴暗。</p><p>可见平时还是需要一个能全身心投入的爱好，哪怕它看起来是不务正业的游戏、动漫，但这些爱好能在生活的低估让我们保持乐观，所以我以后一定要找一个不会阻止我打游戏看动漫的妹子！</p><p>作为一个外地来到上海的人，我庆幸于大部分认识的朋友都不在上海，我的母亲在家乡非常安全，生活充实；我的同学在其他城市正常工作，尤其是一些以表演、翻译等等为生的自由职业者，他们所在的城市没有停止相关的场所，也让他免于因为封城找不到工作带来的焦虑。整体上我只要考虑自己，只要让自己过好就能让父母朋友免于担心。</p><p>老头环还没有打完、原神更新了新地图、4月新番开播、挖的画画坑已搁置了很久……想要做的事情太多，只要吃的解决了、工作还在，再居家更长的时间于我也无所谓！</p><h4 id="多一些信心"><a href="#多一些信心" class="headerlink" title="多一些信心"></a>多一些信心</h4><p>说实话一些负面消息是真实的，但谣言也满天飞，更有甚者在业主群掀起混乱， 鼓吹动乱的外部势力渗透。在这样一个特殊的时期，更重要的还是坚持清零的政策。即使纠正底层执行的死板，比如封城的第二周，之前买菜难的小区也陆陆续续收到了政府的物资。</p><p>外部省份对上海的敌视也可以理解，毕竟外溢的大部分病例都来自上海。在这样一个特殊时期，人民需要情绪的宣泄，而上海本身传出的负面新闻也让这所城市成为了此时的宣泄口。</p><p>我们需要的是给这所城市多一些信心。外部势力与无所作为的官员毕竟还是少数，在国家动态清零的大方向下，相信最终我们能获得抗疫的胜利。</p><h2 id="附录图"><a href="#附录图" class="headerlink" title="附录图"></a>附录图</h2><img src="https://live.staticflickr.com/65535/51992863807_cc246edf8d_c_d.jpg"><p>除了政府发放的物资，舍友经常能抢到许多东西，上图的这个好吃的面就是舍友抢到的。</p><img src="https://live.staticflickr.com/65535/51994407230_fd0d64680b_c_d.jpg"><p>蛋炒饭！万能的蛋炒饭！只要有鸡蛋和米，就能活下去。背后的莲花清瘟也是社区发的物资。</p><img src="https://live.staticflickr.com/65535/51993922718_f6bbf28344_c_d.jpg"><p>第一天刚拿到菜时炒的西兰花炒洋葱，说实话味道不咋地，西兰花是真的没啥味道。</p><img src="https://live.staticflickr.com/65535/51993922723_3db34c6d7e_c_d.jpg"><p>因为没有蚝油，所以放的火锅酱，酱口味太重了……</p><img src="https://live.staticflickr.com/65535/51993861776_c5cf736197_c_d.jpg"><p>吃完才想起来拍照，洋葱炒土豆，味道不错哦~</p><img src="https://live.staticflickr.com/65535/51992863702_d26f6d894b_c_d.jpg"><p>舍友抢到的烧卖和肉丝，终于开始吃肉的我们！</p><img src="https://live.staticflickr.com/65535/51994407130_8c1ef8f62b_c_d.jpg"><p>上海好像没这种吃法？鸡蛋打好之后沸水一冲就成，就根黄瓜当早餐了，我们那边叫冲鸡蛋。</p><img src="https://live.staticflickr.com/65535/51993861661_fec9d8390a_o_d.jpg"><p>这个是4月10日时的物资，大部分都是政府发的！</p><img src="https://live.staticflickr.com/65535/51994407075_6d7517c1e5_c_d.jpg"><p>舍友抢到的挂面、火腿、牛奶</p><img src="https://live.staticflickr.com/65535/51994135929_84e7b48287_c_d.jpg"><p>万能的舍友抢到的海底捞！跑一顿煮面吃两顿，真的好吃啊……</p><img src="https://live.staticflickr.com/65535/51994407035_e66920f9f3_c_d.jpg"><p>在楼组长那边团购的米，除了这两袋还有一袋正在吃的。</p><img src="https://live.staticflickr.com/65535/51993861606_2546d22fea_c_d.jpg"><p>政府发放的第三拨物资，量最大的一次，之前主要都是发的蔬菜。</p><img src="https://live.staticflickr.com/65535/51993922578_2c8d103bb3_c_d.jpg"><p>团购和抢购的部分物资，鸡蛋、黄瓜等，都是4月10日时的储备状态。</p><h2 id="餐食流水账"><a href="#餐食流水账" class="headerlink" title="餐食流水账"></a>餐食流水账</h2><p>(5.17之后就返工在公司生活了)</p><ul><li>4.1：早：舍友新买的盒马烘焙；中：水饺；晚：米粥、青豆、土豆炒番茄</li><li>4.2：早：蛋糕；中：米饭，炒青菜，炒土豆丝; 晚：鸡蛋到了！笋瓜炒鸡蛋、西兰花炒洋葱、米饭；</li><li>4.3：早：面包；中：水饺(水饺告罄); 晚：炒洋葱胡罗卜丝、煮生菜、米饭</li><li>4.4：早：面包：中：番茄炒蛋、煮青菜、米饭；晚：蛋炒饭(中午多蒸了米)；</li><li>4.5：早：沙琪玛；中：洋葱炒胡罗卜、土豆炒胡罗卜、米饭；晚：煮生菜、土豆炒洋葱、米饭；</li><li>4.6：早：沙琪玛；中：洋葱炒鸡蛋、啃黄瓜、米饭；晚：洋葱炒肉！(舍友买到肉了)、煮青菜、煮生菜、米饭</li><li>4.7：早：米粥；中：水饺，舍友米粥吃撑了，午饭pass；晚：蛋炒饭</li><li>4.8：早：冲鸡蛋(鸡蛋茶); 中：煮面条(把一些剩菜边角料处理掉)；晚：米饭炒菜</li><li>4.9：早：周末懒觉没吃；中：海底捞！；晚：海底捞煮面条！</li><li>4.10：早：苹果；中：煮水饺；晚：芹菜炒肉丝、青椒胡罗卜丝炒蛋、米饭</li><li>4.11：早：黄瓜；中：煮鸡蛋面+方便面；晚：青椒肉丝、洋葱胡罗卜丝、米饭</li><li>4.12：早：橘子；中：煮鸡蛋面+方便面(鸡蛋面再不吃要坏了)；焖胡萝卜白萝卜、洋葱炒蛋、米饭</li><li>4.13：早：黄瓜；中：煮鸡蛋面+方便面；晚：芹菜炒肉、番茄丝瓜炒鸡蛋、米饭</li><li>4.14：早：黄瓜；中：香菇肉水饺；晚：西红柿菠菜鸡蛋面</li><li>4.15: 早：None；中：挂面+方便面(菠菜、丝瓜、火腿); 晚：蒜蓉茼蒿、白灼小白菜</li><li>4.16: 早：黄瓜；中；水饺；晚：火锅(没错，舍友买到了火锅！)</li><li>4.17：早：面包(又一次收到了政府物资，有面包、盐、酱油等)；中：火锅，把剩余的牛肉卷吃掉了；晚：蒜苔炒鸡蛋、芹菜炒肉、米饭；</li><li>4.18：早：面包；中：水饺；晚：挂面，火锅底料和昨天没吃完了的菜一起配面条煮了~</li><li>4.19：早：蛋糕(舍友又抢到了盒马烘焙); 中：水饺；晚：方便面+挂面；</li><li>4.20：早：蛋糕；中：方便面+挂面；晚：米饭、芹菜炒肉、洋葱炒鸡蛋；</li><li>4.21：早：饼干；中：方便面+挂面；晚：水饺(上班太忙了，根本没空做饭）</li><li>4.22：早：手撕面包；中：方便面+挂面+菜；晚：笋炒鸡蛋，油泼茄子，咸鸭蛋，米粥</li><li>4.23：早：面包；中：面条；晚：面条；</li><li>4.24：早：面包；中：面条；晚：莴苣炒肉，蒜苔炒鸡蛋，米饭；</li><li>4.25：早：面包；中：饺子；晚：面条；</li><li>4.26：早：面包；中：面条；晚：饺子+面条；</li><li>4.27：早：面包；中：面条；晚：蛋炒饭</li><li>4.28：早：蛋黄派；中：面(买的豆制品、番茄都到啦); 晚：番茄鸡蛋、青椒肉丝盖浇饭</li><li>4.29：早：蛋黄派；中：挂面；晚：醋溜土豆、麻婆豆腐、米饭</li><li>4.30：早：假期睡懒觉直接过去了:)；中：挂面，买了好多豆制品；晚：番茄鸡蛋，青椒素鸡丝，米饭；</li><li>5.1：早：睡觉；中：挂面，豆制品太多了，都快过期了。</li><li>5.2：早：睡觉；中：挂面；晚：米饭，豆干炒肉，青椒土豆丝</li><li>5.3：早：睡觉：中：面条；晚：米饭，青椒肉丝，醋溜土豆丝</li><li>5.4：早：睡觉：中：面条；晚：米饭，番茄鸡蛋，莴苣炒肉</li><li>5.5：早：睡觉；中：面条；晚：米饭，烧茄子</li><li>5.6：早：无；中：面条；晚：炒米</li><li>5.7：早：豆奶；中：面条；晚：土豆咖喱饭 (这次买了8斤菜全是土豆青椒)</li><li>5.8：早：睡觉；中：面条；晚：青椒土豆丝，蛋炒饭(全靠舍友的午餐肉)</li><li>5.9：早：无；中：面条；晚：鸡蛋羹、土豆咖喱饭</li><li>5.10：早：点心(舍友买了拉面球); 中：面条；晚：蛋炒饭</li><li>5.11: 早：麦片+豆奶；中：面条(黄瓜、香肠配菜)；晚：蒜苔炒鸡蛋、青椒土豆丝、米饭</li><li>5.12: 早：蛋糕(大礼包送了蛋糕); 中：面条；晚：蛋炒饭</li><li>5.13: 早：蛋糕；中：面条；晚：米饭，烧茄子，油炸金针菇(做的巨失败)；</li><li>5.14：早：睡觉；中：面条(鸡蛋告罄)；晚：卤面(突然想吃路面)；</li><li>5.15：早：睡觉；中：青椒肉丝炒饭；晚：麻婆豆腐、醋溜土豆丝、米饭</li><li>5.16：早：蛋糕；中：面条；晚：麻婆豆腐炒饭</li><li>5.17：早：面包；中：面条(青菜和鸡蛋买到了)；晚：卤面(韭菜炒鸡蛋、青菜)</li></ul><p>[1]: <a name="1"></a>跑毒、决赛圈的出处来自于一款名叫《绝地求生————大逃杀》的游戏，游戏中地图被毒气覆盖，安全区域不断缩小，最终100个人里面只有一个队伍or玩家能够获胜，安全区域会缩小5次，最后一次的安全圈被称为“决赛圈”，而玩家从毒气区域跑向安全区域的过程被称为“跑毒”</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>2022-04-10: 初稿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3月初开始上海每日就有着零星的病例，可能是香港输入，也可能是其他地方的传播，
那时住在上海的打工人没有人会想到不到一个月，上海的疫情会扩散到全民封城的地步。
平日两点一线往返于工作地与家，与我一样寄居在出租屋的打工仔们，
又有多少心理与实际的准备，来面对着突如其来的长时间封城呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="http://silentming.net/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>2020 ACG 追番总结</title>
    <link href="http://silentming.net/blog/2021/04/05/2020-acg-summary/"/>
    <id>http://silentming.net/blog/2021/04/05/2020-acg-summary/</id>
    <published>2021-04-05T09:40:29.000Z</published>
    <updated>2022-10-30T13:46:15.077Z</updated>
    
    <content type="html"><![CDATA[<p>本来还尝试改用豆瓣来记录自己的看番历程，不过发生了差评事件加之一些非表世界番豆瓣没有记录，最终作罢。</p><p>毕竟自己来控制格式的话自由的多~ 之前的动画图片都是从百度百科上取的，但是人家动不动就更新链接，还有一些是CDN缓存的所以经常过一段时间就变白框。现在都用了更高级的技术，根本取不到jpg的链接，我自己也有点懒，所以这次换成维基的链接了，要是也不能用了那以后估计就没有图了吧。瘫= =</p><p>来回顾一下过去2020年又有哪些动画给我们留下了深刻的回忆吧！</p><a id="more"></a><h2 id="Jan"><a href="#Jan" class="headerlink" title="Jan."></a>Jan.</h2><h3 id="5-0-异种族风俗娘评鉴指南-異種族レビュアーズ-Passione"><a href="#5-0-异种族风俗娘评鉴指南-異種族レビュアーズ-Passione" class="headerlink" title="5.0 异种族风俗娘评鉴指南/異種族レビュアーズ-Passione"></a>5.0 异种族风俗娘评鉴指南/異種族レビュアーズ-Passione</h3><img src="https://upload.wikimedia.org/wikipedia/zh/4/49/Interspecies_Reviewers%2C_volume_1.jpg"><p>看标题就知道这部作品多么不得了！然而这部作品竟然是正儿八经的全年龄你敢信！</p><p>这部作品可以说是快速了解各类异世界风格xp的指南了，原作者一定深谙异世界设定，主要讲述主角团(精灵、人类、中性天使、小尺寸种族)和偶尔一些其他参评者(兽人、恶魔、蛇人、妖精、吸血鬼)和各种异世界种族的风俗娘XXOO后的评价…</p><p>这部番让我惊叹于作者的脑洞，同时也很好的学习了异世界各类种族的设定。说实话许多异世界设定的动画甚至都不一定有本作对各种异世界种族的设定了解的深…满分没啥好说的。</p><h3 id="4-9-ID-Invalid-异度侵入-NAZ"><a href="#4-9-ID-Invalid-异度侵入-NAZ" class="headerlink" title="4.9 ID: Invalid/异度侵入-NAZ"></a>4.9 ID: Invalid/异度侵入-NAZ</h3><img src="https://upload.wikimedia.org/wikipedia/zh/3/31/ID_INVADED_anime.jpg"><p>除了最后一部分，前面基本上是神作！满分100能给120都不怕骄傲的那种！也是在这部番当中我完全迷上了男主声优津叔，对高智商罪犯的塑造、男主的推理都是满分，本作尤其出色在其节奏安排上，一环扣一环每一集都能在给出大量信息的同时为下一集埋下伏笔，全程无尿点。更关键的是，几乎每一集都有反转，要理解这对于一部连续剧类的动画是极为难得的。</p><p>这部作品需要静下心来认真观看，无论你是否喜爱推理，本番都极为推荐！</p><h3 id="4-8-虚构推理-虚構推理-Brain’s-Base"><a href="#4-8-虚构推理-虚構推理-Brain’s-Base" class="headerlink" title="4.8 虚构推理/虚構推理-Brain’s Base"></a>4.8 虚构推理/虚構推理-Brain’s Base</h3><img src="https://upload.wikimedia.org/wikipedia/zh/6/6c/Kyoko_Suiri_Key_Visual.png"><p>一种比较另类的推理小说，作品的设定是男主与女主能够看到灵异事务，在一个个由妖怪们或超自然现象导致的事件中男女主要“虚构”出合情合理的推理，让普通人认为它是一个合情合理的事件。</p><p>从另一个角度，将超自然与灵异部分排除，本作就是传统的社会推理小说，给定现场与线索，让观众跟随女主的推理过程去还原整个事件。而作者在一上来就告诉观众这件事实际上是妖怪引起的，这与传统作品中面对事件时云里雾里相比，这一强加给观众的设定会让观众更难按照以往的思维方式去“正常”推理整个事件，从而在跟随女主“虚构”出整个合情合理的事件后更大可能啧啧称奇，也是作者的一个巧妙地叙事手法。</p><p>同时由于本作加入了灵异等超自然现象，在许多事件中除却推理部分，故事本身的浪漫主义温情也很好的与冷冰冰的推理进行了互补，加上女主可爱、聪慧、<del>老司机</del>的性格，使得本作的质量非常高。</p><p>硬要说有什么不足，那就是部分篇章节奏可能有点慢，但是动画将节奏处理的还是非常好的，非常推荐！</p><h3 id="4-6-别对影像研出手！-映像研には手を出すな！-Science-SARU"><a href="#4-6-别对影像研出手！-映像研には手を出すな！-Science-SARU" class="headerlink" title="4.6 别对影像研出手！/映像研には手を出すな！-Science SARU"></a>4.6 别对影像研出手！/映像研には手を出すな！-Science SARU</h3><img src="https://upload.wikimedia.org/wikipedia/zh/6/6a/Keep_Your_Hands_Off_Eizouken%21_volume_1_cover.png"><p>动画讲述的三个高中生以映像研的名义做动画的故事，本作最大的亮点在于将创作者的思路构画了出来，当主角手舞足蹈得描述场景设定时，动画会将那想象的世界直接构建出来。像我们小时候模拟机枪、导弹的声音一般，动画中对想象出来的音效进行模拟的也是角色本身。</p><p>这部作品能摒除生活与工作中的繁缛琐事，将创作这一本身的乐趣原原本本呈现在我们眼前，是不可多得的佳作！</p><h3 id="4-3-ペット-思维覆写-pet-GENO-STUDIO"><a href="#4-3-ペット-思维覆写-pet-GENO-STUDIO" class="headerlink" title="4.3 ペット/思维覆写/pet-GENO STUDIO"></a>4.3 ペット/思维覆写/pet-GENO STUDIO</h3><img src="https://upload.wikimedia.org/wikipedia/en/1/12/Pet_%28manga%29_1.png"><p>该季度与ID:Invalid相杀的悬疑类作品，虽然没有异度侵入每话有高能那么神，本身作品的讲述的剧情与故事还是很棒的。主角是一群能够通过潜入对方潜意识操作对方记忆的人们，他们被称为pet，因为这些有能力的人是黑社会权位者的宠物也是武器，每一位主角都有着各自的故事，而他们之间的爱恨纠葛也是本作的主要叙事与看点。</p><h3 id="4-3-痛いのは嫌なので防御力に極振りしたいと思います。-因为太怕痛就全点防御力了。-SILVER-LINK"><a href="#4-3-痛いのは嫌なので防御力に極振りしたいと思います。-因为太怕痛就全点防御力了。-SILVER-LINK" class="headerlink" title="4.3 痛いのは嫌なので防御力に極振りしたいと思います。/因为太怕痛就全点防御力了。-SILVER LINK."></a>4.3 痛いのは嫌なので防御力に極振りしたいと思います。/因为太怕痛就全点防御力了。-SILVER LINK.</h3><img src="https://upload.wikimedia.org/wikipedia/zh/5/54/Itai_no_wa_Iya_nano_de_B%C5%8Dgyoryoku_ni_Kyokufuri_Shitai_to_Omoimasu_volume_1_cover.jpg"><p>当季度的凤傲天动画，虽然剧情比较老套，但是女主卖萌卖的并不做作，加之动画制作也不是很缺资金，因此还是推荐看一下的，毕竟在各类龙/凤傲天动画的历史中，“盾傲天”绝对是可以留名的一部作品。</p><h3 id="4-2-理科生坠入情网，故尝试证明-理系が恋に落ちたので証明してみた。-Science-Fell-in-Love-So-I-Tried-to-Prove-It-ZERO-G"><a href="#4-2-理科生坠入情网，故尝试证明-理系が恋に落ちたので証明してみた。-Science-Fell-in-Love-So-I-Tried-to-Prove-It-ZERO-G" class="headerlink" title="4.2 理科生坠入情网，故尝试证明/理系が恋に落ちたので証明してみた。/Science Fell in Love, So I Tried to Prove It-ZERO-G"></a>4.2 理科生坠入情网，故尝试证明/理系が恋に落ちたので証明してみた。/Science Fell in Love, So I Tried to Prove It-ZERO-G</h3><img src="https://tvax3.sinaimg.cn/large/008kBpBlgy1h0j6bd2yn2j307409w74q.jpg"><p>一部校园爱情的发糖番，男女主由于都是理科生，所以用各种奇怪的方式来进行实验验证与分析恋爱这一感情，由此发生了诸多搞笑的校园日常生活。不过本质上就是个发糖番，喜欢的不妨一看。</p><h3 id="4-1-达尔文游戏-ダーウィンズゲーム-Darwin’s-Game-Nexus"><a href="#4-1-达尔文游戏-ダーウィンズゲーム-Darwin’s-Game-Nexus" class="headerlink" title="4.1 达尔文游戏/ダーウィンズゲーム/Darwin’s Game-Nexus"></a>4.1 达尔文游戏/ダーウィンズゲーム/Darwin’s Game-Nexus</h3><img src="https://upload.wikimedia.org/wikipedia/zh/4/4b/Darwin%27s_Game_Key_Visual.jpg?20191130151431"><p>达尔文游戏是我从漫画一路追来的动画，漫画画风和剧情都属上乘，动画的表现上略有瑕疵，不过总体观感还不错。</p><p>剧情描述的是能力者之间的战斗，作为主角的“要”凭借着聪明的头脑巧胜“不败女王”从而收入后宫~随着剧情深入逐渐揭开给予玩家超能力的游戏软件：达尔文游戏。</p><p>战斗方面刻画的不错，美中不足的是男主的能力又是比较BT的外挂般复制能力，有一种既视感的遗憾。但是在生存游戏类的作品中，属于排上的名次的了，可以一看。</p><h3 id="4-0-地縛少年花子くん-地缚少年花子君-Toilet-Bound-Hanako-kun-Lerche"><a href="#4-0-地縛少年花子くん-地缚少年花子君-Toilet-Bound-Hanako-kun-Lerche" class="headerlink" title="4.0 地縛少年花子くん/地缚少年花子君/Toilet-Bound Hanako-kun-Lerche"></a>4.0 地縛少年花子くん/地缚少年花子君/Toilet-Bound Hanako-kun-Lerche</h3><img src="https://upload.wikimedia.org/wikipedia/zh/1/1f/Toilet-Bound_Hanako-kun_Key_Visual.png"><p>糖，都是糖。 作为幽灵的男主和高一女主的甜蜜爱情校园故事= =，要是被前面的推理番刀的难受了，可以看这部作品治愈一下~</p><h3 id="3-5-0-5-ランウェイで笑って-请在伸展台上微笑-请在T台上微笑-Ezo’la"><a href="#3-5-0-5-ランウェイで笑って-请在伸展台上微笑-请在T台上微笑-Ezo’la" class="headerlink" title="3.5 + 0.5 ランウェイで笑って/请在伸展台上微笑/请在T台上微笑-Ezo’la"></a>3.5 + 0.5 ランウェイで笑って/请在伸展台上微笑/请在T台上微笑-Ezo’la</h3><img src="https://upload.wikimedia.org/wikipedia/zh/b/be/Smite_at_the_Runway_Cover.jpg"><p>本作讲述的是作为设计师的男主都村育人与小个子(158cm)模特藤户千雪互相支持并成长的励志番。虽然男主是出身并不富裕的普通男性，女主又有着小个子这一对模特来说致命的缺陷，但是本作的男主有着极高的设计师天赋，女主又是一个比较有名的模特公司总裁的女儿使得作品还是超脱了普罗大众的范畴，这一点会让观众难以带入是个扣分项。</p><p>作品有意思的地方在于对时尚界有许多的描写，从这部作品里我选到了一个T台展的设计有着其叙事，展出的服装有着展示用与售卖用两类，对模特后台的描绘与设计师服装设计的细节展开非常专业，女主(&amp;女二)与男主的感情线也是其一大看点，因此本作本该获得不错的分数。</p><p>可是令人遗憾的是，时尚界类的题材可能不是那么符合大众尤其是青少年的口味吧，本作的原作漫画在中途女主还未能挑战当时的Top模特，即将遇到贵人要开始完成成长与蜕变时快速完结，而动画公司也显然不看好本作品，投入的资源非常有限使得作品的质量非常差，原作T台秀的美奂场景动画中的表现非常拉跨，也使得作品只能获得我3.5分的评价。那额外的0.5分时是追完漫画的我为原作者打抱不平而强加的！</p><h3 id="3-5-邪神ちゃんドロップキック-邪神与厨二病少女-Nomad"><a href="#3-5-邪神ちゃんドロップキック-邪神与厨二病少女-Nomad" class="headerlink" title="3.5 邪神ちゃんドロップキック/邪神与厨二病少女-Nomad"></a>3.5 邪神ちゃんドロップキック/邪神与厨二病少女-Nomad</h3><img src="https://upload.wikimedia.org/wikipedia/zh/6/6b/%E5%B0%8F%E9%82%AA%E7%A5%9E%E9%A3%9B%E8%B8%A2.jpg"><p>小邪神与中二少女的日常故事，每天就是看小邪神如何作死与被中二少女暴打的搞笑日常番，里面出场的奇怪角色也各有特点，不过与龙女仆相比，本作由于是纯搞笑，少了些温情。女主也不是萌系的，使得其竞争力稍逊。</p><h3 id="3-3-Magia-Record-魔法少女小圆外传-魔法纪录-魔法少女小圆外传-マギアレコード-魔法少女まどか☆マギカ外伝-SHAFT"><a href="#3-3-Magia-Record-魔法少女小圆外传-魔法纪录-魔法少女小圆外传-マギアレコード-魔法少女まどか☆マギカ外伝-SHAFT" class="headerlink" title="3.3 Magia Record 魔法少女小圆外传/魔法纪录 魔法少女小圆外传/マギアレコード 魔法少女まどか☆マギカ外伝-SHAFT"></a>3.3 Magia Record 魔法少女小圆外传/魔法纪录 魔法少女小圆外传/マギアレコード 魔法少女まどか☆マギカ外伝-SHAFT</h3><img src="https://upload.wikimedia.org/wikipedia/zh/7/7e/%E3%83%9E%E3%82%AE%E3%82%A2%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89_%E9%AD%94%E6%B3%95%E5%B0%91%E5%A5%B3%E3%81%BE%E3%81%A9%E3%81%8B%E3%83%9E%E3%82%AE%E3%82%AB%E5%A4%96%E4%BC%9D.png"><p>本作是手游改编，与初见小圆相比还是少了很多新鲜与惊异感的，而且编剧不再是虚渊玄执笔，叙事能看出来达不到原作的功力，但是又想往原作的B格上靠，造成本片的叙事节奏不清晰。本传晓美焰为了拯救圆神的举动令人动容，与之相比，外传的本作则更像是看初中女生们闹矛盾的程度。</p><h2 id="Apr"><a href="#Apr" class="headerlink" title="Apr."></a>Apr.</h2><h3 id="5-0-隐瞒之事-かくしごと-亚细亚堂"><a href="#5-0-隐瞒之事-かくしごと-亚细亚堂" class="headerlink" title="5.0 隐瞒之事/かくしごと-亚细亚堂"></a>5.0 隐瞒之事/かくしごと-亚细亚堂</h3><img src="https://upload.wikimedia.org/wikipedia/zh/e/e8/Kakushigoto_Key_Visual.jpeg"><p>本作比较特别，讲述的是一个女儿对父亲的回忆。</p><p>父亲一个人带着小学4年级的女儿，本职是一位漫画师，由于连载的漫画有点下流，为了不让还是小学生女二发现而在生活中对女儿的各种突袭进行隐瞒，而与此同时女儿控的父亲也时时刻刻爱护着自己的女儿，让女儿能够有一个快乐与开心的童年。</p><p>在轻松治愈的日常生活中体现了父亲对女儿的关爱，想要隐瞒自己工作的笨拙，其实随着女儿的长大，父亲又如何隐瞒的住呢？</p><p>当女儿最后在病床上面对父亲时，动画之前酝酿的情感顷刻爆发，催人泪下。</p><h3 id="4-6-富豪刑警-Balance-UNLIMITED-富豪刑事-Balance-UNLIMITED-CloverWorks"><a href="#4-6-富豪刑警-Balance-UNLIMITED-富豪刑事-Balance-UNLIMITED-CloverWorks" class="headerlink" title="4.6 富豪刑警 Balance:UNLIMITED/富豪刑事 Balance:UNLIMITED-CloverWorks"></a>4.6 富豪刑警 Balance:UNLIMITED/富豪刑事 Balance:UNLIMITED-CloverWorks</h3><img src="https://sc04.alicdn.com/kf/H15a0f81cfeb248d2a22cc28547e38de9Q.jpg"><p>本作有同名电视剧，但是因为政治正确和收视率的原因改成了男女主。动画更加还原小说，是两位男主的故事。看热血男一与富豪男二的办案故事，男二告诉你如何使用钞能力来处理事件，看的那叫一个过瘾哈哈哈。</p><h3 id="4-5-昨日之歌-イエスタデイをうたって-动画工房"><a href="#4-5-昨日之歌-イエスタデイをうたって-动画工房" class="headerlink" title="4.5 昨日之歌/イエスタデイをうたって-动画工房"></a>4.5 昨日之歌/イエスタデイをうたって-动画工房</h3><img src="https://sc04.alicdn.com/kf/Hf2fffffb1a074bf8b374df8482a73206Y.jpg"><p>真正的普通人纠结的爱情故事。本作非常好的展现了男主与女一和女二之间的九个的感情，将一个普通人的纠葛恋爱描绘的淋漓尽致。</p><p>男主大学毕业，便利店打工，单向喜欢同学女一;女一现在是高中老师，放不下曾经的感情(自己的青梅竹马 早逝)，而一直拒绝男主的感情;女二是咖啡店打工仔，性格率直因为曾经的精力对男主有好感;</p><p>作品及其贴近现实，连男主许多地方的优柔寡断都让观众是不是能看到自己的影子，作品描绘了三人各自对面对感情时而逃避、时而烦恼、时而迷茫的纠结，这样平淡的故事却更加贴近你我的生活。</p><h3 id="4-2-신의-탑-神之塔-Tower-of-God-Telecom-Animation-Film"><a href="#4-2-신의-탑-神之塔-Tower-of-God-Telecom-Animation-Film" class="headerlink" title="4.2 신의 탑/神之塔/Tower of God-Telecom Animation Film"></a>4.2 신의 탑/神之塔/Tower of God-Telecom Animation Film</h3><img src="https://sc04.alicdn.com/kf/Hea86871410264459bc573b2bb7bd030ey.jpg"><p>哎，没想到吧，这个竟然是一部韩漫改编！原作的神之塔韩漫是我唯一付费追更的韩漫，曾经和《大贵族》、《高校之神》等作品一起，是韩国的国民级民工漫。随着《大贵族》和《高校之神》的完结，《神之塔》也算是目前还在连载中的元老漫画了。</p><p>神之塔在前期比较像全职猎人，在爬塔过程中主角团要挑战完成一个个游戏/比赛，因此里面在打斗之外存在大量的智斗，这是本作的第一个看点。</p><p>本作的第二个看点是小可爱男主 第二十五夜、高智商高颜值忠犬型男二昆·阿奎罗·阿尼亚斯以及笨蛋热血男三鳄鱼队长雷克·萊科雷斯三人之间的钢铁友情</p><p>第三个看点则在女主蕾哈尔与男主之间的故事。</p><p>动画中规中矩，4.2分里面带有我很多的漫画感情分私货，带了私货也只能给出4.2分的评价是因为本作最好看的部分在漫画第二部，第一部讲述的是漫画开始的部分，很多篇幅都在帮助观众熟悉任务与规则和设定，(毕竟不像日漫那种异世界，开局2min直接就能熟悉各种设定，甚至都不用说明)。因此动画只能说中规中矩。同时本作也是标准的热血民工漫。喜欢看游戏类、大逃杀类的如《弥留之国的爱丽丝》、《噬慌者》、《诚如甚至所说》等类型的可以看看本作。</p><p>（琉璃姐姐和莲花姐姐踩我！）</p><h3 id="3-5-转生成为了只有乙女游戏破灭Flag的邪恶大小姐…-乙女ゲームの破滅フラグしかない悪役令嬢に転生してしまった…-转生恶役只好拔除破灭旗标-SILVER-LINK"><a href="#3-5-转生成为了只有乙女游戏破灭Flag的邪恶大小姐…-乙女ゲームの破滅フラグしかない悪役令嬢に転生してしまった…-转生恶役只好拔除破灭旗标-SILVER-LINK" class="headerlink" title="3.5 转生成为了只有乙女游戏破灭Flag的邪恶大小姐…/乙女ゲームの破滅フラグしかない悪役令嬢に転生してしまった…/转生恶役只好拔除破灭旗标-SILVER LINK."></a>3.5 转生成为了只有乙女游戏破灭Flag的邪恶大小姐…/乙女ゲームの破滅フラグしかない悪役令嬢に転生してしまった…/转生恶役只好拔除破灭旗标-SILVER LINK.</h3><img src="https://sc04.alicdn.com/kf/H25ca028a624f4716b27864f3715d4dafq.jpg"><p>女主穿越到了女性向Galgame中的女反派，然后利用自己通关游戏的经验避免自己的死亡Flag，一路改善与各路男主的关系，最后攻略了本该喜欢上游戏女主(女二)的各类男性，甚至连女二都一连攻略了！</p><p>欢乐轻松搞笑的校园故事，微逆后宫。</p><h3 id="3-2-格莱普尼尔-グレイプニル-GLEIPNIR-被束缚的芬尼尔-PINE-JAM"><a href="#3-2-格莱普尼尔-グレイプニル-GLEIPNIR-被束缚的芬尼尔-PINE-JAM" class="headerlink" title="3.2 格莱普尼尔/グレイプニル/GLEIPNIR/被束缚的芬尼尔-PINE JAM"></a>3.2 格莱普尼尔/グレイプニル/GLEIPNIR/被束缚的芬尼尔-PINE JAM</h3><img src="https://upload.wikimedia.org/wikipedia/zh/7/7a/Gleipnir_volume_1_cover.jpg"><p>超能力热血动画，本身讲述的是一个外星人找地球人帮他收集硬币的故事，拿到硬币的人类可以获得和自己相匹配的超能力，收集到100枚硬币则可以实现一个愿望，也因此展开了超能者之间的厮杀。</p><p>男主的能力是个带左轮的布偶，由于是布偶因此里面可以钻人，女主在自杀时被男主所救，从而跟着男主寻找自己的姐姐，无能力的女主则回每次身着泳衣(漫画开始可是裸的，动画是内衣)进入(物理意义上)男主体内(动画名镜头)和男主并肩作战！</p><p>动画本身的战斗还算不错，不过没什么智斗，漫画后面的剧情有点还在展开中，只能说前面的铺垫与目前的剧情比重分配的不太好，不过动画对这一部分有所弥补。至少前两集中的名镜头还是需要了解一下的。</p><h2 id="Jul"><a href="#Jul" class="headerlink" title="Jul."></a>Jul.</h2><h3 id="4-6-GREAT-PRETENDER-大欺诈师-WIT-STUDIO"><a href="#4-6-GREAT-PRETENDER-大欺诈师-WIT-STUDIO" class="headerlink" title="4.6 GREAT PRETENDER/大欺诈师-WIT STUDIO"></a>4.6 GREAT PRETENDER/大欺诈师-WIT STUDIO</h3><img src="https://upload.wikimedia.org/wikipedia/zh/e/e4/GreatPretenderKY.jpg"><p>男主被诓骗进了以罗兰为首的诈骗团伙，讲述的是诈骗团伙的诈骗故事。由于诈骗行为这一敏感性，因此为了让作品能存活(笑)主角团诈骗的都是恶人，劫畗不过也没有济贫就是了hh</p><p>作品叙事节奏几乎完美，诈骗手法虽然有点老套但是描绘的细致到位不出戏，而且本作对诈骗的描写只是支线，主线讲述的反而是主角团们各自的故事。</p><p>连线洛杉矶篇章讲述男主枝村真人的故事，男主如何被忽悠进团；新加坡之空篇章讲述主角团妹子阿比的故事，阿比如何与自己和解；伦敦之雪篇章讲述主角团色诱担当辛西娅的故事，辛西娅如何放下曾经的感情；远东魔法师篇章则是罗兰与男主的故事，为整部作品画下了不错的句号。</p><p>作品有瑕疵的地方在于男主最后强行挣脱他人指定的框框，最后有意让男主用自己的智慧来完结事件，但是有些画蛇添足的味道，尤其是其使用的手段明显不合常理反而给作品打了个大大的折扣。</p><p>但是瑕不掩瑜，作品仍然十分十分 (我打了9分来着 hh) 值得一看。</p><h3 id="4-2-没落要塞-DECA-DENCE-デカダンス-NUT"><a href="#4-2-没落要塞-DECA-DENCE-デカダンス-NUT" class="headerlink" title="4.2 没落要塞/DECA-DENCE/デカダンス-NUT"></a>4.2 没落要塞/DECA-DENCE/デカダンス-NUT</h3><img src="https://upload.wikimedia.org/wikipedia/zh/a/ac/Deca-Dence_Poster.jpg"><p>作品讲述的是末日中男主与女主为代表的人类对抗未知生命体的末日生存故事！不过这个只是设定，由于第二话惊人的反转，所以我这里不能完全剧透太多，感兴趣的小伙伴不妨快去看看！</p><p>这部作品的看点一是人类为生存而做出的反抗，另一个看点则是男主为了正义所做成的决断。设定新颖，这也是这部原创番令人惊喜的一点。作品中名场面：超级聚能正义之拳！拳头才是男人的浪漫！</p><h3 id="3-7-モンスター娘のお医者さん-魔物娘的医生-Monster-Girl-Doctor-ARVO-ANIMATION"><a href="#3-7-モンスター娘のお医者さん-魔物娘的医生-Monster-Girl-Doctor-ARVO-ANIMATION" class="headerlink" title="3.7 モンスター娘のお医者さん/魔物娘的医生/Monster Girl Doctor-ARVO ANIMATION"></a>3.7 モンスター娘のお医者さん/魔物娘的医生/Monster Girl Doctor-ARVO ANIMATION</h3><img src="https://sc04.alicdn.com/kf/H6f21fc0c7cd7425ca8db3e77131ddd56V.jpg"><p>男主是异世界专门给魔物们看病的医生，是著名医生章鱼熟女老师的得意门生，作品是正常的异世界微后宫番，不同的是男主是给各类魔物看病的医生，也因此有许多意想不到的细心设定，</p><p>在异世界系列里面是值得一看的作品。</p><h3 id="3-6-宇崎学妹想要玩！-宇崎ちゃんは遊びたい！-ENGI"><a href="#3-6-宇崎学妹想要玩！-宇崎ちゃんは遊びたい！-ENGI" class="headerlink" title="3.6 宇崎学妹想要玩！/宇崎ちゃんは遊びたい！-ENGI"></a>3.6 宇崎学妹想要玩！/宇崎ちゃんは遊びたい！-ENGI</h3><img src="https://upload.wikimedia.org/wikipedia/zh/e/e8/Uzaki-chan_Wants_to_Hang_Out%21_volume_1_cover.jpg"><p>女主是身形娇小的学姐，和男主在一个咖啡店打工，我就像那个咖啡店老板一样天天磕糖。</p><p>甜甜的轻松搞笑日常校园恋爱番，不过欢乐的多，因此给分高一些。</p><h3 id="3-2-租借女友-彼女、お借りします-TMS-Entertainment"><a href="#3-2-租借女友-彼女、お借りします-TMS-Entertainment" class="headerlink" title="3.2 租借女友/彼女、お借りします-TMS Entertainment"></a>3.2 租借女友/彼女、お借りします-TMS Entertainment</h3><img src="https://upload.wikimedia.org/wikipedia/zh/1/12/Rent-A-Girlfriend_volume_1_cover.jpg"><p>其实有点标题党啦，就是正常的校园恋爱番，还有点后宫向的。男主只不过是开始叫了个租女友服务，回头客的时候各种强行不给人家面子导致妹子展现真性格。医院偶遇因为种种原因谎称情侣，后面假戏真做的校园爱情故事。</p><p>动画比漫画好的一点是对节奏的修改更加合理，因此动画的观看比漫画要好不少。</p><h3 id="3-0-魔王学院的不适任者～史上最强的魔王始祖，转生就读子孙们的学校～-魔王学院の不適合者～史上最強の魔王の始祖、転生して子孫たちの学校へ通う～-SILVER-LINK"><a href="#3-0-魔王学院的不适任者～史上最强的魔王始祖，转生就读子孙们的学校～-魔王学院の不適合者～史上最強の魔王の始祖、転生して子孫たちの学校へ通う～-SILVER-LINK" class="headerlink" title="3.0 魔王学院的不适任者～史上最强的魔王始祖，转生就读子孙们的学校～/魔王学院の不適合者～史上最強の魔王の始祖、転生して子孫たちの学校へ通う～-SILVER LINK."></a>3.0 魔王学院的不适任者～史上最强的魔王始祖，转生就读子孙们的学校～/魔王学院の不適合者～史上最強の魔王の始祖、転生して子孫たちの学校へ通う～-SILVER LINK.</h3><img src="https://upload.wikimedia.org/wikipedia/zh/7/76/The_Misfit_of_Demon_King_Academy_light_novel_volume_1_cover.jpg"><p>龙傲天他来了，他转生、他异世界、他带着后宫他来了。龙傲天嘛，就是看个爽，这部番满足及格线吧。</p><h2 id="Oct"><a href="#Oct" class="headerlink" title="Oct."></a>Oct.</h2><h3 id="4-3-魔女之旅-魔女の旅々-C2C"><a href="#4-3-魔女之旅-魔女の旅々-C2C" class="headerlink" title="4.3 魔女之旅/魔女の旅々-C2C"></a>4.3 魔女之旅/魔女の旅々-C2C</h3><img src="https://upload.wikimedia.org/wikipedia/zh/e/ea/The_Journey_of_Elaina_01.jpg" title="台版小說第一冊封面"><p>讲述的一位天才魔女旅行，路途发生的各类故事。本番的女主并不圣母，因为在旅途中遇到了好心办坏事的情况，所以在某些场景下会有着作为旁观者的不近人情一面，而这却恰恰是我觉得最为真实的部分，也是我对本作评价较高的原因。</p><p>同时作品讲述的故事蕴含的道理令人深思，在旅途中有开心快乐也同样有苦涩难过，并非凤傲天，喜欢看冒险故事或物语系列的推荐一看~</p><h3 id="4-1-攀岩少女-いわかける！-Sport-Climbing-Girls–BLADE"><a href="#4-1-攀岩少女-いわかける！-Sport-Climbing-Girls–BLADE" class="headerlink" title="4.1 攀岩少女/いわかける！ -Sport Climbing Girls–BLADE"></a>4.1 攀岩少女/いわかける！ -Sport Climbing Girls–BLADE</h3><img src="https://upload.wikimedia.org/wikipedia/zh/1/1a/%E3%81%84%E3%82%8F%E3%81%8B%E3%81%91%E3%82%8B%EF%BC%81_-Climbing_Girls-.jpg" title="《攀岩！ -Climbing Girls-》第1卷封面"><p>虽然是冷门的运动，但是加上美少女就有看头了~ 本部动画对竞技攀岩和野外攀岩均有简单的介绍，同时也是标准的美少女运动励志动画~  对女主们的动作刻画也挺不错,对象要看女高中生类或运动类或对单纯想要攀岩的可以一看~</p><h3 id="4-0-大贵族-노블레스-NOBLESSE-ノブレス–Production-I-G"><a href="#4-0-大贵族-노블레스-NOBLESSE-ノブレス–Production-I-G" class="headerlink" title="4.0 大贵族/노블레스/NOBLESSE -ノブレス–Production I.G"></a>4.0 大贵族/노블레스/NOBLESSE -ノブレス–Production I.G</h3><img src="https://upload.wikimedia.org/wikipedia/zh/0/07/Noblesse_%28manhwa%29_Cover.jpg"><p>本年度几个著名的韩漫都得到了动画化，大贵族作为著名的民工韩漫，也在今年得到了动画化。讲述的剧情是标准的吸血鬼贵族的剧情，一方面看一个温柔的大帅B稍微有点脱线的快乐校园生活，另一半就是男主作为吸血鬼之王处理族内事物的龙傲天剧情~</p><p>剧中角色都是帅哥，微乙女向，整体制作还算可以。</p><h3 id="4-0-在魔王城说晚安-魔王城でおやすみ-动画工房"><a href="#4-0-在魔王城说晚安-魔王城でおやすみ-动画工房" class="headerlink" title="4.0 在魔王城说晚安/魔王城でおやすみ-动画工房"></a>4.0 在魔王城说晚安/魔王城でおやすみ-动画工房</h3><img src="https://upload.wikimedia.org/wikipedia/zh/0/0a/%E5%9C%A8%E9%AD%94%E7%8E%8B%E5%9F%8E%E8%AA%AA%E6%99%9A%E5%AE%89.jpg" title="中文版第1卷封面"><p>女主被拐到了魔王城，不过众所周知，魔王城力都是男妈妈！一部治愈轻松快乐的日常番，看女主如何被当女儿养的欢乐故事，还是很温馨的~</p><h3 id="3-9-无能力者娜娜-无能的奈奈-無能なナナ-Bridge"><a href="#3-9-无能力者娜娜-无能的奈奈-無能なナナ-Bridge" class="headerlink" title="3.9 无能力者娜娜/无能的奈奈/無能なナナ-Bridge"></a>3.9 无能力者娜娜/无能的奈奈/無能なナナ-Bridge</h3><img src="https://upload.wikimedia.org/wikipedia/zh/7/7a/%E7%84%A1%E8%83%BD%E5%8A%9B%E8%80%85%E5%A8%9C%E5%A8%9C.jpg" title="中文版第一卷封面"><p>虽然背景是超能力者云集的小岛，无能力者女主(娜娜)在高智商男主(能力者)的眼皮底下执行暗杀任务的故事，不过实际上更像是推理番，主要看女主如果向男主隐瞒自己的动作，以及看男主分析各类事件。</p><p>设定还是不错的，尤其是在超能力都已经用上的情况下还在设定里保持了合乎逻辑的推理这一点难能可贵。</p><h3 id="3-4-总之就是非常可爱-トニカクカワイイ-Seven-Arcs"><a href="#3-4-总之就是非常可爱-トニカクカワイイ-Seven-Arcs" class="headerlink" title="3.4 总之就是非常可爱/トニカクカワイイ-Seven Arcs"></a>3.4 总之就是非常可爱/トニカクカワイイ-Seven Arcs</h3><img src="https://upload.wikimedia.org/wikipedia/zh/2/27/Tonikaku_Kawaii_volume_1_cover.jpg" title="漫画第1卷封面"><p>开局就告诉你，这是狗粮番，标题就告诉你，这是狗粮番，那还能咋办？汪汪汪。男主觉得女主实在是太可爱了，即使遭遇车祸也依旧向女主表达爱意，之后失去意识和部分记忆。</p><p>在18岁的这年，女主上门兑现承诺，开局叫老公，发糖一整季！</p><h2 id="续作类"><a href="#续作类" class="headerlink" title="续作类"></a>续作类</h2><ul><li><p>5.0 攻壳机动队：SAC_2045/攻殻機動隊 SAC_2045-Production I.G/SOLA DIGITAL ARTS</p><p>  攻壳机动队经典老番了，本作是3D版，素子姐姐好看多了！剧情依旧顶，强烈推荐。情怀加分给满分。</p></li><li><p>4.6 辉夜大小姐想让我告白～天才们的恋爱头脑战～ 2/かぐや様は告らせたい～天才たちの恋愛頭脳戦～ 2-A-1 Pictures</p><p>  高水准的续作，不容错过的轻松搞笑校园恋爱番，男女主互相想让对方告白的故事，值得一看。</p></li><li><p>4.6 やはり俺の青春ラブコメはまちがっている。完/我的青春恋爱物语果然有问题。完-feel.</p><p>  大老师！完结篇多多少少还是给点高分吧。</p></li><li><p>4.5 RWBY 7</p><p>  RWBY一如既往的质量与水准，欧美少数的日系动画，主角们有着欧美的价值观与性格，没看的快去看！</p></li><li><p>4.5 PSYCHO-PASS 心理测量者 3 FIRST INSPECTOR/PSYCHO-PASS サイコパス 3 FIRST INSPECTOR-Production I.G</p><p>  另一半的心理测量者，好看继续追~ 依旧是男主能力有点过分，好好的悬疑变超能力了啊喂！但是说实话，收尾其实收的比我想象的要好…</p></li><li><p>4.3 某科学的超电磁炮T/とある科学の超電磁砲T-J.C.STAFF</p><p>  一如既往的高水准，喜欢炮姐的当然不会错过~ （本人是操祈女王派的，这一作女王出场不少，不过女王跟男主注定是悲剧让人意难平啊)</p></li><li><p>4.2 Ｒｅ：ゼロから始める異世界生活/Re:从零开始的异世界生活/Re:Life in a different world from zero-White Fox</p><p>  新编辑版&amp;第二季，喜欢的姥爷们可以重温一下~ 这部作品的质量还是不错的，  只不过我个人比喜欢艾米莉亚这种人设，同样也不喜欢男主这类纯靠毅力与耐心突破阻碍的类型，  相性太差hh</p></li><li><p>4.2 在地下城寻求邂逅是否搞错了什么/ダンジョンに出会いを求めるのは間違っているだろうか #3-J.C.STAFF</p><p>  延续前作的轻松风格，制作在线！</p></li><li><p>3.5 LoveLive!虹咲学园学园偶像同好会/ラブライブ！虹ヶ咲学園スクールアイドル同好会-SUNRISE</p><p>  还是和以前一样的偶像番，类似的9个人，喜欢听歌的可以看~</p></li></ul><ul><li><p>3.5 食戟のソーマ 豪ノ皿/食戟之灵：豪之皿-J.C.STAFF</p><p>  食戟之灵按部就班按漫画走的，但是漫画后面出了黑暗料理界之后就越来越离谱了= =</p></li><li><p>3.0爱书的下克上：为了成为图书管理员不择手段！ 2/本好きの下剋上~司书になるためには手段を选んでいられません~ 2-亚细亚堂</p><p>  标准开挂女主的续作的正常延续, 喜欢看成长类凤傲天的来看这部。</p></li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><p>2.8 我立于百万生命之上/100万の命の上に俺は立っている/I’M STANDING ON A MILLION LIVES-MAHO FILM</p><p>  和同学一起转生异世界，但是完成任务后还会回到现实世界的设定，任务中只要不团灭就能复活，  所以男主在一次次任务中虽然存在对队友/同学的牺牲，不过靠着自己的存活最后也拯救了同学。  不过个人不喜欢这部番的剧情，因为女主们的设定不太行，智商下限，圣母婊…… 所以仁者见仁吧。</p></li><li><p>2.7 被众神捡到的男孩/神達に拾われた男-MAHO FILM</p><p>  依旧是龙傲天，男主转生收到各种神的祝福，养了一堆史莱姆。  由于设定上史莱姆吃各种东西可以变成不同属性从而能够干各种活，  但是整体有些无趣，龙傲天看起来却并不爽。</p></li><li><p>2.6 갓 오브 하이스쿨/The God of High School/高校之神-MAPPA</p><p>  韩国民工漫热血打斗番，不过这部番没什么大叙事，这也是韩漫的大部分问题，  作者驾驭不了大主线和大叙事，每次都只能安排一个小场地来给男主开挂，个人不是很喜欢。</p></li></ul><ul><li><p>2.5 你与我最后的战场，亦或是世界起始的圣战/キミと僕の最後の戦場、あるいは世界が始/Our Last Crusade or the Rise of a New World-SILVER LINK.</p><p>  狗粮番，不过有点强行；军国最强战力龙傲天男主和魔法国最强法师凤傲天女主的撒糖故事，  制作还可以，但剧情有些过于模板化了。</p></li><li><p>2.5 PLUNDERER/プランダラ/星掠者-GEEKTOYS</p><p>  经典的热血动画，我是从漫画开始追的，然而热血动漫的动画制作公司资金经常都不是那么充沛..  最终导致本作的动画属实有点垃, 剧情甚至已经到了侮辱智商的程度了，但是漫画还是推荐一看的！</p></li><li><p>2.5 八男？別鬧了！/八男って、それはないでしょう！/八男？别闹了！-SHIN-EI动画/SynergySP</p><p>  排行第8的男主，已经继承不了家里什么了，但是人家是龙傲天啊！</p></li><li><p>2.2 彼得·格里尔的贤者时间/ピーター・グリルと賢者の時間-WolfsBane</p><p>  各种白给，强行设定要男主染色体的那种白给，基本上算18X了。</p></li><li><p>2.2 弩级战队H×EROS/ド級編隊エグゼロス-project No.9</p><p>  打擦边球的动画，女主们的H力能转换成男主的战斗能力对付虫虫外星人…奇葩设定的卖肉番。</p></li><li><p>2.0 進撃の巨人/进击的巨人 最终季-WIT STUDI</p><p>  这番也终于完结了，后面实际上是漫画剧情拉跨了，  尤其是作者反战败而不反战的价值观让男主最后毁灭大部分人类的做法让我呸。</p></li><li><p>2.0 猎魔武士/GIBIATE-ランチ·BOX</p><p>  武士穿越到现代，然而实在是不太行，看了两集愣是没看下去。</p></li><li><p>1.0 公主连结！Re:Dive/プリンセスコネクト！Re:Dive/超异域公主连结☆Re:Dive-CygamesPictures</p><p>  只能说动画完美还原了游戏白开水的剧情，真的是一丁点的脑子都不能带…  纯看妹子们跟着哑巴男主的白开水日常, 我是接受不能的。</p></li><li><p>0 咒术回战/呪術廻戦/Jujutsu Kaisen-MAPPA</p><p>  本来不错的漫画，可惜了，作者反华，私货太多，原谅霸凌，唉。</p></li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>本年度值得一看的动画还是挺多的，尤其是自己长追的一些韩漫在获得美国的投资下，在日厂进行了动画化令我惊喜，就是最终的产出有些意难平，但对比中日合作的那些动画，只能说质量还说的过去。</p><p>工作虽然越来越忙，但是动漫可不能落下，明年继续~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来还尝试改用豆瓣来记录自己的看番历程，不过发生了差评事件加之一些非表世界番豆瓣没有记录，最终作罢。&lt;/p&gt;
&lt;p&gt;毕竟自己来控制格式的话自由的多~ 之前的动画图片都是从百度百科上取的，但是人家动不动就更新链接，
还有一些是CDN缓存的所以经常过一段时间就变白框。
现在都用了更高级的技术，根本取不到jpg的链接，我自己也有点懒，
所以这次换成维基的链接了，要是也不能用了那以后估计就没有图了吧。
瘫= =&lt;/p&gt;
&lt;p&gt;来回顾一下过去2020年又有哪些动画给我们留下了深刻的回忆吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="http://silentming.net/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>2020 Summary</title>
    <link href="http://silentming.net/blog/2020/12/20/2020-summary/"/>
    <id>http://silentming.net/blog/2020/12/20/2020-summary/</id>
    <published>2020-12-20T14:27:01.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>2020 是历史魔幻的一年，乘着历史的过山车，演好自己的剧本，端好手中的饭碗，抚平心中的涟漪，笑对生活~</p><a id="more"></a><h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><ul><li>Jan. Bad Begin</li></ul><p>个人的生活迎来了波折，人生好聚好散。外面的一切也渐渐都都紧张了起来，武汉的消息传到了上海，我也拿出自己为数不多的普通口罩，在网上购买的口罩也为时已晚，武汉封城的消息传出后他省的货物便难以进入上海了。</p><p>每天除了一遍遍给父母强调戴口罩，就是谨小慎微地注意出行，经过武汉的同事也都取消了回家的班列，我也准备离开上海，回河南老家过年。这次疫情河南的应对获得了全网的夸赞，作为人口大省，非常理解省长的应对措施，也为自己家乡的优秀表现点一个大大的赞。</p><ul><li>Feb. Tough Life</li></ul><p>各省均处于一级响应状态，形势严峻，好在作为ICT行业的从业人员似乎并没有被疫情打乱太多，除了担心自己返回进不了小区以外似乎并没有特别担心的事情。经过7天+延长3天的假期后便立刻返回了上海开始居家隔离，这也是第一次Work From Home。 每天睡醒线上会议，中午下午外卖解决，缩在家里尽可能地减少口罩的使用，算是体验了一把特殊时期的工作模式吧，在家里除了上班每天也都会关注新闻、思考生活，难以想象假如发生了大型灾害或战乱时，当稳定的生活被打破时我是不是还能够镇定的应对这些，至少现在的我还无法自信的认为自己能够在乱世中生存，能够在不稳定中伴着高风险去实现自己的目标，也再次意识到自己不过是个普通人罢了。</p><p>缩在家里一个月又会有什么新奇的事呢，苦笑。</p><ul><li>Mar. Keep living</li></ul><p>本来2月到期的房子，由于疫情就又续了一个季度，每天通勤使用公司发的普通口罩，安慰自己带总比不带强…</p><p>每天的三餐都是盒饭，在这特殊的事情谁也不会再抱怨什么，毕竟还有那么几种盒饭可以选不是么(笑)..</p><p>两点一线的生活就着么持续着，不过看着确诊的数字在一点点下降，大家都充满了信心觉得快乐的生活就快到来，不再是起初的恐慌与中间的茫然，和朋友已经可以聊起去哪里玩，关注的重点也渐渐变成了国外，开始担心国外的同学与家人……</p><img src="https://live.staticflickr.com/65535/50736651472_25c94c8a4a_o_d.jpg"><p>每天会有几个同事去餐厅给大家领盒饭，每个人都带着口罩，食堂也拉起了宣传标语</p><ul><li>Apr. To Be Good</li></ul><p>已经可以去其他的小区了！看起来疫情就快过去了呢！</p><p>虽然在公司依旧吃着盒饭，不过口罩也能够在药店不限量买到了，产能也陆陆续续恢复了，我们的公司也在依旧平稳进行着~</p><p>今年的娱乐活动也就只剩下看看动漫玩玩游戏了，4月开始入坑了公主连结的B服公测，依旧两点一线的生活，不过大家已经在等待娱乐设施开门了~</p><ul><li>May. Rush Work</li></ul><p>5月又到了攻关期，加上今年的特殊情形，因为不推荐出上海，所以在家休息了几天后就到公司值班干活了…因为几乎每个周末都在加班，也没来得及找房子，又续了一个季度…</p><img src="https://live.staticflickr.com/65535/50736569916_db50c606d5_c_d.jpg"><p>加班也逃避不了长膘…</p><ul><li>Jun. Eat! and Debug!</li></ul><p>6月依旧处于攻关期，上班解决问题，周末还要加班，不过外面的餐厅已经可以聚餐了，生活的快乐回来了！大家都可以一起吃火锅了呢！</p><img src="https://live.staticflickr.com/65535/50736699262_e91b2a634d_c_d.jpg"><p>吃火锅，咔咔</p><img src="https://live.staticflickr.com/65535/50735854448_12353bed87_c_d.jpg"><p>饭店的提示语也是非常的有意思~</p><ul><li>Jul. Business to ShenZhen</li></ul><p>7月份整体还是很快乐的，获得了公司比较大的一个荣誉，灰常的开心！还要去分享、领奖、发表感言、拍视频balabala…</p><p>之后又遇到了一个疑难问题需要攻关，和上海的H大 &amp; L桑，杭州的大佬们一起出差深圳进行攻关。攻关虽然每天都挺枯燥啦，天天起来干到晚上11点，但是见到了表姐一家，又和ACG深圳众搓了一顿加深了基友情，可以说让工作充实了生活~</p><p><img src="https://live.staticflickr.com/65535/50735901353_3bd9ca54c4_c_d.jpg" title="深圳众的烤鱼Party" style="display: inline-block; height:300px;"><img src="https://live.staticflickr.com/65535/50736635521_4057393d2d_w_d.jpg" title="宾馆" style="display: inline-block; height:300px;"><img src="https://live.staticflickr.com/65535/50736636041_16f32a7ecf_w_d.jpg" title="飞机餐" style="display: inline-block; height:300px;"></p><p>和深圳众一起吃的烤鱼、公司经营的员工宿舍、以及由于疫情原因改变的飞机餐</p><img src="https://live.staticflickr.com/65535/50735938318_ee855871d9_c_d.jpg"><p>获得的奖品~</p><img src="https://live.staticflickr.com/65535/50736635966_088ab75906_k_d.jpg"><p>美丽的深圳</p><ul><li>Aug. ChinaJoy &amp; ACG Shanghai! </li></ul><p>8月因为ChinaJoy的原因，公司的ACG杭州和上海众在上海J桑家集合！</p><p>第一次看到了现实中的龙猫，只能说J桑真的厉害…也在现实中见到了up主…</p><p>感觉似乎一瞥另一个圈子的大佬们…</p><img src="https://live.staticflickr.com/65535/50736672591_1c0ab19282_c_d.jpg"><p>真正的龙猫，J桑是有6个这样的龙猫屋子的…</p><img src="https://live.staticflickr.com/65535/50735938243_d725ae62fb_c_d.jpg"><p>在家里大家一起吃烤肉、喝快乐水、打switch、侃ACG，悠哉美哉！</p><p>(8月光在玩了，懒得找房，所以…又续了一个季度)</p><ul><li>Sep. Normal Life</li></ul><p>9月就是正常的生活工作啦，没有什么有意思的事情，意外收到了公司教师节发给当导师的教师节礼物，我也有幸收到了一份~</p><img src="https://live.staticflickr.com/65535/50735959923_2f969af064_o_d.jpg"><ul><li>Oct. Groomsman</li></ul><p>十一好兄弟L桑结婚，我则是作为伴郎过去~ 顺道去深圳与Y桑玩了一天，又到广州见了表姐一家~ 最后则是落脚L桑的家乡，为L桑送去最好的祝福，并帮他抢亲，哈哈哈。</p><p>这次去广州感受了不一样的婚礼风俗，只感觉红包满天飞、各种地方都要敬茶，甚是神奇~</p><img src="https://live.staticflickr.com/65535/50736709196_0df35c223a_o_d.jpg"><p>月底则终于开始了搬家，搬到了离公司比较近的地方和同事C桑一起~ 果然合租住大House比单人的小屋舒服多了…</p><ul><li>Nov. Animal, Botany &amp; Art</li></ul><p>大家约定的春游因为疫情变成了秋游，秋游则由于工作的攻关一拖再拖拖到了11月…都快变成了东游了~</p><p>去了辰山植物园，不过似乎大家对动物更感兴趣，哈哈</p><p><img src="https://live.staticflickr.com/65535/50735991788_be8c19e625_c_d.jpg" title="绵阳君" style="display: inline-block; height:300px;"><img src="https://live.staticflickr.com/65535/50736726266_602eace9a7_w_d.jpg" title="羊驼殿" style="display: inline-block; height:300px;"><img src="https://live.staticflickr.com/65535/50736726136_88a58a89b0_c_d.jpg" title="植物主角" style="display: inline-block; height:300px;"></p><p>有只小羊从栏杆里钻出来了，超级可爱！羊驼殿也非常的帅~ 最后还是附一张真正的主角，植物好了~</p><p>回来与G大去艺术感感受了一波人文情怀，不过果然该看不懂的还是看不懂呢，摊手</p><img src="https://live.staticflickr.com/65535/50736725846_2123db2dcd_c_d.jpg"><p>作品名：马赛克</p><img src="https://live.staticflickr.com/65535/50736833022_6eca6e344a_c_d.jpg"><p>作品名：会动的房间</p><ul><li>Dec. Ordinary Life</li></ul><p>12月没有什么惊喜的事情，工作的事情塞满了自己的生活，倏忽间便过去了~</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>22年某月回看，才发现当时20年的总结忘了写，留在这里的是19年的总结，有点尴尬。现在已经无法回想起20年的感受了，唯有疫情导致封城的现在再一次提醒了我20年的不好过，而现在看着自己所在日增2w的上海，恍惚间甚至觉得日子越过越回去了……</p><p>所以20年就没有总结了吧~</p><ul><li style="list-style: none"><input type="checkbox" checked> 健身 <del>50×</del> 25√</li><li style="list-style: none"><input type="checkbox" checked> 读10本专业以外的书</li><li style="list-style: none"><input type="checkbox"> 画4副插画</li><li style="list-style: none"><input type="checkbox" checked> 写5篇技术博客(博客是一个自己总结的好机会)</li><li style="list-style: none"><input type="checkbox" checked> 开开心心</li></ul><p>2021年加油！</p><ul><li style="list-style: none"><input type="checkbox"> 健身30</li><li style="list-style: none"><input type="checkbox"> 读10本专业以外的书</li><li style="list-style: none"><input type="checkbox"> 画画！！！！！！</li><li style="list-style: none"><input type="checkbox"> 快快乐乐</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020 是历史魔幻的一年，乘着历史的过山车，演好自己的剧本，端好手中的饭碗，抚平心中的涟漪，笑对生活~&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="http://silentming.net/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>2019 ACG 追番总结</title>
    <link href="http://silentming.net/blog/2020/06/15/2019-acg-summary/"/>
    <id>http://silentming.net/blog/2020/06/15/2019-acg-summary/</id>
    <published>2020-06-15T08:39:29.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>2019的追番总结一直拖延到现在其中有诸多原因，过年期间由于感情问题导致春节在家专注于新鲜事物转移注意力，而十分不幸的是遇到了百年难遇的新冠疫情，本想出去散心的我只能待在家里。当时也仅仅专注于技术希望能让自己的注意力能够集中，也因此把追番的总结一直拖到现在。</p><p>之所以一直坚持这个系列，无非是想让自己在看过的这么多套路满满的动画中能够汲取一些收获，使得自己的时间不是无意义的流逝。</p><p>废话到此为止，来回顾一下2019的牛鬼蛇神！</p><a id="more"></a><h2 id="Jan"><a href="#Jan" class="headerlink" title="Jan."></a>Jan.</h2><h3 id="5-0-约定的梦幻岛-約束のネバーランド-The-Promised-Neverland-CloverWorks"><a href="#5-0-约定的梦幻岛-約束のネバーランド-The-Promised-Neverland-CloverWorks" class="headerlink" title="5.0 约定的梦幻岛/約束のネバーランド/The Promised Neverland-CloverWorks"></a>5.0 约定的梦幻岛/約束のネバーランド/The Promised Neverland-CloverWorks</h3><img src="https://bkimg.cdn.bcebos.com/pic/0eb30f2442a7d9333037353da04bd11372f001e5?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyMjA=,xp_5,yp_5"><p>这部番作为当季度霸权无可争议，这是少有的我看了后深感自己叙事能力低下的作品，属于可望而不可及的水准。</p><p>在不看漫画的情况下，整部番的舞台就是一个福利院，天真无邪的孩童们在亲切的妈妈的照顾下每天度过快乐的时光。</p><p>只是隐隐发现一些不和谐的地方，每个儿童都有编号、时不时就会离开的伙伴、不能去的大门……</p><p>12集仅仅讲述一个福利院的孩童们与妈妈进行捉迷藏、斗智斗勇的故事。</p><p>这部番强烈推荐，虽然后面的漫画剧情相比其他作品也没有特别出彩，只是中上水平。然而动画的叙事使该作的观看体验大幅提升。</p><h3 id="4-9-辉夜大小姐想让我告白～天才们的恋爱头脑战～-かぐや様は告らせたい～天才たちの恋愛頭脳戦～-A-1-Pictures"><a href="#4-9-辉夜大小姐想让我告白～天才们的恋爱头脑战～-かぐや様は告らせたい～天才たちの恋愛頭脳戦～-A-1-Pictures" class="headerlink" title="4.9 辉夜大小姐想让我告白～天才们的恋爱头脑战～/かぐや様は告らせたい～天才たちの恋愛頭脳戦～-A-1 Pictures"></a>4.9 辉夜大小姐想让我告白～天才们的恋爱头脑战～/かぐや様は告らせたい～天才たちの恋愛頭脳戦～-A-1 Pictures</h3><img src="https://bkimg.cdn.bcebos.com/pic/5d6034a85edf8db1e9e1240b0623dd54574e7495?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UxMTY=,xp_5,yp_5"><p>轻松快乐的校园生活剧，剧情好笑并且全程无尿点，动画将漫画的喜剧特点进一步进行夸张和突出，使角色塑造的更加鲜明，对比也更加强烈。</p><p>剧情围绕相互喜欢但是都想要让对方先告白的学生会会长副会长，以及与天然黑粉毛、无言游戏宅的搞笑学生会生活。也算斗智斗勇了…</p><h3 id="4-2-爱，死亡和机器人-Love-Death-amp-Robots-Netfix"><a href="#4-2-爱，死亡和机器人-Love-Death-amp-Robots-Netfix" class="headerlink" title="4.2 爱，死亡和机器人/Love, Death &amp; Robots-Netfix"></a>4.2 爱，死亡和机器人/Love, Death &amp; Robots-Netfix</h3><img src="https://bkimg.cdn.bcebos.com/pic/6609c93d70cf3bc76afc45bddf00baa1cc112ae7?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2U4MA==,xp_5,yp_5"><p>这是Netfix爸爸请各路神仙导演出的短视频合集，也因此质量参差不齐，个人比较喜欢的是这几部《桑尼的优势》、《证人》、《祝有好收获》、《变形者》、《帮手》，美国的动画就是充满黄毒暴← ←…</p><p>不愧是各路大导演的脑洞，每个都是可以扩展成长篇电影的剧情，可以算是看了18个精彩小故事吧~</p><h3 id="3-8-烟草-ケムリクサ-YAOYOROZU"><a href="#3-8-烟草-ケムリクサ-YAOYOROZU" class="headerlink" title="3.8 烟草/ケムリクサ-YAOYOROZU"></a>3.8 烟草/ケムリクサ-YAOYOROZU</h3><img src="https://stat.ameba.jp/user_images/20190331/14/mui-sekiei/85/d9/j/o1000053014382097401.jpg"><p>这部番有些画风劝退，加之剧情慢热使得作品比较冷门，在一个神奇的充满危险红雾的世界里男主遇到了会使用叶子(烟草)的妹子们，这部番在每一集都在一点点对这个世界进行叙述、通过一个个细节展露一个个疑点，作为一部带有悬疑成分的原创动画，每一集和弹幕都在猜测接下来的发展而不亦乐乎。</p><p>到了11集一口气揭示世界真相与妹子们的身世，让观众在哀叹这不幸的故事时，也感到一丝丝的欣慰。</p><p>这部分虽然冷门，画风比较奇特，但是属实不错，也是季度销量霸权足见其成功。</p><h3 id="3-5-不吉波普不笑-ブギーポップは笑わない-Madhouse"><a href="#3-5-不吉波普不笑-ブギーポップは笑わない-Madhouse" class="headerlink" title="3.5 不吉波普不笑/ブギーポップは笑わない-Madhouse"></a>3.5 不吉波普不笑/ブギーポップは笑わない-Madhouse</h3><img src="https://bkimg.cdn.bcebos.com/pic/34fae6cd7b899e5102b7c4434fa7d933c8950daf?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>一年之后，能够记起来关于这部番的只有OP的音乐了(笑)。在当时作为一部冷门番，其质量还是说的过去的，讲述不可思议的传说少女不吉波普解决事件的物语，有一点死后文的味道，每个故事都是个小篇章，适合杀时间时看看~</p><h3 id="3-0-五等分的新娘-五等分の花嫁-手冢Production"><a href="#3-0-五等分的新娘-五等分の花嫁-手冢Production" class="headerlink" title="3.0 五等分的新娘/五等分の花嫁-手冢Production"></a>3.0 五等分的新娘/五等分の花嫁-手冢Production</h3><img src="https://bkimg.cdn.bcebos.com/pic/b8389b504fc2d56284049d61ea1190ef76c66c29?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>后宫向的动画真是从封面就能看出来，男主辅导5胞胎，然后…嗯你就知道后面就是6角恋的故事了。</p><p>这部番的问题在于和《伪恋》类似，有些强行拖剧情的嫌疑，所以给个平均分3分ok了。还算能看。</p><h2 id="Apr"><a href="#Apr" class="headerlink" title="Apr."></a>Apr.</h2><h3 id="4-7-鬼灭之刃-鬼滅の刃-ufotable"><a href="#4-7-鬼灭之刃-鬼滅の刃-ufotable" class="headerlink" title="4.7 鬼灭之刃/鬼滅の刃-ufotable"></a>4.7 鬼灭之刃/鬼滅の刃-ufotable</h3><img src="https://goodouga.com/wp-content/uploads/2020/03/kimetsu-zenshuchuten-1.jpg"><p>这部番原本属于慢热型，奈何ufotable强无敌的作画让整部动画节奏非常的好，热血类的动画、精彩的动作戏+优美的作画向来不缺乏市场，何况妹妹还那么可爱。</p><p>妹妹被“鬼”的Boss无惨变为了鬼，炭治郎就怀着将妹妹变回人类的信念成为鬼杀队的一员，与其他队员解决一个个由鬼引起的事件并不断成长的故事~</p><p>里面除了高人气的妹妹，蝶之柱、珠世等人气角色也在P站有诸多同人作品。</p><h3 id="3-5-我们无法一起学习-ぼくたちは勉強ができない-st-Silver，ARVO-ANIMATION"><a href="#3-5-我们无法一起学习-ぼくたちは勉強ができない-st-Silver，ARVO-ANIMATION" class="headerlink" title="3.5 我们无法一起学习/ぼくたちは勉強ができない-st Silver，ARVO ANIMATION"></a>3.5 我们无法一起学习/ぼくたちは勉強ができない-st Silver，ARVO ANIMATION</h3><img src="https://bkimg.cdn.bcebos.com/pic/f9dcd100baa1cd113a6d2853b712c8fcc2ce2ded?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyMjA=,xp_5,yp_5"><p>看封面就知道是个微后宫向的动画，男主学霸辅导偏科天才们的故事，理科天才想要攻读文科方向，文科天才想要攻读理科方向，体育特招的青梅竹马，要男主补英语，看着男主这般努力刀子嘴豆腐心的傲娇老师……</p><p>青春校园恋爱喜剧开幕啦啦啦啦。。。</p><h2 id="Jul"><a href="#Jul" class="headerlink" title="Jul."></a>Jul.</h2><h3 id="4-0-石纪元-ドクターストーン-Dr-STONE-TMS-Entertainment"><a href="#4-0-石纪元-ドクターストーン-Dr-STONE-TMS-Entertainment" class="headerlink" title="4.0 石纪元/ドクターストーン/Dr.STONE-TMS Entertainment"></a>4.0 石纪元/ドクターストーン/Dr.STONE-TMS Entertainment</h3><img src="https://bkimg.cdn.bcebos.com/pic/f31fbe096b63f6249cb64e048944ebf81b4ca3ca?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>一道奇妙的绿光，全世界所有人变成了石头，男主几个从石头中重新活了过来，便从0开始构建人类文明。</p><p>这部番都可以看成是科教片了，毕竟从0构建全部文明，直接走工业革命并介绍历史上的重大发明，还属于比较有意思的番。</p><p>不过长篇漫画的改编都有一点问题，就是长线剧情的跌宕起伏达不到短片的精彩，毕竟要给后面留剧情演进，无法把人物写死。</p><h3 id="3-0-骚动时节的少女们啊。-荒ぶる季節の乙女どもよ。-Lay-duce"><a href="#3-0-骚动时节的少女们啊。-荒ぶる季節の乙女どもよ。-Lay-duce" class="headerlink" title="3.0 骚动时节的少女们啊。/荒ぶる季節の乙女どもよ。-Lay-duce"></a>3.0 骚动时节的少女们啊。/荒ぶる季節の乙女どもよ。-Lay-duce</h3><img src="https://bkimg.cdn.bcebos.com/pic/34fae6cd7b899e51dec709f14ca7d933c9950d8d?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>讲述一个文学社的少女们谈性色变的故事，然而原本都对恋爱避之不及或十分害羞的少女们，在这骚动的时节每一个都走上了自己的故事.</p><h3 id="3-8-流汗吧！健身少女-ダンベル何キロ持てる？-肌肉少女：哑铃，能举多少公斤？-动画工房"><a href="#3-8-流汗吧！健身少女-ダンベル何キロ持てる？-肌肉少女：哑铃，能举多少公斤？-动画工房" class="headerlink" title="3.8 流汗吧！健身少女/ダンベル何キロ持てる？/肌肉少女：哑铃，能举多少公斤？-动画工房"></a>3.8 流汗吧！健身少女/ダンベル何キロ持てる？/肌肉少女：哑铃，能举多少公斤？-动画工房</h3><img src="https://bkimg.cdn.bcebos.com/pic/9922720e0cf3d7cac7ab7dd5fc1fbe096b63a930?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UxMTY=,xp_5,yp_5"><p>动画工房的水准真的是越来越高了，这番要是某个健身房推出的，绝对会员卡买爆啊！一边讲述硬核健身知识，一边用萌妹来演示，充分调动肥宅的积极性。。。</p><h2 id="Oct"><a href="#Oct" class="headerlink" title="Oct."></a>Oct.</h2><h3 id="3-4-喜欢本大爷的竟然就你一个？-俺を好きなのはお前だけかよ-CONNECT"><a href="#3-4-喜欢本大爷的竟然就你一个？-俺を好きなのはお前だけかよ-CONNECT" class="headerlink" title="3.4 喜欢本大爷的竟然就你一个？/俺を好きなのはお前だけかよ-CONNECT"></a>3.4 喜欢本大爷的竟然就你一个？/俺を好きなのはお前だけかよ-CONNECT</h3><img src="https://bkimg.cdn.bcebos.com/pic/2f738bd4b31c870102f7e6e1287f9e2f0708ff70?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UxNTA=,xp_5,yp_5"><p>男主高富帅，受各种妹子喜欢，想着美丽的学姐与漂亮的青梅竹马间二取一就行，然而没想到学姐与青梅竹马都希望男主牵线给他的基友……</p><p>然而！没想到基友对男主竟然有深仇大恨，想利用男主身边的妹子来报复男主，看破一切的竟然是那个带着眼镜的神秘跟踪狂少女……</p><p>这部番由一部参赛获奖小说改变，小说剧情跌宕起伏，甚是精彩；原作里把基友都当成反派Boss准备干掉了，没想到作品火了后要出续集，于是又强行洗白。。</p><p>所以本作只需要看到第一部分谜底揭开就可以了，后面就是纯粹的拖了。</p><h3 id="4-5-慎重勇者～这个勇者明明超强却过分慎重～-慎重勇者～この勇者が俺TUEEEくせに慎重すぎる～-WHITE-FOX"><a href="#4-5-慎重勇者～这个勇者明明超强却过分慎重～-慎重勇者～この勇者が俺TUEEEくせに慎重すぎる～-WHITE-FOX" class="headerlink" title="4.5 慎重勇者～这个勇者明明超强却过分慎重～/慎重勇者～この勇者が俺TUEEEくせに慎重すぎる～-WHITE FOX"></a>4.5 慎重勇者～这个勇者明明超强却过分慎重～/慎重勇者～この勇者が俺TUEEEくせに慎重すぎる～-WHITE FOX</h3><img src="https://bkimg.cdn.bcebos.com/pic/f603918fa0ec08fa200396c656ee3d6d55fbda54?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>异世界穿越类中题材新颖的作品，男主就是那种十里坡剑神，在出生点练级到满级才去打boss的那类，也由此产生了诸多笑点。</p><p>而在欢笑的背后，也慢慢揭示了男主与女主前世的故事，属于做工还不错，剧情尚可的异世界穿越系列~</p><h3 id="4-7-BEASTARS-动物狂想曲-Orange"><a href="#4-7-BEASTARS-动物狂想曲-Orange" class="headerlink" title="4.7 BEASTARS/动物狂想曲-Orange"></a>4.7 BEASTARS/动物狂想曲-Orange</h3><img src="https://bkimg.cdn.bcebos.com/pic/10dfa9ec8a136327ba35b2db9f8fa0ec09fac77a?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2U5Mg==,xp_5,yp_5"><p>这番有点《动物农场》的感觉了，通过动物精妙的影射了社会的现实，在校园中食肉与食草动物和谐相处，而校外却是社会的残酷。</p><p>即使在校内，大灰狼爱上小白兔这种禁忌之恋也不按照偶像剧中那般发展，小白兔并不纯洁，大灰狼也实在拥有者兽性，反倒是这样才愈发显得真实，也为这狼兔之恋增添了一些真实的质感。</p><h3 id="4-5-灵笼：INCARNATION，INCARNATION-艺画开天"><a href="#4-5-灵笼：INCARNATION，INCARNATION-艺画开天" class="headerlink" title="4.5 灵笼：INCARNATION，INCARNATION-艺画开天"></a>4.5 灵笼：INCARNATION，INCARNATION-艺画开天</h3><img src="https://imgsrc.baidu.com/baike/pic/item/500fd9f9d72a60595b2110cb2634349b033bba2a.jpg"><p>上乘的国产动画，描述的背景是末世世界下残存的人类在空中城堡中的社会，题材带有反乌托邦特色，在这个社会自由恋爱、传统的爱情家庭观被视为旧世界的陋习，根据基因培育下一代的人类，基因优秀与普通还会区分人的阶级。但为了生存的需要，在这新的社会下，获取我们现在所拥有的自由、平等、博爱才是脆弱的花朵吧。</p><h3 id="3-0-碧蓝航线-アズールレーン-Azur-Lane-Bibury-Animation-Studio"><a href="#3-0-碧蓝航线-アズールレーン-Azur-Lane-Bibury-Animation-Studio" class="headerlink" title="3.0 碧蓝航线/アズールレーン/Azur Lane-Bibury Animation Studio"></a>3.0 碧蓝航线/アズールレーン/Azur Lane-Bibury Animation Studio</h3><img src="https://bkimg.cdn.bcebos.com/pic/86d6277f9e2f0708c2fa3fefe724b899a801f266?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5"><p>粉丝向的作品，也是为了给游戏做宣传，但是做的还不错，给个及格分水平。</p><p>故事剧情也是极为政治正确了，轴心国是被塞壬力量侵蚀做了蠢事，然后与同盟国合力击败塞壬O(∩_∩)O</p><p>动画的一大特点是，角色在战斗中都会说与游戏中一样的台词，战斗场面可圈可点，剧情勉强差强人意，粉丝向的可以一看。</p><h2 id="续作类"><a href="#续作类" class="headerlink" title="续作类"></a>续作类</h2><p>个人评分直接写到前面啦~</p><ul><li>4.3 心理测量者/PSYCHO-PASS/サイコパス 3-Production I.G  PP3剧情还是不错，不过这一季只演了一半，另一半要等剧场版(剧场版剧情更为精彩哦！),  但是朱妹要为下一届主角让位，所以看不到朱美的飒爽英姿了。PP3的男主能力又有些过于玄幻，扣点分吧。</li><li>4.2 进击的巨人 3  还是一如既往的水准，不过国内禁播所以…</li></ul><ul><li>4.0 续·终物语/続・終物語/ゾク・オワリモノガタリ-SHAFT  这部一般，有点拖沓了，没有之前的惊艳。</li><li>3.8 某科学的一方通行/とある科学の一方通行-J.C.STAFF  不得不说，一方通行的地位还是远没有炮姐高啊，但是比本传魔禁还是要更出色的。</li></ul><ul><li>3.7 食戟之灵：神之皿/食戟のソーマ 神ノ皿-J.C.STAFF  剧情继续，不过这番越往后越魔幻，最后都快成魔法料理了。。</li><li>3.6 在地下城寻求邂逅是否搞错了什么/ダンジョンに出会いを求めるのは間違っているだろうか 2-J.C.STAFF  剧情继续前作，水准也和前作保持一致，还算可以</li><li>3.5 狂赌之渊×x/賭ケグルイ××-MAPPA  继续讲述蛇喰夢子与早乙女芽亞里在私立百花王学园的赌博故事~颜艺满满！</li></ul><ul><li>3.3 约会大作战 3/デート·ア·ライブ 3/DATE A LIVE 3-AIC PLUS+  继续以往的剧情和水准。</li></ul><ul><li>3.2 刀剑神域 异界战争/ソードアート・オンライン アリシゼーション War of Underworld-A-1 Pictures  刀剑爱丽丝这一篇属于质量不错的一篇，不过动画做的确实一般般，就强行坐等桐姥爷开挂就有些无趣了。</li><li>2.8 我们无法一起学习 2/ぼくたちは勉強ができない 2-st Silver，ARVO ANIMATION  剧情没有第一作精彩，伪恋式长篇拖沓的毛病出现了啊…</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>2.9 W’z/ウィズ-Go Hands  音乐作画上乘的《W’z》比《K》还要没有意思， 除了各种特效的作画就是卖肉.</li><li>2.8 我，不是说了能力要平均值么！/私、能力は平均値でって言ったよね！-project No.9  凤傲天类动画，女主能力要平均值结果获得的是世界总魔量的一半…但是剧情稍显无聊。</li><li>2.8 厨神小当家/真・中華一番！/中华小当家-Production I.G，NAS  骗情怀的重制版，但是过于赶，比以前节奏快了不少，看的云里雾里。</li><li>2.7 街角魔族/まちカドまぞく-J.C.STAFF  废萌系列，萌就完事了。</li><li>2.5 贤者之孙/賢者の孫/Wise Man’s Grandchild-SILVER LINK.  这一季度的龙傲天动画，超级大魔法师与魔道工具的养孙，上来就有MAX的魔法天赋然后各种装B的场景，无他唯爽尔。</li><li>2.5 女子高生の無駄づかい/女高中生的虚度日常-Passione  个人不太能欣赏来这类日常向的动画，类似《男子高中生的日常》，讲女高的。</li><li>2.5 重来吧、魔王大人/魔王様、リトライ！-EKACHI EPILKA  穿越系的动画，男主作为魔王穿越到自己写的游戏里面， 这类都带有龙傲天性质，本部番的看点可能就在女儿控了吧。。</li><li>2.2 超人高中生们即便在异世界也能从容生存！/超人高校生たちは異世界でも余裕で生き抜くようです!/High School Prodigies Have It Easy Even In Another World!-project No.9  龙傲天组团穿越，但是太过无聊。</li><li>2.0 环战公主  美少女格斗！但是挺无聊，两女主的故事线也很俗套。</li><li>1.5 笑容的代价  真的是好久没见过这么无聊平庸的作品了，男主守护公主的故事，无聊</li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>其实去年补了一些电影与剧场版，从4、7月的新番也能看出来，好番并不是很多，并且随着对动画的阅历逐渐加深，能够挑动心弦的作品越来越好，回顾一些影视经典更能填补平淡的日常吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019的追番总结一直拖延到现在其中有诸多原因，过年期间由于感情问题导致春节在家专注于新鲜事物转移注意力，
而十分不幸的是遇到了百年难遇的新冠疫情，本想出去散心的我只能待在家里。
当时也仅仅专注于技术希望能让自己的注意力能够集中，
也因此把追番的总结一直拖到现在。&lt;/p&gt;
&lt;p&gt;之所以一直坚持这个系列，无非是想让自己在看过的这么多套路满满的动画中能够汲取一些收获，
使得自己的时间不是无意义的流逝。&lt;/p&gt;
&lt;p&gt;废话到此为止，来回顾一下2019的牛鬼蛇神！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="http://silentming.net/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 7-Startup Table</title>
    <link href="http://silentming.net/blog/2020/01/31/alice-7-startup-table/"/>
    <id>http://silentming.net/blog/2020/01/31/alice-7-startup-table/</id>
    <published>2020-01-31T05:12:23.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇都是理论，都是虚的，学过操作系统的小伙伴这些东西也都听了好多遍了，我们这次就来实际配一下页表，看看需要注意哪些事项~</p><p><a href="https://github.com/SilentAlice/alice-os/tree/26c3882632f12a377b78f64f58f16aafc6e86bc1" target="_blank" rel="noopener">Alice-OS: Startup Table</a></p><a id="more"></a><h2 id="Address-Map-Layout"><a href="#Address-Map-Layout" class="headerlink" title="Address Map Layout"></a>Address Map Layout</h2><p>我们的目的是把<code>KERNEL_START_VADDR(0x80000000)</code>让它能映射为<code>KERNEL_LOAD_PADDR(0x60010000 or 0x00010000)</code>,所以首先我们要把0x80000000对应的STE entry填成load_paddr的base address;</p><figure class="highlight c"><figcaption><span>startup_table.c</span><a href="https://github.com/SilentAlice/alice-os/blob/26c3882632f12a377b78f64f58f16aafc6e86bc1/arch/arm/startup_table.c" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STE_RSRV_BITS       (0x2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STE_AP_SHIFT10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STE_BASE_SHIFT20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STE_KERNEL_DEF      (STE_RSRV_BITS | STE_DOMAIN(0) | (0x2 &lt;&lt; STE_AP_SHIFT))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STE_ADDR(base, offset) (((base &gt;&gt; STE_BASE_SHIFT) + offset) &lt;&lt; STE_BASE_SHIFT)</span></span><br><span class="line"></span><br><span class="line">__attribute__((__aligned__(SECTION_TABLE_ALIGN)))</span><br><span class="line"><span class="keyword">uint32_t</span> startup_table[<span class="number">4096</span>] = &#123;</span><br><span class="line">    <span class="comment">/* KERNEL_START_VADDR maps KERNEL_LOAD_PADDR */</span></span><br><span class="line">    [(KERNEL_START_VADDR &gt;&gt; <span class="number">20</span>) + <span class="number">0</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">0</span>) | STE_KERNEL_DEF,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据前一篇的原理分析，我们将<code>0x80000000 - 0x80100000</code> 1M 的空间映射到了<code>0x60000000 - 0x60100000</code>,这样当我们取地址时就能拿到正确的数据了。</p><p>Domain我们取Domain 0, DACR[1:0]我们配置为Client 01, 也就是要应用页表的这些访问控制检查;AP我们使用0b10, 也就是映射的区域可读可写;<code>RSRV_BITS</code>实际上是确定table entry是使用section table entry的意思。</p><p>但是这里有个问题，如果我们就这样enable MMU之后,我们的下一条指令还是0x6001xxxx吧? 虽然0x80000000映射好了，但是0x6001xxxx这个是我们正在用的地址，用这个去访存取指令不就没有物理页对应么？</p><p>所以除了0x80000000, 我们对原来的Load Address也要映射为真正的Load Address,这部分就是1:1直接映射:</p><figure class="highlight c"><figcaption><span>startup_table.c</span><a href="https://github.com/SilentAlice/alice-os/blob/26c3882632f12a377b78f64f58f16aafc6e86bc1/arch/arm/startup_table.c" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((__aligned__(SECTION_TABLE_ALIGN)))</span><br><span class="line"><span class="keyword">uint32_t</span> startup_table[<span class="number">4096</span>] = &#123;</span><br><span class="line">    <span class="comment">/* KERNEL_LOAD_PADDR is direct mapping */</span></span><br><span class="line">    [(KERNEL_LOAD_PADDR &gt;&gt; <span class="number">20</span>) + <span class="number">0</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">0</span>) | STE_KERNEL_DEF,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* KERNEL_START_VADDR maps KERNEL_LOAD_PADDR */</span></span><br><span class="line">    [(KERNEL_START_VADDR &gt;&gt; <span class="number">20</span>) + <span class="number">0</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">0</span>) | STE_KERNEL_DEF,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>好了，这样我们的映射就构建好了，我们下一条指令0x6001xxxx也能正常执行，取地址什么的0x8000xxxx也能正常取到。由于只映射了1M的空间，如果我们镜像慢慢变大可能会不够用，所以实际实现过程中我各映射了16M。</p><figure class="highlight c"><figcaption><span>startup_table.c</span><a href="https://github.com/SilentAlice/alice-os/blob/26c3882632f12a377b78f64f58f16aafc6e86bc1/arch/arm/startup_table.c" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((__aligned__(SECTION_TABLE_ALIGN)))</span><br><span class="line"><span class="keyword">uint32_t</span> startup_table[<span class="number">4096</span>] = &#123;</span><br><span class="line">    <span class="comment">/* KERNEL_LOAD_PADDR is direct mapping (16M) */</span></span><br><span class="line">    [(KERNEL_LOAD_PADDR &gt;&gt; <span class="number">20</span>) + <span class="number">0</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">0</span>) | STE_KERNEL_DEF,</span><br><span class="line">    [(KERNEL_LOAD_PADDR &gt;&gt; <span class="number">20</span>) + <span class="number">1</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">1</span>) | STE_KERNEL_DEF,</span><br><span class="line">    ...</span><br><span class="line">    [(KERNEL_LOAD_PADDR &gt;&gt; <span class="number">20</span>) + <span class="number">15</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">15</span>) | STE_KERNEL_DEF,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* KERNEL_START_VADDR maps KERNEL_LOAD_PADDR (16M) */</span></span><br><span class="line">    [(KERNEL_START_VADDR &gt;&gt; <span class="number">20</span>) + <span class="number">0</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">0</span>) | STE_KERNEL_DEF,</span><br><span class="line">    [(KERNEL_START_VADDR &gt;&gt; <span class="number">20</span>) + <span class="number">1</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">1</span>) | STE_KERNEL_DEF,</span><br><span class="line">    ...</span><br><span class="line">    [(KERNEL_START_VADDR &gt;&gt; <span class="number">20</span>) + <span class="number">15</span>] = STE_ADDR(KERNEL_LOAD_PADDR, <span class="number">15</span>) | STE_KERNEL_DEF,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Enable-MMU"><a href="#Enable-MMU" class="headerlink" title="Enable MMU!"></a>Enable MMU!</h2><p>好了，Startup Table已经填好，接下来就是配置TTBR、SCTLR用起来了:</p><figure class="highlight c"><figcaption><span>arch/arm/init.c</span><a href="https://github.com/SilentAlice/alice-os/blob/26c3882632f12a377b78f64f58f16aafc6e86bc1/arch/arm/init.c" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> val;</span><br><span class="line"><span class="comment">/* init DACR, we only use domain 0 */</span></span><br><span class="line">val = <span class="number">0x1</span>;</span><br><span class="line">sysreg_write32(DACR, val);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ARM_VERSION == 7</span></span><br><span class="line"> <span class="comment">/* bit[2-0]: All address translation use TTBR0 */</span></span><br><span class="line">val = <span class="number">0x0</span>;</span><br><span class="line">sysreg_write32(TTBCR, val);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">val = (<span class="keyword">uintptr_t</span>)(&amp;startup_table);</span><br><span class="line">val = va2pa(val);</span><br><span class="line">sysreg_write32(TTBR0, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* enable mmu */</span></span><br><span class="line">sysreg_read32(SCTLR, val);</span><br><span class="line">val |= SCTLR_M;</span><br><span class="line">sysreg_write32(SCTLR, val);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span> <span class="params">(<span class="string">"mov r7, #0xAA"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span> <span class="params">(<span class="string">".word 0xdeadbeef"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>首先配置DACR, 把Domain 0设置为Client,ARMv7上我还把TTBCR配置为只使用TTBR0,需要注意的是我们取到的<code>&amp;startup_table</code>是链接脚本里的虚拟地址，需要给他转换成物理地址(减去<code>KERNEL_START_VADDR</code> 再加上<code>KERNEL_LOAD_PADDR</code>),之后将它填到TTBR(0)里面, 使能MMU!</p><p>我们来验证一下，使能MMU之后我们<code>mov r7, #0xAA</code>是否可以执行成功吧！</p><p>vexpress-a9:</p><pre><code>QEMU 4.2.0 monitor - type &apos;help&apos; for more information(qemu) info registersR00=60010000 R01=6001a000 R02=60018000 R03=00c50079R04=00000000 R05=00000000 R06=00000000 R07=000000aaR08=00000000 R09=00000000 R10=00000000 R11=60019fecR12=00000000 R13=00000000 R14=00000010 R15=0000000c</code></pre><p>versatilepb:</p><pre><code>QEMU 4.2.0 monitor - type &apos;help&apos; for more information(qemu) info registersR00=00010000 R01=0001a000 R02=00018000 R03=00090079R04=00000000 R05=00000000 R06=00000000 R07=000000aaR08=00000000 R09=00000000 R10=00000000 R11=00019fdcR12=00019fe0 R13=00019fb8 R14=000100d0 R15=000100a8</code></pre><p>R7里面就是我们想要的AA! 我们的页表配置成功!</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>我们接下来就要把栈、PC等跳到真正的0x80000000了，让他们跑在自己应该跑的地方~</p><p>之后我们设置的就是操作系统非常重要的异常向量表,如果上面这些代码小伙伴自己哪里写错的话会发现PC会跑到一个奇怪的地址,那个地址就是当异常发生时系统控制流直接跳转的地方，不设置异常向量表，我们的操作系统就无法处理任何错误，发生错误时我们也得不到任何有用的信息，不能处理系统调用请求和中断…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇都是理论，都是虚的，
学过操作系统的小伙伴这些东西也都听了好多遍了，
我们这次就来实际配一下页表，
看看需要注意哪些事项~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/26c3882632f12a377b78f64f58f16aafc6e86bc1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: Startup Table&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 6-Address Translation</title>
    <link href="http://silentming.net/blog/2020/01/31/alice-6-address-translation/"/>
    <id>http://silentming.net/blog/2020/01/31/alice-6-address-translation/</id>
    <published>2020-01-30T17:22:39.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要解释一下为什么要使用页表系统，构建页表系统需要注意什么，然后再看一下ARMv5与ARMv7页表格式的区别,看能不能尽可能把两者的代码统一起来。</p><p>已经熟悉地址翻译的小伙伴可以直接看下一篇，不玩虚的直接上手！</p><a id="more"></a><h2 id="页表系统"><a href="#页表系统" class="headerlink" title="页表系统"></a>页表系统</h2><p>我们学习操作系统原理的时候一定会讲页表，我们也都知道虚拟地址经过页表翻译会变成物理地址。那么页表是为了解决什么问题呢？</p><p>设想一下，如果我们没有页表，就像我们之前的代码那样一行行直接跑，我们在linker script里面把起始地址改成和实际启动地址一样，好像也是OK的。只要链接脚本生成的地址和实际启动地址一致，我们的访存也不会出错，好像已经很完美了。</p><p>在没有OS的时候，我们的CPU直接跑的裸程序(bare metal),那么如果想跑多个APP的话，就需要保证APP之间地址<strong>不能互相重叠</strong>。但这样一个APP也基本上只能跑在这个CPU上了，换个CPU可能别的APP就把这个给占了，总不能我们每次换一个CPU要么赌运气别的APP没用我们的地址，要么我们重新编、甚至重新写吧？</p><p>所以我们一定需要一个地址翻译，每个APP都可以从同一个地址开始执行，只要我给他们映射到不同的物理地址上就行了。</p><p>至于为何慢慢发展成2级或者如今64位系统的4级页表，则主要是为了满足硬件越来越大的物理地址以及减少内存外部碎片的原因。内存碎片和页表的发展有兴趣的小伙伴可以私下自己再看啦。</p><h2 id="TTBR-amp-First-Level-Table"><a href="#TTBR-amp-First-Level-Table" class="headerlink" title="TTBR &amp; First Level Table"></a>TTBR &amp; First Level Table</h2><p>将输入的va(virtual address)翻译为pa(physical address)的过程叫做page walk,也叫address translation. ARMv5的页表非常简单，只要我们构建一个表装到这个TTBR里，SCTLR里的M-bit一使能，MMU就会开始地址翻译了。</p><img src="/images/2020/20200131alice0.png"><p>那么页表翻译的规则是什么样的呢?这里我用ARMv7的页表翻译过程来说, ARMv5的类似，不过v7的图更简洁:</p><img src="/images/2020/20200131alice1.png"><p>我们在ARMv7上会将图中的N设置为0，这样ARMv7上就只使用TTBR0且格式与ARMv5的TTBR保持兼容，可以看到，va的bit[31-20]会作为一级页表的index,通过这个index和TTBR里存放的base,就可以找到对应的页表项(Page Table Entry, PTE or Section Table Entry, STE)。</p><p>如图中所示，我们1级页表有3种格式，分别是Section, Page Table和Supersection,Page Table更为细粒度，还需要2级页表，在2级页表里还有大页和小页等等。</p><p>总的来说:</p><ul><li>使用section, 那么每个entry对应<strong>1M</strong>物理内存区域;</li><li>使用Supersection, 每16个entry内容一模一样, entry指向<strong>16M</strong>物理内存区域;</li><li>使用Page Table<ul><li>大页和section类似, 一个指向<strong>1M</strong>物理内存,</li><li>小页是常见的4K页，一个指向<strong>4K</strong>物理内存。</li></ul></li></ul><p>我们随后再解释为什么它们指向1M、16M或者4K物理内存，我们首先观察，由于一级页表的index范围是 bit[31-20]，所以可以存放2^12 = 4096个entry。每个entry是个32位长变量(4byte)，所以一级页表的大小就是 4byte * 4096 = 16KB.</p><p>由于每个STE对应1M物理内存，所以这个页表最大能够映射 1M * 4096 = 4G的物理地址空间。而为什么是4G物理内存呢? 是因为我们虚拟地址长度32位 2^32 = 4G,所以虚拟地址空间的范围最大就是4G。物理地址也是32位，同样最大也就是4G物理地址空间了。</p><p>(Long-descriptor format 支持更大的物理地址空间, 虚拟地址空间仍为4G)。</p><p>现在再回头看看图1中TTBR的Format: 他的bit[13-0]是(Sould Be Zero/SBZ),其原因就是1级页表是16K大小，而TTBR又要求一级页表是16KB对齐的，因此页表地址的后14位一定为0.</p><h2 id="Address-Translation"><a href="#Address-Translation" class="headerlink" title="Address Translation"></a>Address Translation</h2><p>由于Section最为简单，我们以一级页表是Section为例每个entry是一个STE, 对应1M物理内存。</p><p>详细的查表过程如下:</p><img src="/images/2020/20200131alice2.png"><p>32位的va, 取bit[31:20]作为index, 加到TTBR里的Base上,这样产生的<strong>物理地址</strong> <code>|Base[31:14] | va[31:20] | 00 |</code>指向的就是1级页表的某个entry (STE)。由于entry都是4byte (32bits), 又是对齐的，所以最后两个bit一定是0;</p><p>再来看看输入的va, va只用了bit[31:20], 还有[19:0]呢，这后20位又是怎么使用的呢？这就要看我们上一步取出来的STE了。</p><p>STE格式如下:</p><img src="/images/2020/20200131alice3.png"><p>可以看到STE的bit[31:20]存放的是section base address,这个section base address就是我们刚刚说的这个STE对应的1M物理内存的基址！</p><p>最后翻译得到的物理地址就是 | section base address | va[19:0] | 这样一个32位地址了。</p><p>所以我们看到1级section table实际上只对<strong>va的前12位 bit[31:20]进行了翻译</strong>，翻译成了section base address, <strong>va的后20位直接拿来使用</strong>，组成了一个物理地址。</p><p>所以我们如果想让这个翻译成立，就必须对物理内存进行切分，切分成<strong>1M</strong>大小的块，每一块的起始物理地址都要对齐到1M大小(即后20位为0),这些物理地址块就可以作为STE里面的section base address。</p><p>所以这也是为什么我们开头说section对应1M物理内存区域，这1M的物理块是va通过地址翻译找到的，找到了这个物理块之后，后面的20位地址就可以直接拿来用了。</p><p>假如: (答案在文末)</p><ol><li>section指向的是2M的物理内存, 那么Section Table的大小要如何改变？STE如何改变?</li><li>虚拟地址我们最大只有2G, Section Table大小和STE如何改变?</li><li>物理地址我们想支持8G, 又要改变什么呢？</li><li>我们想支持16G的虚拟地址, 需要怎么办?</li></ol><h2 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h2><p>那么Page Table的格式也就类似了:</p><p>va会被拆成3部分:</p><ul><li>va[31:22] : index of first level page table</li><li>va[21:12] : index of second level page table</li><li>va[11:0]  : offset of page</li></ul><p>其中1级页表的PTE (也叫PDE: Page Directory Entry) 存放2级页表的base;2级页表的PTE存放4K物理页的base,最后从2级页表的PTE中取出20位长的4K物理页base再加上va[11:0]组成真正的物理地址(如上图Fine page table)。</p><p>所以使用页表，物理页就会被分成4K的小块，也就更为灵活了。</p><h2 id="Bits-in-Table-Entry"><a href="#Bits-in-Table-Entry" class="headerlink" title="Bits in Table Entry"></a>Bits in Table Entry</h2><p>我们发现上图中，Table Entry不止存放有物理页的base,还有一些其它的东西: AP, Domain, C, B</p><p>AP是Access Permission, 可以控制这块内存是否可以访问，是否可以被非特权的用户态访问,是否可写等等。</p><p>Domain: ARM有个Domain Access Control Register DACR。32位的寄存器被分成了16个Domain, 每个Domain 2个bit:</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Meaning</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">00</td><td style="text-align:left">No access</td><td style="text-align:left">Any access generates a domain fault.</td></tr><tr><td style="text-align:left">01</td><td style="text-align:left">Client</td><td style="text-align:left">Accesses are checked against the access permission bits in the section or page descriptor.</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">Reserved</td><td style="text-align:left">Reserved. Currently behaves like the no access mode.</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">Manager</td><td style="text-align:left">Accesses are not checked against the access permission bits so a permission fault cannot be generated.</td></tr></tbody></table><p>每个Domain可以设置是否可以访问或者是否启用安全检查，页表项指向的这个区域会对应于一个Domain，在访存时进行访问控制检查。我们当然还是希望应用检查的，所以会用0b01 Client;</p><p>C, B就是Cache属性, 对应的内存区域是否是cachable, 是否为Write-Back等等;关于Cache我们暂时不会涉及，有兴趣的可以自己查一下。</p><h2 id="ARMv5-vs-ARMv7"><a href="#ARMv5-vs-ARMv7" class="headerlink" title="ARMv5 vs ARMv7"></a>ARMv5 vs ARMv7</h2><p>ARMv7的页表可以用两个TTBR, 可以分别用于内核和用户态，等我们以后用到TTBR1的时候再解释这么做的好处。</p><p>ARMv7里面的AP还有第3个: AP[2] 可以进行更细粒度的控制，或者通过配置SCTLR.AFE将AP[0]用做Access Flag,可以查看内存是否被硬件访问过，用于刷Cache等等。</p><p>ARMv7还有Execution Not bit, 用来表明某个内存区域不可执行等等。</p><p>总之ARMv7有更多有关安全、Cache的bits,目前我们为了方便演示，会将ARMv7配置为兼容ARMv5的形式,所以这些bit暂且不用理会, 有兴趣的自己可以研究一下。</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>现在我们已经知道了地址翻译的原理和过程，下面就来看看我们如何来构建启动的页表吧。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol><li><p>如果section指向2M物理内存, 就意味着4G的地址范围需要 2048个entry,每个entry 4B, Section Table大小就是 4B * 2048 = 8K, 对齐到8K 所以后13位要全为0。TTBR的格式就是 bit[31:13]是Base (19bits), bit[12:0]SBZ;<br>由于entry变少，用于index的va就只需要[31:21] 11个bit用来作为index了,和TTBR的19个bits拼起来就是STE的地址，依旧是最后两位为0。<br>STE由于对应2M区域，所以后21位可以都作为other bits,section base address就只需要32-21 = 11bits, 即 bit[31:21];</p></li><li><p>虚拟地址最大为2G, 我们要翻译的地址大小就少了一半，所以Section Table entry减半, 其他不变。</p></li><li><p>物理地址想支持8G, 那就是说最后的STE中填写的Base要多一个bit,这样才能索引到更大的物理地址，所以STE中的section base address要多一位来保证能索引到8G的物理地址范围。ARM本身支持物理地址扩大到16G, 可以自己参考一下ARM手册是怎么改Descriptor格式的吧~</p></li><li><p>如果我们想支持16G的虚拟地址(va 34位)，要么把Table番两番，entry加到 4096 * 4;要么就要再引入多级页表, 把va拆成多份,va[a|b|c|d|…], a作为1级页表的index, b是2级页表的index, c是3级页表的index…最后在最后一级页表中取出来physical address base, 拼上最后没用做index的va;</p></li></ol><p>本质上，多级页表就是添加了更多的table entry, 又保持每张页表小一些，不至于16K 64K 256K…这样越来越大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要解释一下为什么要使用页表系统，
构建页表系统需要注意什么，
然后再看一下ARMv5与ARMv7页表格式的区别,
看能不能尽可能把两者的代码统一起来。&lt;/p&gt;
&lt;p&gt;已经熟悉地址翻译的小伙伴可以直接看下一篇，
不玩虚的直接上手！&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 5-System Regs</title>
    <link href="http://silentming.net/blog/2020/01/30/alice-5-system-regs/"/>
    <id>http://silentming.net/blog/2020/01/30/alice-5-system-regs/</id>
    <published>2020-01-30T09:11:06.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>为了配置内存，首先我们要先熟悉一下ARM的系统控制寄存器。除了CPU提供的功能外，ARM提供了16个协处理器(Coprocessor)接口,芯片厂商可以自己外接协处理器来完成更为复杂的功能。</p><p>如果想要使用地址映射，那就需要借助MMU(Memory Management Unit)单元对地址进行翻译。而包含MMU功能在内的诸多系统控制都是要通过Control Coprocessor接口CP15来完成，这也是ARM预留的几个4个协处理接口之一。</p><p>本篇我们主要来看一下ARM访问这些控制寄存器的方式，并简单看一下我们随后要用到的几个控制寄存器。</p><p><a href="https://github.com/SilentAlice/alice-os/tree/c8060eb6b3dfb9d6ca10a7f32a20a1df08422fd6" target="_blank" rel="noopener">Alice-OS: System Register</a></p><a id="more"></a><h2 id="Control-Register-CP15"><a href="#Control-Register-CP15" class="headerlink" title="Control Register CP15"></a>Control Register CP15</h2><p>根据ARM的手册(<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0333h/Bgbhbiah.html" target="_blank" rel="noopener">ARM1176JZ-S TRM</a>)描述:</p><blockquote><p>The processor supports the connection of on-chip coprocessors throughan external coprocessor interface. All types of coprocessor instruction are supported.</p><p>The ARM instruction set supports the connection of 16 coprocessors,numbered 0-15, to an ARM processor.In the processor, the following coprocessor numbers are reserved:</p><ul><li>CP10 VFP control</li><li>CP11 VFP control</li><li>CP14 Debug and ETM control</li><li>CP15 System control.</li></ul><p>You can use CP0-9, CP12, and CP13 for your own external coprocessors.</p></blockquote><p>ARM使用了CP15的接口来实现系统控制的寄存器，访问这些寄存器需要使用特殊的指令:<code>mrc</code>和<code>mcr</code>, 分别对应读和写,访问一个cp15的寄存器格式类似于:</p><pre><code>mrc p15, op1, Rd, CRn, CRm, op2</code></pre><p>关于op1, op2, CRn, CRm我们在查相关寄存器的时候看手册就行,Rd是我们使用的通用寄存器。</p><p>利用GCC内联汇编的语法，参考一下Linux我们可以写出类似的读写:</p><figure class="highlight c"><figcaption><span>sysreg.h</span><a href="https://github.com/SilentAlice/alice-os/blob/c8060eb6b3dfb9d6ca10a7f32a20a1df08422fd6/arch/arm/include/arch/sysreg.h" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sysreg_read32(name, var) do &#123;               \</span></span><br><span class="line">    <span class="keyword">uint32_t</span> __val;                                 \</span><br><span class="line">    asm volatile("mrc p15, " name : "=r" (__val));  \</span><br><span class="line">    var = __val;                                    \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sysreg_write32(name, val) do &#123;              \</span></span><br><span class="line">    <span class="keyword">uint32_t</span> __val = val;                           \</span><br><span class="line">    asm volatile("mcr p15, " name :: "r" (__val) : "cc"); \</span><br><span class="line">    isb();                                          \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>其中name就是系统寄存器的名称，比如我们之后要看的System Control Register (SCTLR)编码就是: <code>#define SCTLR &quot;0, %0, c1, c0, 0&quot;</code>;目的就是将系统寄存器的值读到var中，或将val中的值写到系统寄存器里。</p><h2 id="SCTLR-amp-TTBR"><a href="#SCTLR-amp-TTBR" class="headerlink" title="SCTLR &amp; TTBR"></a>SCTLR &amp; TTBR</h2><p>系统中非常重要的控制寄存器就是SCTLR (在ARMv5中叫Ctrl Register c1),它负责控制系统的各种重要功能: 中断、FIQ、Cache、Alignment Check、MMU使能等等,如果我们想要使能MMU的话，就需要将SCTLR的M (bit<a href="https://github.com/SilentAlice/alice-os/tree/c8060eb6b3dfb9d6ca10a7f32a20a1df08422fd6" target="_blank" rel="noopener">0</a>)置为1。</p><p>TTBR (Translation Table Base Register)顾名思义，就是存放页表基址的寄存器，里面存放有页表的<strong>物理地址</strong>,当我们打开MMU之后，每一次访存操作MMU都会把输入地址作为虚拟地址，从这个寄存器中找到Translation Table,把地址翻译成物理地址后真正的去访存。</p><p>我们可以看一下启动之后这两个寄存器的内容:</p><figure class="highlight c"><figcaption><span>kernel/init.c</span><a href="https://github.com/SilentAlice/alice-os/blob/c8060eb6b3dfb9d6ca10a7f32a20a1df08422fd6/kernel/init.c" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">pa_t</span> kernel_load_address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> val;</span><br><span class="line"></span><br><span class="line">    arch_init();</span><br><span class="line"></span><br><span class="line">    sysreg_read32(SCTLR, val);</span><br><span class="line">    asm volatile("mov r5, %0" : "=r" (val));</span><br><span class="line">    sysreg_read32(TTBR0, val);</span><br><span class="line">    asm volatile("mov r6, %0" : "=r" (val));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">".word 0xdeadbeef"</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TTBR0带个0的原因是ARMv7有两个TTBR, ARMv5只有一个,但是两者的编码是一致的，所以用TTBR0统一起来。置于为什么有两个TTBR,等我们以后用到了再说~</p><p>小伙伴们可以checkout到我开头给的这个commit, 自己验证一下~SCTLR的值放到了r5里面， TTBR0放到了r6里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vexpress-a9 (armv7)</span><br><span class="line">make PLAT=vexpress-a9 qemu-telnet</span><br><span class="line">telnet localhost 1234</span><br><span class="line"></span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=60010000 R01=60013000 R02=60000100 R03=00000000</span><br><span class="line">R04=00000000 R05=00c50078 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=60012ffc</span><br><span class="line">R12=00000000 R13=00000000 R14=60010080 R15=01698c00</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># versatilepb (armv5)</span><br><span class="line">make PLAT=versatilepb qemu-telnet</span><br><span class="line">telnet localhost 1234</span><br><span class="line"></span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=00010000 R01=00013000 R02=00000100 R03=00000000</span><br><span class="line">R04=00000000 R05=00090078 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=00012ffc</span><br><span class="line">R12=00000000 R13=00012fe0 R14=0001004c R15=0001007c</span><br></pre></td></tr></table></figure><p>然后分别对照手册armv7 TRM与arm926ejs_trm查一下两个之间有什么区别。</p><p>vexpress-a9上sctlr是 <code>0x00C50078</code>, versatilepb上是 <code>0x00090078</code>,ttbr则都是0。</p><p>那么接下来我们就要认真研究一下TTBR的格式，来构建我们的页表啦。</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>aarch64上系统寄存器已经不是用cp15访问了，以后我们开始支持aarch64的时候再说~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了配置内存，首先我们要先熟悉一下ARM的系统控制寄存器。
除了CPU提供的功能外，ARM提供了16个协处理器(Coprocessor)接口,
芯片厂商可以自己外接协处理器来完成更为复杂的功能。&lt;/p&gt;
&lt;p&gt;如果想要使用地址映射，那就需要借助MMU(Memory Management Unit)单元对地址进行翻译。
而包含MMU功能在内的诸多系统控制都是要通过Control Coprocessor接口CP15来完成，
这也是ARM预留的几个4个协处理接口之一。&lt;/p&gt;
&lt;p&gt;本篇我们主要来看一下ARM访问这些控制寄存器的方式，
并简单看一下我们随后要用到的几个控制寄存器。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/c8060eb6b3dfb9d6ca10a7f32a20a1df08422fd6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: System Register&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 4-File Structure</title>
    <link href="http://silentming.net/blog/2020/01/29/alice-4-file-structure/"/>
    <id>http://silentming.net/blog/2020/01/29/alice-4-file-structure/</id>
    <published>2020-01-29T14:19:51.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>在开始内存映射之前，我们暂且小憩一下，聊一聊比较玄学的问题: 目录结构。之所以这个单拎出来讲是因为在工作中发现许多专业的开发人员对目录结构都不以为意，即使是有好多年开发经验的人目录结构也可能是一团糟。</p><p>但是一个好的目录结构对于构建的效率、代码的可维护性是极为重要的，所以本篇来说一下我们的Alice OS准备采用的目录结构。</p><p><a href="https://github.com/SilentAlice/alice-os/tree/89fa5e265dfa77290d481d4a8e4d9b110dcadcd5" target="_blank" rel="noopener">Alice-OS: File Structure</a></p><a id="more"></a><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>大体上来说，我们希望在kernel的C文件中只用关心kernel的东西，将arch、plat相关的东西都放到头文件中隐藏掉，一级级抽象上来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[0] % tree</span><br><span class="line">.</span><br><span class="line">├── arch</span><br><span class="line">│   └── arm</span><br><span class="line">│       ├── build.mk</span><br><span class="line">│       ├── config.mk</span><br><span class="line">│       └── include</span><br><span class="line">│           └── arch</span><br><span class="line">│               ├── memory.h</span><br><span class="line">│               └── type.h</span><br><span class="line">├── kernel</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   └── alice</span><br><span class="line">│   │       ├── memory.h</span><br><span class="line">│   │       └── type.h</span><br><span class="line">│   └── init.c</span><br><span class="line">│</span><br><span class="line">└── plat</span><br><span class="line">    ├── versatilepb</span><br><span class="line">    │   ├── include</span><br><span class="line">    │   │   └── plat</span><br><span class="line">    │   │       └── memory.h</span><br><span class="line">    └── vexpress-a9</span><br><span class="line">        └── include</span><br><span class="line">            └── plat</span><br><span class="line">                └── memory.h</span><br></pre></td></tr></table></figure><ul><li>plat 里面存放的是跟各个平台紧相关的内容，包含kernel的起始地址、各种外设的物理地址等等;</li><li>arch 存放的是跟体系结构相关的内容，比如像各种<code>uint32_t</code>、<code>uint64_t</code>的typedef等等，这种就是跟体系结构相关的，所以我们把这些内容放到arch目录下;</li><li>kernel 中的内容就是跟体系结构也不相关的内容了;</li></ul><p>在include头文件时，<code>arch/include</code>会include <code>plat/include</code>目录下的头文件，<code>kernel/include</code>会include<code>arch/include</code>目录下的头文件。</p><p>我们将 plat, arch 与 kernel依次规定为下-&gt;上，最上层的kernel视为最高抽象。</p><p>那么每一级<code>include</code>下存在的头文件，都只能include本级以及下一级的头文件:</p><pre><code>/* kernel/include/alice/memory.h */#include &lt;arch/memory.h&gt;/* arch/arm/include/arch/memory.h */#include &lt;plat/memory.h&gt;</code></pre><p>这样我们就能一层层在头文件中把细节给抽象掉。</p><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p>如果说头文件是抽象过程，那么源文件就是对抽象的使用，也因此更具体的源文件是可以使用更抽象的内容的。具体来说，上图中 <code>arch/init.c</code> 就可以include <code>kernel/include</code> 与 <code>arch/include</code>。</p><p>这是因为对于体系结构这一更具象的内容来说，kernel层面的东西更为抽象，所以体系结构可以使用更抽象的kernel中定义的方法和常量，因为Kernel定义的内容必然更为通用。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>可以发现我在include目录下又添加了 arch/plat/alice 的目录，看起来有些冗余，其实主要目的就是让我们能在代码里通过</p><pre><code>#include &lt;arch/xxx.h&gt;#include &lt;plat/xxx.h&gt;#include &lt;alice/xxx.h&gt;</code></pre><p>这种明显的方式知道使用的哪一级的头文件，也允许了不同抽象级头文件的重名。</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>后续当我们的代码慢慢变多之后，还会有driver、lib、uapi等等，但是无论我们添加什么目录或者组件，我们的核心思想都是保证抽象的东西只使用抽象的东西，我们和具体体系结构无关的代码就只关心逻辑，这样才能使得代码有更好的可移植性。</p><p>当然这个目录结构也是我个人习惯啦，只要目录结构方便扩展、移植就完全OK.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开始内存映射之前，我们暂且小憩一下，
聊一聊比较玄学的问题: 目录结构。
之所以这个单拎出来讲是因为在工作中发现许多专业的开发人员对目录结构都不以为意，
即使是有好多年开发经验的人目录结构也可能是一团糟。&lt;/p&gt;
&lt;p&gt;但是一个好的目录结构对于构建的效率、代码的可维护性是极为重要的，
所以本篇来说一下我们的Alice OS准备采用的目录结构。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/89fa5e265dfa77290d481d4a8e4d9b110dcadcd5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: File Structure&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 3-Init Stack</title>
    <link href="http://silentming.net/blog/2020/01/29/alice-3-init-stack/"/>
    <id>http://silentming.net/blog/2020/01/29/alice-3-init-stack/</id>
    <published>2020-01-29T11:42:01.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>在上一次我们已经知道了内核实际的加载地址在不同平台上是不同的，本篇我们来设置一个启动的栈，并进入C代码的初始化流程,同时考虑如何将这不同的加载地址告诉后续的启动代码。</p><p><a href="https://github.com/SilentAlice/alice-os/tree/45c2f3581eca85d7a15261ea335dc106cffa8cd1" target="_blank" rel="noopener">Alice-OS: Init Stack</a></p><a id="more"></a><h2 id="AT-Keyworkd"><a href="#AT-Keyworkd" class="headerlink" title="AT Keyworkd"></a><code>AT</code> Keyworkd</h2><p>我首先给不同的Plat里面添加了各自的linker.ld,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># alice-os/plat/vexpress-a9/linker.ld</span><br><span class="line"></span><br><span class="line">kernel_start_address = 0x80000000;</span><br><span class="line">kernel_load_address = 0x60010000;</span><br></pre></td></tr></table></figure><p>并在<strong><em>alice.ld</em></strong>中include了它们:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># alice.ld</span><br><span class="line"></span><br><span class="line">INCLUDE linker.ld</span><br><span class="line"></span><br><span class="line">ENTRY(entry)</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">. = kernel_start_address;</span><br><span class="line"></span><br><span class="line">.text : AT(kernel_load_address) &#123; *(.text) &#125;</span><br><span class="line">PROVIDE(etext = .);</span><br></pre></td></tr></table></figure><p>每个plat自己指定内核的启动虚拟地址和加载的物理地址，我们这里没有用到AT, 因为linker script输出是按照<strong>output section address</strong>来的，但是AT告诉了Linker这个镜像实际加载的地址，但是一些程序loader如果使用这个linker script的话就知道到哪里去找实际的代码了;</p><p>在linker script的官方说明里也列举了这样的一个demo:</p><figure class="highlight plain"><figcaption><span>demo script</span><a href="https://sourceware.org/binutils/docs-2.33.1/ld/Output-Section-LMA.html" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">  .text 0x1000 : &#123; *(.text) _etext = . ; &#125;</span><br><span class="line">  .mdata 0x2000 :</span><br><span class="line">    AT ( ADDR (.text) + SIZEOF (.text) )</span><br><span class="line">    &#123; _data = . ; *(.data); _edata = . ;  &#125;</span><br><span class="line">  .bss 0x3000 :</span><br><span class="line">    &#123; _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Loader发现AT指明了数据段(.mdata)实际上是在代码段(.text)的后面，但是生成的虚拟地址是在0x2000时，Loader就可能采用如下方式去把数据放到正确的位置上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extern char _etext, _data, _edata, _bstart, _bend;</span><br><span class="line">char *src = &amp;_etext;</span><br><span class="line">char *dst = &amp;_data;</span><br><span class="line"></span><br><span class="line">/* ROM has data at end of text; copy it.  */</span><br><span class="line">while (dst &lt; &amp;_edata)</span><br><span class="line">  *dst++ = *src++;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过这种方式将data放到真正的地址上.</p><p>我们的内核也是一样，如果我们查看反汇编会发现，我们的代码也是从<code>0x80000000</code>开始的，但是实际上启动的地址却是 <code>0x60010000</code>。</p><p>所以如果我们想让代码后面能正常运行，正常找到各种symbol，就需要把整个alice.bin从0x6001000 copy到 0x80000000;不过好在我们的CPU是可以使用虚拟地址进行映射的，所以才避免了这种copy。</p><h2 id="Init-Stack"><a href="#Init-Stack" class="headerlink" title="Init Stack"></a>Init Stack</h2><p>我们在上一篇中强行把当前的PC对齐到4K,然后自己加了0x2000作为栈底。这样显然是有风险的，如果启动代码过多超过了一个4K页，那我们的这种计算就会出错。</p><p>由于我们现在知道了启动的时候可以通过PC获取启动地址，又知道了生成的栈地址，所以我们可以用Addr(栈) - 0x80000000 + Addr(Load_Start)来获取真正的栈地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.global entry</span><br><span class="line">entry:</span><br><span class="line">    # get load address</span><br><span class="line">    mov r0, pc</span><br><span class="line">    sub r0, r0, #8</span><br><span class="line"></span><br><span class="line">    # calculate real stack address</span><br><span class="line">    ldr r1, =#kernel_stack_start</span><br><span class="line">    sub r1, r1, #KERNEL_START_ADDRESS</span><br><span class="line">    add r1, r1, r0</span><br><span class="line"></span><br><span class="line">    # set stack</span><br><span class="line">    mov sp, r1</span><br><span class="line"></span><br><span class="line">    # r0 is load address</span><br><span class="line">    bl init</span><br></pre></td></tr></table></figure><p>通过这种方式我们就可以正确的计算出栈的物理地址并赋到sp中，当我们的栈初始化好了之后，就可以调用其他的函数了，通过<code>bl</code>我们可以直接跳到C代码。</p><h2 id="Function-Frame"><a href="#Function-Frame" class="headerlink" title="Function Frame"></a>Function Frame</h2><p>当发生函数调用时，apcs的calling convention会对函数生成一个栈帧(Frame),存放栈帧的寄存器在<a href="http://silentming.net/blog/2020/01/28/alice-1-first-commit/">Alice OS 1</a>中也说过，是寄存器R11 (FP Frame Pointer)负责保存。</p><p>我们来查看一下生成的<strong><em> alice.dump.asm </em></strong>观察一下arm的栈帧:</p><pre><code>80000000 &lt;entry&gt;:80000000:  e1a0000f   mov   r0, pc80000004:  e2400008   sub   r0, r0, #880000008:  e59f100c   ldr   r1, [pc, #12]   ; 8000001c &lt;kernel_start_addr    ess+0x1c&gt;8000000c:  e2411102   sub   r1, r1, #-2147483648    ; 0x8000000080000010:  e0811000   add   r1, r1, r080000014:  e1a0d001   mov   sp, r180000018:  eb000000   bl    80000020 &lt;init&gt;8000001c:  80002000   andhi r2, r0, r080000020 &lt;init&gt;:80000020:  e1a0c00d   mov   ip, sp80000024:  e92dd800   push  {fp, ip, lr, pc}80000028:  e24cb004   sub   fp, ip, #48000002c:  e24dd008   sub   sp, sp, #880000030:  e50b0010   str   r0, [fp, #-16]80000034:  deadbeef   cdple 14, 10, cr11, cr13, cr15, {7}80000038:  e320f000   nop   {0}8000003c:  e24bd00c   sub   sp, fp, #1280000040:  e89da800   ldm   sp, {fp, sp, pc}</code></pre><p>我们来看一下当<code>init</code>被调用时首先做了什么:我们发现当有函数调用时，arm和x86类似，会首先将原来的sp放到ip中，保存当前的fp, ip(原来的sp), lr, pc 到栈上。之后将原来的sp - 4存放到fp里面;所以现在fp就指向了当前函数栈的<strong>栈底</strong>，sp由于push的原因指向了当前栈的<strong>栈顶</strong>。</p><p>我们可以利用monitor来验证一下: (0x80000038行是我们的<code>0xdeadbeef</code>,会导致程序挂在这里)</p><pre><code>[0] % telnet localhost 1234Trying 127.0.0.1...Connected to localhost.Escape character is &apos;^]&apos;.QEMU 4.2.0 monitor - type &apos;help&apos; for more information(qemu) info registersR00=60010000 R01=60012000 R02=60000100 R03=00000000R04=00000000 R05=00000000 R06=00000000 R07=00000000R08=00000000 R09=00000000 R10=00000000 R11=60011ffcR12=60012000 R13=00000000 R14=60010038 R15=026f7c00(qemu) x /4x 0x60011ff060011ff0: 0x00000000 0x60012000 0x6001001c 0x6001002c</code></pre><p>我们查看一下Push的值: (<code>push {fp, ip, lr, pc}</code>)</p><p>可以看到，R11(FP)指向当前栈底(0x60011ffc)，R12(IP)根据上面的反汇编，存的就是之前的栈顶(0x60012000). 而LR指向了0x6001001c;</p><p>我们现在看一下<code>entry</code>在<code>bl</code>到<code>init</code>后的下一条指令(0x8000001c),正是init如果返回的话应该执行的地址! (换算成Load Address)</p><p>所以总结一下:</p><ul><li>ARM在函数调用时会产生栈帧，所以如果我们一上来要call C代码的话就要初始化栈;</li><li>ARM的栈结构如下:</li></ul><table><thead><tr><th style="text-align:left">Pointer</th><th style="text-align:left">Content</th><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:left">IP(old SP)-&gt;</td><td style="text-align:left">Prev Stack Content</td><td style="text-align:left">前一个函数的栈</td></tr><tr><td style="text-align:left">FP-&gt;</td><td style="text-align:left">pc</td><td style="text-align:left">Curr Stack Bottom</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">lr</td><td style="text-align:left">Return Address</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">old sp</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">SP-&gt;</td><td style="text-align:left">old fp</td><td style="text-align:left">-</td></tr></tbody></table><p>而当init执行完毕时, arm会首先利用fp(当前栈底) - #12移动sp到栈顶,之后恢复fp, sp, pc.</p><p>这里我们注意一下,<code>ldm   sp, {fp, sp, pc}</code>依次将old fp, old sp, return address; 恢复到fp, sp 和 pc中。</p><p>控制流跳回，sp恢复，fp恢复，函数调用完毕。</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>现在我们已经可以运行C代码了，但是我们当前的代码还是无法获取data，data实际都在0x60010000往后的地址里，而生成的代码是按0x80000000计算的。所以接下来我们就要想办法让物理地址0x60010000映射到0x80000000这个虚拟地址上。 </p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>当前这个栈帧之所以如此明显是因为我们没有打开编译器的优化，如果打开优化之后看到的就不一定是这样了~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一次我们已经知道了内核实际的加载地址在不同平台上是不同的，
本篇我们来设置一个启动的栈，并进入C代码的初始化流程,
同时考虑如何将这不同的加载地址告诉后续的启动代码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/45c2f3581eca85d7a15261ea335dc106cffa8cd1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: Init Stack&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 2-Load Address</title>
    <link href="http://silentming.net/blog/2020/01/29/alice-2-load-address/"/>
    <id>http://silentming.net/blog/2020/01/29/alice-2-load-address/</id>
    <published>2020-01-28T17:01:03.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便不同平台的演示，这次我们添加一个新的平台，是ARM versatilepb 平台的<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ddi0198e/DDI0198E_arm926ejs_r0p5_trm.pdf" target="_blank" rel="noopener">arm926ej-s</a>处理器,这是一款比较老的ARM处理器 CPU是A9系列的ARM926EJ-S, ARMv5TE架构;我们来看看这个CPU起始的地址，并且考虑如何给我们的Alice OS初始化一个临时的栈~</p><p><a href="https://github.com/SilentAlice/alice-os/tree/521074dd49a8b329d7c87d6540d3fc445618274a" target="_blank" rel="noopener">Alice-OS: Load Address</a></p><a id="more"></a><h2 id="Versatilepb-amp-ARM926EJ-S"><a href="#Versatilepb-amp-ARM926EJ-S" class="headerlink" title="Versatilepb &amp; ARM926EJ-S"></a>Versatilepb &amp; ARM926EJ-S</h2><p>我们仿照vexpress-a9建一个新的平台，并用类似的方式看看启动之后的LR地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Another shell:</span><br><span class="line">alice@MacAlice ‹ 521074d ↑●● › : ~/Codes/alice-os</span><br><span class="line">make PLAT=versatilepb qemu-telnet</span><br><span class="line"></span><br><span class="line">alice@MacAlice ‹ 521074d ↑●● › : ~/Codes/alice-os</span><br><span class="line">[0] % telnet localhost 1234</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">QEMU 4.2.0 monitor - type &apos;help&apos; for more information</span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=000000a3 R01=00000183 R02=00000100 R03=00000000</span><br><span class="line">R04=00000000 R05=00000000 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=00000000</span><br><span class="line">R12=00000000 R13=00000000 R14=00010008 R15=00010004</span><br></pre></td></tr></table></figure><p>可以发现，这次的LR (R14)是0x10008了, 说明启动是从0x10000开始执行的,</p><p>所以我们现在知道, vexpress-a9是从0x60010000开始执行,而versatilepb是从0x00010000开始执行的</p><p>接下来让我们给他们都给一个初始的栈吧</p><h2 id="Init-Stack"><a href="#Init-Stack" class="headerlink" title="Init Stack"></a>Init Stack</h2><p>我们在汇编里面声明一段空间，并把它当做我们的内核栈:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.global entry</span><br><span class="line">entry:</span><br><span class="line">    mov r0, pc</span><br><span class="line">    # R5 save PC</span><br><span class="line">    mov r5, r0</span><br><span class="line"></span><br><span class="line">    # make r0 4k aligned</span><br><span class="line">    mov r0, pc</span><br><span class="line">    bic r0, r0, #0xFF0</span><br><span class="line">    bic r0, r0, #0xF</span><br><span class="line"></span><br><span class="line">    # This is the .L_stack_start</span><br><span class="line">    add r0, #0x2000</span><br><span class="line">    mov sp, r0</span><br><span class="line">    ldr r1, =.L_stack_start</span><br><span class="line">    ldr r2, =#kernel_stack_start</span><br><span class="line">    mov r3, sp</span><br><span class="line">    push &#123;r0&#125;</span><br><span class="line">    mov r4, sp</span><br><span class="line">    .word 0xdeadbeef</span><br><span class="line"></span><br><span class="line">    .align</span><br><span class="line">    .section &quot;.stack&quot;, &quot;aw&quot;</span><br><span class="line">.L_stack: .space 4096</span><br><span class="line">.L_stack_start:</span><br></pre></td></tr></table></figure><p>我们在代码段的最下面声明一个4K大小的空间，并将它连接到”.stack”段里面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.bss : &#123; *(.bss COMMON) &#125;</span><br><span class="line">. = ALIGN(4096);</span><br><span class="line"></span><br><span class="line">.stack : &#123;</span><br><span class="line">        *(.stack);</span><br><span class="line">&#125;</span><br><span class="line">kernel_stack_start = .;</span><br></pre></td></tr></table></figure><p>我们可以看一下，r0到r5里面的值都是多少:</p><ul><li>r0是我们计算出来并赋值给sp的栈;</li><li>r1是直接加载<code>.L_stack_start</code>这个tag得到的地址;</li><li>r2是从linker script中取得的<code>kernel_stack_start</code>这个symbol地址;</li><li>r3是赋值之后的sp;</li><li>r4是push一次之后的sp;</li><li>r5是程序一开始的PC;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alice@MacAlice ‹ 521074d ●● › : ~/Codes/alice-os</span><br><span class="line">[0] % telnet localhost 1234</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">QEMU 4.2.0 monitor - type &apos;help&apos; for more information</span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=60012000 R01=80002000 R02=80002000 R03=60012000</span><br><span class="line">R04=60011ffc R05=60010008 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=00000000</span><br><span class="line">R12=00000000 R13=00000000 R14=60010034 R15=016a8000</span><br><span class="line">PSR=400001db -Z-- A S und32</span><br><span class="line"></span><br><span class="line">(qemu) x /x 0x60011ffc</span><br><span class="line">60011ffc: 0x60012000</span><br></pre></td></tr></table></figure><p>我们计算栈的方式是这样:假设启动这部分代码最长不超过4K大小, 那我空4K出来将当前PC后12位清零，加上两个4K页就是我的栈底。</p><p>但是我们直接Load Symbol会发现, 无论是tag还是从linker script取出来的地址都是0x80002000。这是由于我们linker一开始给的其实地址是80002000,导致我们的栈变成了这样。</p><p>但是至少我们了解了，代码开始往后2个页就是栈底，所以我们使用0x60012000作为栈底是没有问题的!</p><p>通过 x 命令我们也看到了，push一次之后，栈里确实存了我们要的数据。</p><p>那么接下来，我们就考虑如何更优雅并且正确的设置栈，尽快从汇编跳到C代码吧!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便不同平台的演示，这次我们添加一个新的平台，
是ARM versatilepb 平台的&lt;a href=&quot;http://infocenter.arm.com/help/topic/com.arm.doc.ddi0198e/DDI0198E_arm926ejs_r0p5_trm.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arm926ej-s&lt;/a&gt;处理器,
这是一款比较老的ARM处理器 CPU是A9系列的ARM926EJ-S, ARMv5TE架构;
我们来看看这个CPU起始的地址，并且考虑如何给我们的Alice OS初始化一个临时的栈~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/521074dd49a8b329d7c87d6540d3fc445618274a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: Load Address&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 1-First Commit</title>
    <link href="http://silentming.net/blog/2020/01/28/alice-1-first-commit/"/>
    <id>http://silentming.net/blog/2020/01/28/alice-1-first-commit/</id>
    <published>2020-01-28T09:56:43.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我们主要来看一下第一个Commit里面的<code>Makefile</code>, <code>alice.ld</code>以及最开始代码<code>startup.S</code>.</p><p>这里会介绍一下查看反汇编的方法以及写ARM汇编的小技巧。</p><p><a href="https://github.com/SilentAlice/alice-os/tree/9d021c0ca4d7a520aa3017108d5906d1661e9bb4" target="_blank" rel="noopener">Alice-OS: First Commit</a></p><a id="more"></a><h2 id="Makefile-amp-Monitor"><a href="#Makefile-amp-Monitor" class="headerlink" title="Makefile &amp; Monitor"></a>Makefile &amp; Monitor</h2><p>我这里使用了Makefile来进行构建，关于Makefile的教程有很多,由于我也不准备构建多复杂的系统，所以Makefile写的会比较简单。这里给两个链接以供参考:</p><ul><li><a href="http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/" target="_blank" rel="noopener">A Simple Makefile Tutorial</a></li><li><a href="https://www.tutorialspoint.com/makefile/index.htm" target="_blank" rel="noopener">Unix Makefile Tutorial</a></li></ul><p>里面的规则等等都比较简单，这里主要说一下启动Qemu的一些区别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qemu: $(OS).bin</span><br><span class="line">qemu-system-arm $(QEMU_FLAGS) -kernel $(OS).bin</span><br><span class="line"></span><br><span class="line">qemu-gdb: $(OS).bin</span><br><span class="line">qemu-system-arm $(QEMU_FLAGS) -gdb tcp::1234 -S -kernel $(OS).bin</span><br><span class="line"></span><br><span class="line">qemu-telnet: $(OS).bin</span><br><span class="line">qemu-system-arm $(QEMU_FLAGS) \</span><br><span class="line">    -monitor telnet:127.0.0.1:1234,server,nowait -kernel $(OS).bin</span><br></pre></td></tr></table></figure><p><code>make qemu</code> 会直接编译并运行，<code>make qemu-gdb</code>和<code>make qemu-telnet</code>则分别让qemu将1234端口开放给gdb与telnet;</p><p><a href="http://people.redhat.com/pbonzini/qemu-test-doc/_build/html/topics/pcsys_005fmonitor.html" target="_blank" rel="noopener">QEMU Monitor</a>可以让我们在系统挂住的时候查看一些寄存器的状态<code>nowait</code>的作用是为了让QEMU在monitor连上之前自己也会往下跑，因为我们主要是为了查看最后系统hung住时的寄存器状态.</p><p>GDB的使用我们以后再说~</p><h2 id="Link-Script"><a href="#Link-Script" class="headerlink" title="Link Script"></a>Link Script</h2><p>链接脚本的语法讲解网上也非常多，这里提供一个链接供参考:<a href="https://wiki.osdev.org/Linker_Scripts" target="_blank" rel="noopener">Linker Script</a>.</p><p>这里主要看一下我们的地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(entry)</span><br><span class="line">start_address = 0x0;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    . = 0x80000000 + start_address;</span><br><span class="line"></span><br><span class="line">    .text : AT(start_address) &#123; *(.text) &#125;</span><br><span class="line">    PROVIDE(etext = .);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    .stack : &#123;</span><br><span class="line">        *(.stack);</span><br><span class="line">    &#125;</span><br><span class="line">    kernel_stack_start = .;</span><br><span class="line"></span><br><span class="line">    PROVIDE(kernel_end = .);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我后面打算让Kernel从 <code>0x80000000</code>开始映射，所以把kernel最开始的代码放到了<code>0x80000000</code>地址上，这里引入一个<code>start_address</code>的原因是因为不同的平台会默认让系统从不同的地址启动.为了让后面映射地址时方便计算而引入的。</p><p>也就是说，当我们的<strong>虚拟地址映射建立好</strong>之后,内核的第一行代码应该是从<code>0x80000000 + start_address</code>开始的。</p><h2 id="Bin-amp-Elf"><a href="#Bin-amp-Elf" class="headerlink" title="Bin &amp; Elf"></a>Bin &amp; Elf</h2><p>接下来就是我们的第一行代码了，ARM平台上当内核镜像被放到内存中之后，CPU会从加载的第一条指令直接开始执行。这也就要求我们编译完内核镜像后去掉开头的elf header;</p><p>我们用gcc编译完的镜像本身是elf格式的，这个格式有一个header:</p><pre><code>xxd alice.bin &gt; alice.bin.dumpxxd alice.elf &gt; alice.elf.dump</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* alice.bin.dump */</span><br><span class="line">  00000000: 3302 00e3 efbe adde 0000                 3.........</span><br><span class="line"></span><br><span class="line">/* alice.dump.asm */</span><br><span class="line">80000000 &lt;entry&gt;:</span><br><span class="line">80000000:       e3000233        movw    r0, #563        ; 0x233</span><br><span class="line">80000004:       deadbeef        cdple   14, 10, cr11, cr13, cr15, &#123;7&#125;</span><br></pre></td></tr></table></figure><p>用<code>xxd</code>查看16进制，会发现alice.bin的内容也就是我们内核实际的内容非常简单,开头的 <code>3302</code> 就是我们的 <code>0x233</code>的小端写法，与我们的反汇编一致，开头就是指令;</p><p>那么alice.elf.dump呢？</p><pre><code>...4096 0000fff0: 0000 0000 0000 0000 0000 0000 0000 0000  ................4097 00010000: 3302 00e3 efbe adde 0000 4126 0000 0061  3.........A&amp;...a4098 00010010: 6561 6269 0001 1c00 0000 0543 6f72 7465  eabi.......Corte4099 00010020: 782d 4139 0006 0a07 4108 0109 022a 0144  x-A9....A....*.D...</code></pre><p>发现我们的代码<code>3302 00e3</code>是从第二个页(4097)开始的, 第一个页是elf自己加的东西;在后面也还有一些跟体系结构相关的东西(Cortex-A9). 所以elf文件本身有自己的格式,但是ARM设备是从第一条指令直接执行的, 所以我们要用objcopy把我们要的东西从elf文件里面copy出来!</p><p>再次看makefile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">$(OS).bin: $(OBJS) $(OS).ld</span><br><span class="line">    $(LD) -T $(OS).ld $(OBJS) -o $(OS).elf</span><br><span class="line">    $(OBJCOPY) -O binary $(OS).elf $(OS).bin</span><br><span class="line">    $(OBJDUMP) -D $(OS).elf &gt; $(OS).dump.asm</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到, 我们的alice.bin实际上就是<code>arm-none-eabi-objcopy -O binary alice.elf alice.bin</code>生成的.但是我们的objdump又需要用到elf格式，这样它才认识里面的debug symbol,才能生成方便我们调试的反汇编。</p><h2 id="First-Instruction"><a href="#First-Instruction" class="headerlink" title="First Instruction"></a>First Instruction</h2><p>现在终于可以来看看我们的第一条指令了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.global entry</span><br><span class="line">entry:</span><br><span class="line">    mov r0, #0x233</span><br><span class="line">    .word 0xdeadbeef</span><br></pre></td></tr></table></figure><p>内容非常简单，就是把0x233放到r0里面，这里<code>.word 0xdeadbeef</code>就是在代码段里面插入一个错误的指令，当CPU执行完<code>mov r0, #0x233</code>后就会尝试解析<code>0xdeadbeef</code>,由于解析失败，所以就会卡在这里。</p><h2 id="Register-Info"><a href="#Register-Info" class="headerlink" title="Register Info"></a>Register Info</h2><p>使用 <code>make qemu-telnet</code> 并且在另一个shell连上, 我们来看一下寄存器信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">alice@MacAlice ‹ 9d021c0 › : ~/Codes/alice-os</span><br><span class="line">[0] % telnet localhost 1234</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">QEMU 4.2.0 monitor - type &apos;help&apos; for more information</span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=00000233 R01=000008e0 R02=60000100 R03=00000000</span><br><span class="line">R04=00000000 R05=00000000 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=00000000</span><br><span class="line">R12=00000000 R13=00000000 R14=60010008 R15=0eb25134</span><br><span class="line">PSR=400001db -Z-- A S und32</span><br></pre></td></tr></table></figure><p><code>R0</code>和我们想的一样，内容就是233, 启动寄存器这里也一并介绍一下:</p><table><thead><tr><th style="text-align:left">Reg</th><th style="text-align:left">Alias</th><th style="text-align:left">Purpose</th></tr></thead><tbody><tr><td style="text-align:left">R0 - R3</td><td style="text-align:left">-</td><td style="text-align:left">Caller Saved General Purpose</td></tr><tr><td style="text-align:left">R4 - R8</td><td style="text-align:left">-</td><td style="text-align:left">Callee Saved General Purpose</td></tr><tr><td style="text-align:left">R9</td><td style="text-align:left">-</td><td style="text-align:left">Might Callee Saved General Purpose</td></tr><tr><td style="text-align:left">R10</td><td style="text-align:left">-</td><td style="text-align:left">Callee Saved General Purpose</td></tr><tr><td style="text-align:left">R11</td><td style="text-align:left">FP</td><td style="text-align:left">Frame Pointer / Callee Saved General Purpose</td></tr><tr><td style="text-align:left">R12</td><td style="text-align:left">IP</td><td style="text-align:left">Intra Procedural Call (Used by Dynamic Link)</td></tr><tr><td style="text-align:left">R13</td><td style="text-align:left">SP</td><td style="text-align:left">Stack Pointer</td></tr><tr><td style="text-align:left">R14</td><td style="text-align:left">LR</td><td style="text-align:left">Link Register (Save Return Address)</td></tr><tr><td style="text-align:left">R15</td><td style="text-align:left">PC</td><td style="text-align:left">Program Counter</td></tr><tr><td style="text-align:left">PSR</td><td style="text-align:left">-</td><td style="text-align:left">Program Status Register</td></tr></tbody></table><p>Caller / Callee 相关的可以看一下aapcs calling convention.主要是说函数调用时, r0-r3我们可以随便用;R13是我们的栈, R14存的返回地址, R15是是PC.</p><p>但是我们发现，本应该存返回地址的R14里面存的是什么呢:<code>0x60010008</code>也就是说，现在CPU认为我们之前是从60010008跑到了异常的地方.(我们执行了0xdeadbeef, CPU会产生异常，PC会变,由于现在还没设置异常向量表，所以跳到了一个奇怪的地址: <code>0xeb25134</code>.同时LR保存之前PC的地址: <code>0x60010008</code>).</p><p>这也就是说我们的系统一开始是从 <code>0x60010000</code> 开始运行的?!</p><p>下一次我们来验证一下我们的猜想!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇我们主要来看一下第一个Commit里面的&lt;code&gt;Makefile&lt;/code&gt;, &lt;code&gt;alice.ld&lt;/code&gt;
以及最开始代码&lt;code&gt;startup.S&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这里会介绍一下查看反汇编的方法以及写ARM汇编的小技巧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentAlice/alice-os/tree/9d021c0ca4d7a520aa3017108d5906d1661e9bb4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alice-OS: First Commit&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>Alice OS 0-Preparation</title>
    <link href="http://silentming.net/blog/2020/01/27/alice-0-environment/"/>
    <id>http://silentming.net/blog/2020/01/27/alice-0-environment/</id>
    <published>2020-01-27T08:00:12.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>许多学习OS的小伙伴最终也只是停留在买一本翻了一半的《操作系统原理》、一个下下来没看几眼的Linux源码，和一个甚至都没怎么跑起来过的Qemu。</p><p>关于OS最有名的课程就是MIT的<a href="https://pdos.csail.mit.edu/6.828" target="_blank" rel="noopener">6.828 Operating System Engineering</a>课程，课程讲解xv6，并附有一个难度颇高的JOS操作系统实验。即使是一个专业的计算机学生、全程跟着上这门课在做这门Lab的时候也会遇到遇到非常多的困难和阻力，操作系统本身的高难度门槛、不便的调试环境、和狭窄的就业方向使得有兴趣的小伙伴也往往绊倒在学习的路上。</p><p>本系列博客旨在从0构建一个用于我演示各种Demo的小小小OS: Alice OS;由于x86硬件的复杂性，为了简化，我会从arm，使用Qemu去构建Alice OS。</p><p>希望能对OS的一些概念进行一些解释，辅助小伙伴们的学习，也是对自己在ARM的近两年开发进行一些点滴总结。若有本人理解不对的地方，欢迎指摘。</p><a id="more"></a><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>首先安装我们所需的工具链和qemu:</p><p>Linux:</p><pre><code>sudo apt install binutils-arm-none-eabisudo apt install gcc-arm-none-eabisudo apt install qemu</code></pre><p>MacOS:</p><pre><code>brew tap PX4/homebrew-px4brew install gcc-arm-none-eabibrew install qemu</code></pre><p>安装完后，就可以查看一下有没有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">alice@MacAlice : ~/Codes/temp</span><br><span class="line">[0] % arm-none-eabi-gcc --version</span><br><span class="line">arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 7-2018-q2-update) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907]</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alice@MacAlice : ~/Codes/temp</span><br><span class="line">[0] % qemu-system-arm --version</span><br><span class="line">QEMU emulator version 4.2.0</span><br><span class="line">Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><h2 id="Manuals"><a href="#Manuals" class="headerlink" title="Manuals"></a>Manuals</h2><p>刚开始构建的时候，与其说是OS，不如说更像是一个bare-metal的app, 所以可以参考一下ARM上 Bare-metal的写法:</p><ul><li><a href="http://umanovskis.se/files/arm-baremetal-ebook.pdf" target="_blank" rel="noopener">Bare-metal programming for ARM</a></li><li><a href="https://github.com/umanovskis/baremetal-arm/" target="_blank" rel="noopener">https://github.com/umanovskis/baremetal-arm/</a></li><li>一个模仿JOS的ARM上的OS: <a href="https://github.com/pykello/arunos" target="_blank" rel="noopener">Arunos</a></li></ul><p>JOS和MIT 6.828课程相关的链接:</p><ul><li><a href="https://pdos.csail.mit.edu/6.828" target="_blank" rel="noopener">6.828 Operating System Engineering</a></li><li>SJTU的ICS课程<a href="https://ipads.se.sjtu.edu.cn/courses/ics/" target="_blank" rel="noopener">Introduction to Computer Systems</a></li></ul><p>后续开发需要用的一些手册:</p><ul><li><a href="https://static.docs.arm.com/ddi0406/c/DDI0406C_C_arm_architecture_reference_manual.pdf" target="_blank" rel="noopener">ARM® Architecture Reference Manual ARMv7-A and ARMv7-R edition</a></li><li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0068b/DUI0068.pdf" target="_blank" rel="noopener">ARM® Developer Suite Version 1.2</a></li><li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.ddi0407g/DDI0407G_cortex_a9_mpcore_r3p0_trm.pdf" target="_blank" rel="noopener">CortexTM-A9 MPCore® Technical Reference Manual</a></li><li><a href="https://github.com/qemu/qemu/blob/master/hw/arm/vexpress.c" target="_blank" rel="noopener">Versatile Express motherboard Address Map on QEMU</a></li></ul><p>由于我们默认使用的Cortex-A9的核是ARMv7的，所以需要相关手册; QEMU模拟的Vexpress板子的文档直接看qemu的代码就行,在编写过程中会用到一些ARM汇编，所以备一本汇编手册。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>那么首先我们先搞个工程出来吧:</p><p><a href="https://github.com/SilentAlice/alice-os/tree/9d021c0ca4d7a520aa3017108d5906d1661e9bb4" target="_blank" rel="noopener">Alice-OS: First Commit</a></p><p>这个是最开始的小工程，下一篇我们看一下Makefile和link script, 这次先说一下我们调试的方式:</p><p>进到git clone下来的代码仓，切到<code>9d021c0</code>这个commit之后执行 make qemu-telnet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alice@MacAlice ‹ 9d021c0 › : ~/Codes/alice-os</span><br><span class="line">[0] % make qemu-telnet</span><br><span class="line">arm-none-eabi-gcc -mcpu=cortex-a9 -g   -c -o kernel/startup.o kernel/startup.S</span><br><span class="line">arm-none-eabi-ld -T alice.ld  kernel/startup.o -o alice.elf</span><br><span class="line">arm-none-eabi-objcopy -O binary alice.elf alice.bin</span><br><span class="line">arm-none-eabi-objdump -D alice.elf &gt; alice.dump.asm</span><br><span class="line">qemu-system-arm -M vexpress-a9 -cpu cortex-a9 -m 512M -nographic -monitor telnet:127.0.0.1:1234,server,nowait -kernel alice.bin</span><br></pre></td></tr></table></figure><p>再开个shell, 通过telnet 连上去，并使用info registers 查看寄存器信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">alice@MacAlice ‹ 9d021c0 › : ~/Codes/alice-os</span><br><span class="line">[0] % telnet localhost 1234</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">QEMU 4.2.0 monitor - type &apos;help&apos; for more information</span><br><span class="line">(qemu) info registers</span><br><span class="line">R00=00000233 R01=000008e0 R02=60000100 R03=00000000</span><br><span class="line">R04=00000000 R05=00000000 R06=00000000 R07=00000000</span><br><span class="line">R08=00000000 R09=00000000 R10=00000000 R11=00000000</span><br><span class="line">R12=00000000 R13=00000000 R14=60010008 R15=0eb25134</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到 R0里面是 0x233, 这个是一开始写进去的值，至此我们非常简易的Alice OS启动啦！开始我推荐的调试方式就是让代码hang住，并通过qemu的monitor进行查看,等到后面我们会改成用GDB的方式来调。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多学习OS的小伙伴最终也只是停留在买一本翻了一半的《操作系统原理》、
一个下下来没看几眼的Linux源码，和一个甚至都没怎么跑起来过的Qemu。&lt;/p&gt;
&lt;p&gt;关于OS最有名的课程就是MIT的&lt;a href=&quot;https://pdos.csail.mit.edu/6.828&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;6.828 Operating System Engineering&lt;/a&gt;课程，
课程讲解xv6，并附有一个难度颇高的JOS操作系统实验。
即使是一个专业的计算机学生、全程跟着上这门课在做这门Lab的时候也会
遇到遇到非常多的困难和阻力，操作系统本身的高难度门槛、不便的调试环境、
和狭窄的就业方向使得有兴趣的小伙伴也往往绊倒在学习的路上。&lt;/p&gt;
&lt;p&gt;本系列博客旨在从0构建一个用于我演示各种Demo的小小小OS: Alice OS;
由于x86硬件的复杂性，为了简化，我会从arm，使用Qemu去构建Alice OS。&lt;/p&gt;
&lt;p&gt;希望能对OS的一些概念进行一些解释，辅助小伙伴们的学习，也是对自己
在ARM的近两年开发进行一些点滴总结。若有本人理解不对的地方，欢迎指摘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="os-dev" scheme="http://silentming.net/tags/os-dev/"/>
    
  </entry>
  
  <entry>
    <title>2019 Summary</title>
    <link href="http://silentming.net/blog/2020/01/05/2019-summary/"/>
    <id>http://silentming.net/blog/2020/01/05/2019-summary/</id>
    <published>2020-01-05T09:05:03.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>2019 是没有大起大落平稳生活的一年，生活和自己当初那朴素的设想一样，没有豪运眷顾，也没有与毕业时的憧憬产生错位。相比去年多了一点点的沉稳，少了一点点的假想。少了一些年初的雄心壮志，多了一些生活的苟且，却也过的更加真实和自然。</p><a id="more"></a><h3 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h3><ul><li>Jan. </li></ul><p>回了趟母校，看到了实验室墙上也挂上了自己的照片，实验室里看着我的新面孔，就像我当时进入实验室时看到那些即将毕业的学长学姐们一样充满好奇。当时的我还觉得学长学姐对新人一点也不热情，如今自己却也体会到想打招呼却连名字都不知道的尴尬。</p><p>工作紧锣密鼓的进行着，虽然刚刚完成了一波小小的攻关，然而前路漫漫，面对不知道还有多少的Bug和工作，部门兄弟们大家都心里没什么着落。</p><img src="https://live.staticflickr.com/65535/49332290663_68213e1cdb_o_d.jpg"><p>大框是博士，小框是硕士~</p><img src="https://live.staticflickr.com/65535/49332754611_05a7b07727_c_d.jpg"><p>公司鼓励新人的明日之星奖，奖牌做的是真不错hahaha</p><ul><li>Feb. New Year, New House</li></ul><p>每年过年回去的时间都是可以提前一个月安排好的，就算以每天看三家的速度去逛亲戚也需要大半个春节才逛的完，现在回去的乐趣除了和长辈们的相谈，看看自己一年比一年高的外甥、侄女也是一件乐事。</p><p>2月我从公司附近搬到了地铁线上,每天上下班地铁通勤占掉了两个多小时，比以前骑车多了一个多小时，但是地铁上的时间也能让我多一些思考、发呆、看书、玩耍的时间，未尝不是一个留给自己的机会。曾经住在单位附近，下班的我回到家里就会待在电脑前;而如今强制给自己划出的这两个小时的时间，反倒让自己有了一段可以看新闻、看动漫、看书、思考的时间，让自己在每日繁忙的工作中能够休息一下大脑。</p><p>中间去了上海的抖音网红点星空艺术馆，没有经验的我们拿着快没电的手机赶紧拍了不少照片…</p><ul><li>Mar.</li></ul><p>平淡的一个月，毕竟工作后没有假日就没有什么玩耍的机会，3月的我们还在适配产品的功能，除了工作就是看动漫玩游戏，平平淡淡。LLJ夹机占在附近开了一家店，之所以去这家是因为这家的玩具做的好还是正版，关键是必然能用差不多的价格抓上来！只要投钱就一定能拿到的抓娃娃，比那种不靠谱的抓娃娃要快乐多了…</p><p>抓到了一只狗子，代抓的娃娃非常有弹性，从爪子上掉下去又弹到了出口里，属于快乐的白给😁</p><ul><li>Apr.</li></ul><p>计划了去普吉岛的旅行，其他也就没什么特别的事情了。</p><img src="https://live.staticflickr.com/65535/49332290348_37cfb7f9cd_b_d.jpg"><p>春天公司园区养的乌龟会经常出来晒背，忙起来的时候大家都非常羡慕悠闲的乌龟呢。</p><ul><li>May.</li></ul><p>5月也就在平平淡淡中度过了。</p><p>这段时间是项目的攻关期，大家都为了能满足功能而奋战，相比较去年没有刚入职的轻松自在，开始体会到社畜的心酸。</p><img src="https://live.staticflickr.com/65535/49332290273_c754770670_w_d.jpg"><p>买了小黄鸭，希望能有助于Debug~</p><ul><li>Jun. Phuket 出发！</li></ul><p>6月终于迎来了去普吉的日子，请了两天假和着端午出海游玩了一把~ 具体的体验已经在 <a href="https://silentming.net/blog/2019/08/04/phukey-trip/">普吉岛之行</a>说过了~不过运气不好的是6月泰国已经进入雨季，而且同游的D桑不适应水，最终出海的体验没有想象中的好。海风是真的咸咸的，而且粘的很… </p><p>部门组织的春游也因为攻关的原因一直拖到了6月，去了上海的崇明岛玩耍了两天，天然的空气氧吧洗刷攻关期的疲惫。</p><!--img https://live.staticflickr.com/65535/49332977882_1e23ff5ed9_k_d.jpg最后一天天晴才拍到美丽的照片--><ul><li>Jul. &amp; Aug. </li></ul><p>这个月真的是平淡到连照片都没有… </p><p>在这期间度过了自己的26岁生日，在奔三的路上飞驰了…</p><ul><li>Sep.</li></ul><p>看到了真人的汉服！确实很好看, 顺带关注了一个不错的时尚up主: 机制的党妹，在这里也安利一波：<a href="https://space.bilibili.com/466272?from=search&amp;seid=14436024524483703426" target="_blank" rel="noopener">机制的党妹</a></p><ul><li>Oct. 阅兵 &amp; 陪母上出游</li></ul><p>10月最重要的国事就是建国70周年大阅兵，听着钢铁洪流进行曲，看着先进的武器装备让非军迷的我也热泪盈眶。十一长假母亲大人莅临指导，父亲大人也不远万里从苏州赶来，一同去了西溪湿地。不得不说，还是母上大人厉害，走一天路我们两个大老爷们都走不动嚷嚷着要坐船，母亲大人步履轻盈还意犹未尽…</p><p>看来自己还需锻炼…</p><img src="https://live.staticflickr.com/65535/49332754111_437432beaa_c_d.jpg"><ul><li>Nov. 买买买</li></ul><p>今年算是学习了一波薅羊毛攻略，从前期的卖楼和互换盖楼，到每天抢秒杀，到前一天做Excel攻略表，最后10号晚上奋战到凌晨…… Pad、Mac、手机无一不用, 我第一次如此用心的过了一回双11，真是身心俱疲…同时也无比佩服那些羊毛党们在双11这件事情上的强大战斗力。</p><img src="https://live.staticflickr.com/65535/49332290058_cda0162346_c_d.jpg"><p>每天盖楼奋战是日常了， 以后再也不想参加了…</p><ul><li>Dec. 年末攻关</li></ul><p>整个年末就没怎么休息，产品性能攻关，所有的大佬亲临一线，都在一起Debug、采数据做性能分析优化，跟我们一起联调的别部门小姐姐，每天工作到凌晨3、4点……也再次见证了华为这个公司在面对目标打攻坚战时的强大，即使是为了一同奋战的同事们，自己也要尽己所能贡献一份力。</p><p>双12又买了扫地机器人，用过之后立即种草，这东东真的是解放生产力、提高幸福感，推荐推荐。</p><img src="https://live.staticflickr.com/65535/49332977667_61640f3ec0_c_d.jpg"><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>2019年有很多目标没有完成，与其说是没有践行目标，其实是生活工作进入常态之后不得不对年初的诸多奢望进行一些裁剪，以保证自己的精力能够更多投入生活与工作。</p><p>记录每天的花销由于过于琐碎而被抛弃了，曾经记录了两个月最终发现自己实际上也不关心它具体是多少，一日三餐在公司吃饭，周末也就吃两顿好的。剩下的钱也只有双11、618这种大节和过年回去花一花了，在日常工作已经占据大脑，每日恨不得倒头就睡的日子里，又能有多少精力去记录这连自己都不关系的每日开销呢？反倒是De了多少bug、完成了多少需求、每周工作的内容倒是老老实实的记了下来，或许这才是社畜该有的样子吧…</p><p>锻炼没有完成预定的次数，不过也陆陆续续有在坚持，就是游泳改成了方便的跑步，从目标美型转到了纯为续命上…</p><p>英语、日语都被抛到了脑后，只保持了最基本的说写和专业阅读能力，在使用率越来越低的现在拓宽阅读是目前优先级更高的事情了。</p><p>画 画…真的是惭愧，深刻意识到忙起来后就没时间顾及业余爱好的无奈，何况自己有空还要看综艺、看动漫、玩游戏、写博客，画画就真的是被撂到一边了，连自己都有点懊恼…</p><ul><li style="list-style: none"><input type="checkbox" checked> 游泳/健身 70+ -&gt; 30+</li><li style="list-style: none"><input type="checkbox" checked> 读5本专业以外的书，这一年读了有十几本，这个目标还是达成了的</li><li style="list-style: none"><input type="checkbox"> 拔草日记 -&gt; 忙了起来后还哪来的拔草呢😔</li><li style="list-style: none"><input type="checkbox"> 画至少四幅插画…</li><li style="list-style: none"><input type="checkbox"> 日语/英语单词的学习…</li><li style="list-style: none"><input type="checkbox"> 记录每天开销-&gt;记录每周工作的内容</li></ul><p>2020年还是希望能动两笔，写两句，读读书，看看番，锻锻炼，赚赚钱~</p><ul><li style="list-style: none"><input type="checkbox"> 健身 50+</li><li style="list-style: none"><input type="checkbox"> 读10本专业以外的书</li><li style="list-style: none"><input type="checkbox"> 画4副插画</li><li style="list-style: none"><input type="checkbox"> 写5篇技术博客(博客是一个自己总结的好机会)</li><li style="list-style: none"><input type="checkbox"> 开开心心</li></ul><p>2020年加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019 是没有大起大落平稳生活的一年，生活和自己当初那朴素的设想一样，没有豪运眷顾，
也没有与毕业时的憧憬产生错位。
相比去年多了一点点的沉稳，少了一点点的假想。
少了一些年初的雄心壮志，多了一些生活的苟且，却也过的更加真实和自然。&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="http://silentming.net/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>泰国的明珠——普吉岛之行</title>
    <link href="http://silentming.net/blog/2019/08/04/phukey-trip/"/>
    <id>http://silentming.net/blog/2019/08/04/phukey-trip/</id>
    <published>2019-08-04T03:13:13.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>明媚的阳光下，伴着尖叫与欢笑，玩拖曳伞的游客们像大鸟追逐快艇一样在空中翱翔；在这一望无际的蓝色背景上，云彩像泼墨艺术般层层洒在这蓝色的画布上，碧绿的丘陵在翡翠色的海水上划出了一个个海湾，白色的小浪花则跨过这巨大的海湾，轻轻地拍在海滩上细密的沙子上，尽全力一次次尝试浸湿更远处的沙子，不过无情的艳阳则让这绵薄的努力顷刻间化作了虚无。</p><p>海里是嬉水的孩子们，海滩上则是忙于凹各种造型摆拍的大人们，每拍个十几分钟，都会筋疲力尽地躲在各种小店摆出来的遮阳伞中。而女孩们则无暇休息，趁着这拍照的间隙疯狂给自己身上涂防晒。紧靠沙滩的小路上则是陆陆续续过来的游客，而小路的边上则是各种拾趣、小食与药店，当然还少不了想着歌声与音乐的海边餐厅~</p><p>普吉是泰国的明星景点，而普吉岛的巴东地区则是普吉最最热闹与繁华地段，巴东海滩亦成为了游客们的打卡必经之地，虽筋疲力尽，但也不会忘记这夏日海滩的美丽。</p><a id="more"></a><h3 id="对国人友好的旅游胜地"><a href="#对国人友好的旅游胜地" class="headerlink" title="对国人友好的旅游胜地"></a>对国人友好的旅游胜地</h3><p>随着我国经济的发展，以往国内的旅游计划也渐渐将目的地改为了周边的国家，泰国则成为了东南亚最受国人欢迎的旅游国之一。</p><h4 id="平易近人的消费"><a href="#平易近人的消费" class="headerlink" title="平易近人的消费"></a>平易近人的消费</h4><p>承担的起的消费水平是最主要的原因，在国内，面对五花八门的商店中琳琅满目的商品，不提前查一下指不定就会出现逛了半天满面红光，一问价格一脸羞涩的窘地。而在泰国，你就像是带着大金链子，叼着雪茄，穿着豹纹夹克，留着莫西干头似的土老大，想买什么买什么，想逛什么逛什么，积攒了一辈子的穷的忧伤，都可以随着撒钱的畅快而烟消云散。想做Spa? 哪里贵去哪里；想吃海鲜？哪里豪华吃哪里！</p><p>我和D桑就去了网红店Let’s Relax最火的第三街道分店，点了3个小时的“天堂般的享受”，全身放松按摩!</p><img src="https://dimg01.c-ctrip.com/images/100k0s000000hwdd00E1C_R_1600_10000_Mtg_7.jpg"><h4 id="全世界都在说中文"><a href="#全世界都在说中文" class="headerlink" title="全世界都在说中文"></a>全世界都在说中文</h4><p>英语还过得去的我对出国旅行一向是不怵的，曾经单人飞德国转维也纳都经历过了，区区泰国还不是小Case? 当我想着秀一把时，眼之所见、耳之所闻则令我震惊不已，当地人的汉语感觉和英语一样好，周围都是说着中文的服务人员。从曼谷到普吉，从普吉到巴东，从巴东到皇帝珊瑚岛，最后返程的过程中，英语几乎没有用过。机场的客服、宾馆的前台、餐厅的菜单、商城的指引，等带有中文翻译，甚至连出海时船上的泰国导游也操着一口流利的中文给我们介绍游玩的路线。在这里，无法提供中文服务就意味着拒绝巨大的商机，作为游客的我们则不必担心沟通问题，畅玩普吉。</p><img src="https://live.staticflickr.com/65535/48451334317_6791e66c5d_o_d.jpg"><h4 id="万能的阿里帝国"><a href="#万能的阿里帝国" class="headerlink" title="万能的阿里帝国"></a>万能的阿里帝国</h4><p>出国游繁琐的地方之一在于办理签证，对于像美帝这种又是面签又是check的根本就是在拒绝普通百姓，我们这时段泰国虽说时落地签，但茫茫长的队伍也令人望而止步。</p><p>但是万能的淘宝A梦则可以解决一切烦恼，从签证办理到宾馆机票这种常见服务，到出海游玩项目、免税店接送这种细致日程都可以在淘宝/飞猪上一条龙订完。而到了当地也不用带现金，支付宝同样走天下，阿里再一次展示了它帝国的威势，在一遍遍被掏空钱包的同时也一遍遍说着真香。价格比当地使用的打车软件Grab的费用还低，游玩项目则更是现场价格的一半。</p><h3 id="快乐的小岛"><a href="#快乐的小岛" class="headerlink" title="快乐的小岛"></a>快乐的小岛</h3><p>到达素万那普机场时恰逢阵雨，吃着汉堡的我们看着窗外的焕发盎然生机的热带植物吮吸着夏日的甘露，心中充满的对热带小岛的各种美妙想象。</p><img src="https://live.staticflickr.com/65535/48451178941_b59d53f489_o_d.jpg"><p>到达普吉机场后，接机的当地司机已经在一辆小轿车内等着我和D桑，司机是位大姐，虽然不会中文但也熟练地使用Google翻译给我们介绍路况，淡黄的灯光与舒缓的音乐让因旅途奔波的我们可以在车上小憩片刻。</p><p>两车道的山路潘延30多公里，只有像大姐这样的本地老司机才能驾轻就熟，我则在心中默默摁灭了想要自己租摩托兜风的小火苗。当司机叫我们向西边观看时，已是到达巴东海滩的时候了，夜晚的海漆黑而神秘，海边的灯光则宣扬着小镇夜生活的开始。</p><img src="https://live.staticflickr.com/65535/48451334367_43eda846dc_o_d.jpg"><h4 id="出海"><a href="#出海" class="headerlink" title="出海"></a>出海</h4><p>若是天气晴朗，幸运的游客可以在平稳的帆船上喝着冰镇汽水，一遍听着扬声器里的音乐，一边冲向美丽的海岛，还可以在海上浮潜，甚至邂逅精灵般美丽的海豚。不过如果像我们此次行程一般不走运，遇到了阴雨天的话那海上的航行就更像是探险了。</p><p>稍起风，海浪就会让船上下颠簸，没有一个常年行走在陆地上的游客能够经受住着长时间的颠簸，凡是不吃晕船药的都会埋在呕吐袋上……</p><p>好在到达海岛的时候雨没下，得以玩一下丛林穿越。当划扣挂在钢绳上时，心里咚咚的心跳对即将到来的滑行既期待又有点害怕，这种肾上腺素溢上来的感觉着实让人欲罢不能。</p><p>当我们踏上寻找海豚之旅时，大海似乎非常的不乐意，在变大的风浪和颠簸的船上，包含我们在内的所有旅游都嚷嚷着赶紧回去。为了生命安全，也为了晕乎乎的脑袋，帆船掉头向着出发时的港口缓缓驶回。</p><img src="https://live.staticflickr.com/65535/48452009697_3bdfd264fd_o_d.jpg"><h4 id="SPA-amp-Massage"><a href="#SPA-amp-Massage" class="headerlink" title="SPA &amp; Massage"></a>SPA &amp; Massage</h4><p>幽暗的房间中飘逸着令人愉悦的芳香，悠长的音乐抚摸着因一天旅途而疲惫的心，按摩师用专业的手法揉捏着小腿酸痛的肌肉，每一次用力都仿佛能感到藏在肌肉中的乳酸被一点点挤出来，一声声酸痛的嗷之后是舒畅的啊~ SPA &amp; Massage已经成为了泰国旅游的必备活动，项目从理疗到解压，从适合新人的精油按摩到资深人士才敢挑战的泰式四手，泰式按摩是必须要体验的。价格从每小时几十RMB到几百RMB不等，如此看来作为按摩师的收入相比也不会太多。</p><h4 id="海鲜盛宴"><a href="#海鲜盛宴" class="headerlink" title="海鲜盛宴"></a>海鲜盛宴</h4><p>无论哪里的泰式餐馆都会有招牌的冬阴功，各种贝蚌与虾蟹在泰式餐馆都是必备。在泰国，物美价廉的海鲜应有尽有，在国内高档日料店才能享受到的大龙虾，在泰国也不过是几十块RMB的弟弟。如果着实不适应泰式的味道，为国人口味改良的菜品也不在少数。</p><p>若是吃了太多的海鲜想要换换口味，街边小摊的各种轻食也非常不错。</p><p>来了泰国，只要注意不要因为吃海鲜吃进医院就可以了O(∩_∩)O</p><h3 id="旅游攻略"><a href="#旅游攻略" class="headerlink" title="旅游攻略"></a>旅游攻略</h3><ol><li>签证建议提前办好，淘宝包邮包照片7天内只要200多RMB，省心又省时；</li><li>机票: 越早订越好，直飞普吉是没有黄金航班的，想坐黄金时间就需要从曼谷转；廉价航班不一定有行李额，订机票时买；</li><li>SPA&amp;Massage: 网上提前个3天订好，不是所有的店当场就有位置；</li><li>接送机、出海、游玩项目：全部淘宝订，我们订的浪花朵朵那家的，还不错；接送机提前一周能便宜，出海早一些比较保险，旺季不一定有足够位置，游玩项目提前一天订就行，便宜不少；</li><li>宾馆: 淡季就选好一点的，也不是很贵一晚上一人300左右，旺季就酌情；我们选的Burasari Phuket，酒店的SPA听说比Let’s Relax的还好，露天泳池+餐厅非常不错；</li><li>插座：2孔和国内一样，三孔的需要带转换头，而且宾馆不一定有，当然周围都是7-11, 可以方便买到；</li><li>泳衣2套+: 宾馆都是露天泳池，出海、海滩都需要泳衣，一套一般不够换；</li><li>沙滩衣与沙滩大毛巾: 雨天保暖(雨天出海非常冷)，晴天防晒(化学防晒都是没用的，必须物理防晒)；</li><li>防晒：防晒霜防晒喷雾都带上，晴天的话要仔细涂抹各个部位，一不注意就是晒伤；</li><li>防蚊虫：泰国多蚊虫，当地7-11有买绿药膏很好用；</li><li>浮潜袜：浮潜、沙滩出海必备，脚踩沙滩都是电视剧里演的，不想被划伤隔住老老实实带上；</li><li>浮潜咬嘴：这个攻略一般不说，但是对于初次浮潜的人可能会不喜欢他们给的咬嘴，如果自己带个习惯的会舒服很多；</li><li>充电器、夏天的衣服、墨镜等等，当地非常多7-11，需要什么可以直接买，支持支付宝</li></ol><h4 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h4><ol><li>我们第一天去出海，出海回来会非常累，而且身上都是海水想要洗澡，不建议当天晚上再安排SPA等活动，而且回来的时间不确定，晚上逛逛海滩夜市或者休息就行；</li><li>第二天我们逛的王权免税店和普吉镇，王权免税店不如机场日尚的便宜，只有欧莱雅的价格还行，其他的就是宰客，所以我们吃了免费的自助后就去普吉镇玩了。<br>网上会有很多免费接送王权还送自助的，可以参加，免费送过去后可以逛逛，没什么想买的话吃完自助就可以自己去普吉镇，逛整个普吉镇差不多要1-2小时，逛完后可以回到王权再免费被送回宾馆…… 我们是取消了返程接送，在普吉镇自己打车回的，差不多要快100RMB；</li><li>巴东海滩可以租摩托，不过那边骑的飞快，只逛一个海滩的话步行即可，推荐白天逛，晚上去SPA；</li><li>出海如果时间充裕可以选择在海岛上住或者出两次海(出一次后其实就不想再出海了)，时间还充裕可以选择再逛逛其他海滩；</li><li>当地晚上有泰拳与人妖表演，还有各种露天酒吧，不过我们没什么兴趣就没安排；</li><li>曼谷转机的话，除非在曼谷过夜，不然没有时间逛，市内景点距离机场都是10+~20+公里；</li></ol><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>这次出国旅行，大体上非常顺利，除了中间我脑抽12点退房，下午15：30才订的送机害的我们在酷暑下怏了几个小时外，其他行程还算不错。游玩时间有限所以安排不是特别多，不过哪怕是天天Massage也是很不错的！只能等到下次去其他东南亚岛国再体验一次了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明媚的阳光下，伴着尖叫与欢笑，玩拖曳伞的游客们像大鸟追逐快艇一样在空中翱翔；
在这一望无际的蓝色背景上，云彩像泼墨艺术般层层洒在这蓝色的画布上，
碧绿的丘陵在翡翠色的海水上划出了一个个海湾，白色的小浪花则跨过这巨大的海湾，
轻轻地拍在海滩上细密的沙子上，尽全力一次次尝试浸湿更远处的沙子，
不过无情的艳阳则让这绵薄的努力顷刻间化作了虚无。&lt;/p&gt;
&lt;p&gt;海里是嬉水的孩子们，海滩上则是忙于凹各种造型摆拍的大人们，
每拍个十几分钟，都会筋疲力尽地躲在各种小店摆出来的遮阳伞中。
而女孩们则无暇休息，趁着这拍照的间隙疯狂给自己身上涂防晒。
紧靠沙滩的小路上则是陆陆续续过来的游客，而小路的边上则是各种拾趣、小食与药店，当然还少不了想着歌声与音乐的海边餐厅~&lt;/p&gt;
&lt;p&gt;普吉是泰国的明星景点，而普吉岛的巴东地区则是普吉最最热闹与繁华地段，巴东海滩亦成为了游客们的打卡必经之地，
虽筋疲力尽，但也不会忘记这夏日海滩的美丽。&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="http://silentming.net/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>使用免费的亚马逊云服务(AWS)</title>
    <link href="http://silentming.net/blog/2019/03/03/aws/"/>
    <id>http://silentming.net/blog/2019/03/03/aws/</id>
    <published>2019-03-03T05:50:51.000Z</published>
    <updated>2023-03-27T16:12:03.507Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直使用的搬瓦工: <a href="https://bandwagonhost.com/" target="_blank" rel="noopener">https://bandwagonhost.com/</a>, 使用上感觉还不错，但是当vps IPf被封了之后，需要等待180天才能更换一次IP。 而且其速度并没有非常的快(当然也是因为买的是最便宜的19$/year的套餐)。</p><p>听闻Amazon的云服务AWS(Amazon Web Service)可以试用，第一年免费，今天便拿来尝试了一把。本篇记录了使用Amazon的服务建立一个自用VPS的过程。</p><a id="more"></a><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul><li>信用卡一张(国内的银联就可以)</li><li>一个可用的Email账户</li></ul><p>虽然是免费的，然是要求绑定一张信用卡，当我们使用量超出免费服务的限制后它会从信用卡上按月扣钱。</p><h2 id="Apply-a-Instance-Virtual-Machine-VM"><a href="#Apply-a-Instance-Virtual-Machine-VM" class="headerlink" title="Apply a Instance/Virtual Machine (VM)"></a>Apply a Instance/Virtual Machine (VM)</h2><ul><li>进入AWS官网: <a href="http://aws.amazon.com/" target="_blank" rel="noopener">http://aws.amazon.com/</a></li><li>右上角-&gt; <code>Create an AWS Account</code></li><li>Sign up注册一个新账号 (如果已有账号Sign In)，跳过注册<ul><li>需要注意的是信用卡绑定国内的信用卡就可以了，我试着绑Visa还失败了..</li><li>密码需要还有大写字母和数字/符号</li></ul></li><li>登陆进去后进入的就是我们的控制台界面: <a href="https://console.aws.amazon.com/console/home" target="_blank" rel="noopener">https://console.aws.amazon.com/console/home</a></li><li>右上角分别是通知、账户、区域、和支持(Support)，在区域里面选择自己服务器想要申请的区域。听说国内用<code>Tokyo</code>东京的比较快。</li><li>在页面中<code>Build a solution</code>中选择<code>Launch a virtual machine</code></li><li><p>在给出的选项里面，找一个带有<code>Free tier eligible</code>的就行,常见的几个:</p><ul><li>Amazon Linux 2 AMI(HVM): 属于Selinux, 使用Yum包管理器，只安装了最基本的工具</li><li>Amazon Linux AMI: 还安装了常用工具: python, perl, Java, Ruby, Docker, MySQL等等</li><li>Microsoft Windows Server 2019 Base: Windows的直接跳过不看</li><li>Red Hat Enterprise Linux 7.6: Red Hat的企业Linux</li><li>Ubuntu Server 18.04 LTS (HVM): Ubuntu, 使用apt包管理器</li></ul><p>如果是习惯了使用Ubuntu的，装Ubuntu Server这个就行；如果仅仅只是想弄个代理服务器什么的，考虑到我们的VM空间也不大，可以像我一样申个最简单的Amazon Linux 2 AMI。(2023年Amazon出了新的AMI, 可以用新的) 这几个VM类型除了Windows家的, 都是HVM类型(全虚拟化), 所以使用上没什么差别。这里我们选第一个<code>Amazon Linux 2 AMI(HVM)</code></p></li><li><p>选择instance type</p><p>在给出的免费选项里面，只有t2.micro, 1个vcpu, 1GB内存，Low to Moderate的网络能选了…</p></li><li><p>选择配置</p><p>大部分用户可以直接选择右下角的<code>Review and Launch</code>，如果想修改详细配置，在最上方的选项卡里面可以选。需要注意的是，<code>Add Storage</code>里面，免费的磁盘最大可以选到30GB的SSD，默认是8GB。在<code>Configure Security Group</code>选项卡里，可以给我们的安全策略组起个容易理解的名字。</p><img src="/images/2019/20190303aws00.jpg"></li><li><p>Generate Key Pair</p><blockquote><p>熟悉ssh Key使用的也可以跳过这一步，如果跳过这一步那在服务器端没配置好<code>authorized_keys</code>之前就不能通过ssh访问了</p></blockquote><p>之后就可以点Launch来启动我们的VM了。这个时候会弹出一个配置Key Pair的页面，这个页面只会出现一次。我们选择<code>Create a new key pair</code>来生成一组新的RSA密钥组。其中的公钥会被放到我们的VM里，私钥我们要<strong>下载</strong>下来保存起来之后用ssh连接VM的时候使用。Key Pair的名字随便起。</p><p>点击<code>Download Key Pair</code>下载私钥文件，这个可别弄丢了哦, 在<code>.ssh/config</code>里面指定为这个密钥就可以了,具体的可以在Aws Instances 那边点Connect，照着ssh的方式配置就可以。</p></li><li><p>Launch VM</p><p>点击Launch (Instances/VM)后，我们的VM就会启动了。启动后我们可以选择最上面的菜单<code>Services-&gt;EC2</code>进入EC2 Dashboard:</p><img src="/images/2019/20190303aws01.jpg"><p>当我们看到有一个Running Instances时，说明我们的VM启动成功了。</p></li><li><p>Configure VM</p><p>这里我们看到右上角的Tokyo表明了当前的DashBoard显示的是哪个区域的VM, 如果我们继续Launch Instance的话，还会在相同的区域中起VM。如果我们在右上角切换了Region, 那么我们就可以在其他区域中起VM。</p><p>常用的选项我已经用红框标记了出来:</p><ul><li><code>Instances</code>: 里面会显示我们启动的VM的状况</li><li><code>Security Group</code>: 显示我们的安全策略组，这个会有一个默认的策略，我们在配置VM时设置的安全策略会作为一个新的Group。</li><li><code>Elastic IP</code>: 这个允许我们的VM对外显示为另一个IP, 可以在我们的IP被封后换掉。</li><li><code>Key Pairs</code>: 显示了我们目前设置的Key, 如果我们之后想换密钥了可以在这里操作。</li></ul></li><li><p>Associate <code>Elastic IP</code></p><p>这里我们选择<code>Elastic IP</code>选项卡，点击左上角的<code>Allocate new address</code>分配一个IP,分配好了后在旁边的<code>Actions</code>里面选择<code>Associate Address</code>。</p><p>在新的页面里面选择我们的Instance, Private IP不要动(Private IP)是我们VM真正的IP。勾上<code>Allow Elastic IP to be reassociated if already attached</code>，然后点<code>Associate</code>。</p><p>再回到<code>Elastic IP</code>选项卡，就能看到我们刚刚申请的IP已经和Instance关联了，之后就可以通过这个Elastic IP来访问我们的VM。</p></li><li><p>Configure Security Group</p><p>选择<code>Security Groups</code>选项卡，点击我们自己的Security Group, 最下面会显示<code>Description</code>,<code>Inbound</code>, <code>Outbound</code>, <code>Tags</code>。我们需要修改<code>Inbound</code>的安全策略:</p><p>Inbound默认只允许ssh协议的链接通过22号端口访问我们的VM，如果我们想用它作为代理服务器的话，还需要添加一个规则, 比如我想用shadowsocks, shadowsocks的链接用的TCP协议: Edit, 选择<code>Custom TCP Rule</code>,Port Range 我填一个22334, Source 选择Anywhere。这样我们的VM就允许来自任何地方，连接Port 22334的TCP协议包。</p></li></ul><p>这些都弄完了后，我们的VM就可以开始使用了。</p><h2 id="Setup-Proxy-Server"><a href="#Setup-Proxy-Server" class="headerlink" title="Setup Proxy Server"></a>Setup Proxy Server</h2><p>这里简单介绍一下如何搭代理服务(以Shadowsocks为例)。</p><ul><li><p>Connect to Instance</p><p>选择<code>Instances</code>选项卡，在上方有<code>Launch Instance</code>, <code>Connect</code>, <code>Actions</code>。我们点击<code>Connect</code>，它会告诉我们如何访问我们的VM。最简单的方式就是用ssh，里面会直接给一个Example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i <span class="string">"keypair.pem"</span> ec2-user@xxxxxx.compute.amazonaws.com</span><br></pre></td></tr></table></figure><p>找一个shell照着敲就OK.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uname</span> -a</span><br><span class="line">Linux ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal 4.14.97-90.72.amzn2.x86_64 <span class="comment">#1 SMP Tue Feb 5 20:46:19 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$lscpu</span></span><br><span class="line">Architecture:        x86_64</span><br><span class="line">CPU op-mode(s):      32-bit, 64-bit</span><br><span class="line">Byte Order:          Little Endian</span><br><span class="line">CPU(s):              1</span><br><span class="line">On-line CPU(s) list: 0</span><br><span class="line">Thread(s) per core:  1</span><br><span class="line">Core(s) per socket:  1</span><br><span class="line">Socket(s):           1</span><br><span class="line">NUMA node(s):        1</span><br><span class="line">Vendor ID:           GenuineIntel</span><br><span class="line">CPU family:          6</span><br><span class="line">Model:               63</span><br><span class="line">Model name:          Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz</span><br><span class="line">Stepping:            2</span><br><span class="line">CPU MHz:             2400.224</span><br><span class="line">BogoMIPS:            4800.04</span><br><span class="line">Hypervisor vendor:   Xen</span><br><span class="line">Virtualization <span class="built_in">type</span>: full</span><br><span class="line">L1d cache:           32K</span><br><span class="line">L1i cache:           32K</span><br><span class="line">L2 cache:            256K</span><br><span class="line">L3 cache:            30720K</span><br><span class="line">NUMA node0 CPU(s):   0</span><br><span class="line">Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp</span><br><span class="line">                     lm constant_tsc rep_good nopl xtopology cpuid pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer</span><br><span class="line">                     aes xsave avx f16c rdrand hypervisor lahf_lm abm cpuid_fault invpcid_single pti fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt</span><br></pre></td></tr></table></figure><p>可以看到亚马逊的AWS用的是基于Xen的虚拟机监控器，<code>Virtualization type:full</code>, 表明我们是全虚拟化。</p></li></ul><h3 id="Install-ssserver"><a href="#Install-ssserver" class="headerlink" title="Install ssserver"></a>Install ssserver</h3><p>  简单瞄两眼后，我们就着手安装自己要的工具吧。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install m2crypto python-setuptools</span><br><span class="line">$ sudo easy_install pip</span><br><span class="line">$ sudo pip install shadowsocks</span><br></pre></td></tr></table></figure><p>  这里pip可能因为更新导致Amazon的pip版本过老出现错误，我们重新装一个就行~:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install python37</span><br><span class="line">$ sudo pip3 install shadowsocks</span><br></pre></td></tr></table></figure><p>  这样我们就安好了shadowsocks服务。建立一个配置文件:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write following contents</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="string">"server_port"</span>:22334,</span><br><span class="line"><span class="string">"password"</span>:<span class="string">"your_passwd"</span>,</span><br><span class="line"><span class="string">"timeout"</span>:300,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"><span class="string">"fast_open"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  里面<code>password</code>是连接代理服务时需要输入的密码。里面的<code>server_port</code>记得和  我们AWS上Security Group里面Inbound配置的内容一致，不然会被AWS拦截下来。</p><p>  启动shadowsocks server</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"><span class="comment"># Stop service: sudo ssserver -d stop</span></span><br><span class="line"><span class="comment"># Restart service: sudo ssserver -c /etc/shadowsocks.json -d restart</span></span><br><span class="line"><span class="comment"># View logs: less /var/log/shadowsocks.log</span></span><br></pre></td></tr></table></figure><p>  设置我们的IP table, 不要屏蔽掉22334的包:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT -p tcp --dport 22334 -j ACCEPT</span><br></pre></td></tr></table></figure><p>  大功造成，剩下的就是常规操作了(Client端的就省略了，相信看到这里的你不可能不会用的)</p><h3 id="Install-V2ray"><a href="#Install-V2ray" class="headerlink" title="Install V2ray"></a>Install V2ray</h3><p>V2ray的使用参考: <a href="http://silentming.net/blog/2023/03/26/v2ray/">http://silentming.net/blog/2023/03/26/v2ray/</a></p><h2 id="Delete-Instance"><a href="#Delete-Instance" class="headerlink" title="Delete Instance"></a>Delete Instance</h2><p>如果需要删掉Instane, 需要Terminate Instance, 并解除与释放Elastic IP，处于<code>Terminated</code>状态的Instance经过一段时间就会被Amazon回收</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>代理服务有很多种，比如我之前介绍过的<code>cntlm</code>也可以用，shadowsocks的好处是对包进行了加密,你可以用自己设计的协议= =。</p><p>AWS的Free Tier一个月的上下行流量总和为15GB, 超了会扣钱钱，可以在左上方<code>Services-&gt;CloudWatch</code>里面看看Bill相关的统计，也可以研究下怎么设置Budgets, 在用超的时候发警告。</p><p>使用使用上，感觉连接速度比搬瓦工的更快一些，但是流量上限就没有那么高了，而且一个月15GB的流量限制也确实不能干太多事情。不过能看出来AWS的易用性非常的高，无论是后续切换Region, 还是更换Key Pair、换IP等等，在EC2 Dashboard上面非常显眼的就列出了所有的常用功能。再一次深刻意识到Amazon作为公有云领域的老大，其技术能力的深厚与用户体验的优化都铸就了它现在巨大的成功。</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ul><li>20230325: Update Delete Instance</li><li>20210405: Update V2ray configuration</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直使用的搬瓦工: &lt;a href=&quot;https://bandwagonhost.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bandwagonhost.com/&lt;/a&gt;, 使用上感觉还不错，但是当vps IPf被封了之后，
需要等待180天才能更换一次IP。 而且其速度并没有非常的快(当然也是因为买的是最便宜的19$/year的套餐)。&lt;/p&gt;
&lt;p&gt;听闻Amazon的云服务AWS(Amazon Web Service)可以试用，第一年免费，今天便拿来尝试了一把。
本篇记录了使用Amazon的服务建立一个自用VPS的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tutorial" scheme="http://silentming.net/tags/tutorial/"/>
    
      <category term="record" scheme="http://silentming.net/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>上海迪士尼初探</title>
    <link href="http://silentming.net/blog/2019/01/30/disney-land/"/>
    <id>http://silentming.net/blog/2019/01/30/disney-land/</id>
    <published>2019-01-30T14:18:06.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>来到上海之后一直没有什么契机让我这个深度宅去一趟童话般的迪士尼，不过全能的D桑竟然能买到打折票，也促成了这次的童话世界游园之旅。作一篇小记希望能帮助到同样想去迪士尼的小伙伴们~</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>下载”迪士尼度假区App”</p><p>这个App可以直接买票，不过如果想买打折票之类的，那就找一些第三方的渠道买就可以了~这个App是必备的，因为需要用它来看每个项目的等待时间以及领免排队的Fast Pass。</p></li><li><p>携带物品</p><p>如果是小孩的，需要注意下里面不能带自己的推车，会提供统一的推车租赁，长伞好像也不可以，安检的时候会搜包，也不允许自己带吃的；最简单的就是带好手机、身份证和水杯就可以了，饮水点非常多，不用担心。</p></li><li><p>饮食</p><p>园区内有餐厅，不过旁边的迪士尼小镇有丰富多样价格合理的餐厅，当天的票可以凭票多次入园，所以可以规划好路线去迪士尼小镇就餐；我们由于不知道，中午的时候看到迪士尼小镇在出口外面，最后还绕了远路在宝藏湾附近吃的不好吃还非常贵的快餐…</p></li><li><p>交通</p><p>地铁11号线是直达的，而且出口距离园区不是很远。需要注意的是，如果晚上回来的时候，地铁的人会非常的多！因此晚上不要卡点去做最后一班地铁。</p><p>自驾的话停车场好像有很多，收费在网上查了下，13:00以前是100，以后是30。</p></li><li><p>攻略</p><p>提前做攻略是必要的，看这篇的你可真是个小机灵鬼~</p></li></ul><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1548861265&di=8f722b54f015f14f32f5a62d6ebeeae5&src=http://p3.ifengimg.com/auto/wemedia/20160521/d1e8e8a30005ee00.jpg"><p>在园区内请使用官方的APP来导航，因为上面有每个项目的等待时间提示。从地图上可以看出来，迪士尼乐园被分为了几个大的板块：奇想花园、探险岛、宝藏湾、梦幻世界、明日世界,每个板块都有标志性的项目，游玩顺序可以自定，我和D桑的游玩顺序可以提供个参考。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口在地图右下角，这里排队请提早来。假设园区是8点开门，那么7:20左右就会开始放人过安检，过了安检才能开始领票和领Fast Pass, 因此不要想着8点开门7:30到就OK了。我们去玩的时候，早上9：00开门，我们8点多到，从地铁站走过去开始排长长的安检队，由于是周内工作日，人已经少很多了，节假日简直不敢想。即使是这样，我们进园区的时候也已经超过9点了。</p><p>不过相对的，玩一整天非常消耗精力，我和D桑最后选择不看夜间的烟花..实在是太累了，来的早也就更累，怎么就看各位小伙伴怎么权衡了。</p><p>过了安检的门之后，直走50m就可以领票，领了票就立刻在app上绑定，然后领Fast Pass,一些火爆的项目会在每个时间段分配一些FP的票额，选择领的话就需要在规定的时间段去游玩才可以，一个FP没有使用完之前是不能领第二个的，而FP本身的领取资格也是两个小时一次。推荐领FP的一些景点我会放到下面一起介绍~</p><h3 id="探险岛"><a href="#探险岛" class="headerlink" title="探险岛"></a>探险岛</h3><p>想必大家都非常熟悉人猿泰山了，热带雨林的潮湿配上仿佛部落中的鼓声，鸟儿的欢叫，猴子的嬉闹……纵然这些只是从扩音器传出来的声音，但闭上眼，自己仿佛真的进入了充满冒险的岛屿森林中；睁开眼，两边是慑人的图腾，怀着期待的心情，我和D桑首先踏入了探险岛……</p><h4 id="翱翔飞越地平线-FP"><a href="#翱翔飞越地平线-FP" class="headerlink" title="翱翔飞越地平线 (FP)"></a>翱翔飞越地平线 (FP)</h4><p>这个确实是迪士尼标志性的项目之一，所以很多攻略上会推荐先领这个项目的FP, 然后去游玩其他项目。我们实际体验来看，如果你去的比较早，这个项目可以直接排队，差不多只要20min (高峰的话要90min+)，而FP可以领其他的。</p><p>里面是个穹形屏幕，沉浸式的带你飞跃五大洲，幸运的话最后能坐第一排(排队的时候在这一批靠前一些),因为后排的会看到上面人的鞋底…影响观影体验。个人感觉非常适合初中、高中的少年们，对于我们这种成年人，更像是看一部沉浸式电影，震撼或许没有那么强。</p><p>(这个沉浸式体验非常强，有恐高的话不建议看(当然你可以闭眼)), 身高限制102cm</p><h4 id="雷鸣山漂流-FP"><a href="#雷鸣山漂流-FP" class="headerlink" title="雷鸣山漂流 (FP)"></a>雷鸣山漂流 (FP)</h4><p>这个很不幸的是我们去的时候在维护，所以没能玩上，不过如果选择FP的话可以选择领这个项目或翱翔飞越地平线其中之一，然后自己排队玩另一个。</p><p>传言橡皮艇会在水里撞击，身高限制107cm, 提前在淘宝上买个一次性雨衣会比较好，没有玩成不做评论，不过能玩还是要玩一下的。</p><h4 id="古迹探索营"><a href="#古迹探索营" class="headerlink" title="古迹探索营"></a>古迹探索营</h4><p>这个想玩随时去玩，主要是给小朋友玩的，一些木头做的装置，玩过一些吊桥、独木桥、高空桥之类的对这个也不会有太大兴趣，还有一些沙坑供小朋友玩耍，我们没去玩。</p><h3 id="宝藏湾"><a href="#宝藏湾" class="headerlink" title="宝藏湾"></a>宝藏湾</h3><p>“我是杰克船长。独此一家，如假包换。”我们现在踏入的无疑是伟大的杰克船长的领地，这里有沉船、有宝藏、有海怪与海战，当然，还有最擅长享受的海盗们了。不知跟随杰克船长的你们是否能唤起自己对金钱、名声与势力的渴望，毕竟，我可是要成为海贼王的男人 (的粉丝)</p><h4 id="加勒比海盗——沉落宝藏之战"><a href="#加勒比海盗——沉落宝藏之战" class="headerlink" title="加勒比海盗——沉落宝藏之战"></a>加勒比海盗——沉落宝藏之战</h4><p>这个让我非常震撼，可能是我见识少，会坐一个船型的轨道车，在水里航行，旁边是杰克船长的一些主题机关，中间还有一些穹形屏幕的沉浸式影片，真正体验身临其境的海战，是我为数不多想要再去游玩的项目之一；</p><p>需要注意一点，这个项目的处理速度很快，所以不必一上去就去排队，我们当天这个项目从来没有要求30min以上的排队时间。</p><p>这个项目小孩子可能会被吓到，所以还是要注意一些。</p><h4 id="其余项目"><a href="#其余项目" class="headerlink" title="其余项目"></a>其余项目</h4><p>其余项目从游玩体验上都比较无聊，不过里面有很多照相、探险这种不那么有紧张感的项目。以及这里有快餐午饭，所以路线可以规划到中午过去，在那里吃个饭什么的。</p><h3 id="梦幻世界"><a href="#梦幻世界" class="headerlink" title="梦幻世界"></a>梦幻世界</h3><p>抛下面具，收起欲望，这里是童话的世界，这里是梦的回廊；在这里你可以看到白雪公主与女巫、小熊维尼与美人鱼、爱丽丝的仙境，小矮人的矿洞，在这里你会找到儿时听童话时的惊叹与欢笑，见到从小就向往的公主与城堡。这里时北方的乐园——梦幻世界。</p><h4 id="七个小矮人矿山车-FP"><a href="#七个小矮人矿山车-FP" class="headerlink" title="七个小矮人矿山车(FP)"></a>七个小矮人矿山车(FP)</h4><p>喜欢可爱事物的请一定不要错过这个项目，这个项目最好领一个FP，矿山车本身不会像过山车那么可怕，而且里面的场景非常梦幻，奈何一辆车一次只能坐8个人(没记错的话), 导致该项目的排队时间一直都很长。</p><p>坐着小矮人的小矿车，感受矿工(误)挖宝石的日常~</p><h4 id="小飞侠天空奇遇-FP"><a href="#小飞侠天空奇遇-FP" class="headerlink" title="小飞侠天空奇遇(FP)"></a>小飞侠天空奇遇(FP)</h4><p>乘着飞腾的马车，飞跃各种童话故事中的场景。这个项目每次打开一扇门就真的有一种进入童话世界的感觉，虽然整体时间比较短，但是D桑评价甚高~</p><h4 id="小熊维尼历险记-FP"><a href="#小熊维尼历险记-FP" class="headerlink" title="小熊维尼历险记(FP)"></a>小熊维尼历险记(FP)</h4><p>这个项目我们没能去成，去的时候在维护，一直到下午才开放，但是刚开放的时候我们在岛的南边，走过去的时候已经要排1个多小时的队了，索性放弃。下次再来玩的话是准备过来体验一下的，毕竟这么火爆呢。</p><h4 id="迎宾阁"><a href="#迎宾阁" class="headerlink" title="迎宾阁"></a>迎宾阁</h4><p>注意，这里仅仅是和白雪公主合影！如果想去城堡游玩的话直接从旁边过去就可以，不需要在这里排长队。</p><h4 id="城堡-amp-漫游童话时光"><a href="#城堡-amp-漫游童话时光" class="headerlink" title="城堡&amp;漫游童话时光"></a>城堡&amp;漫游童话时光</h4><p>这个是在城堡内部，会讲述一些白雪公主的故事，这个项目比较冗长，而且要爬楼梯，在冗长的故事结束以前还无法提前离开；适合的是喜欢童话故事的孩子，我呢就是复习了一下白雪公主的故事。</p><h4 id="晶彩奇航"><a href="#晶彩奇航" class="headerlink" title="晶彩奇航"></a>晶彩奇航</h4><p>这个项目会坐一艘船，跟随一只蜻蜓来游览童话中的经典场景。这个项目排队情况不一定，一阵一阵，而且晚上会有灯光，所以白天晚上景色差别很大，推荐白天晚上各来一遍。如果人多的话就先玩别的项目之后再来排就好~</p><h4 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h4><p>其他项目相比宝藏湾仍旧出彩，如果是带小朋友过来的话这边的项目都可以玩一遍，大龄青年的我们则跳到了后面更刺激的项目去了。</p><h3 id="明日世界"><a href="#明日世界" class="headerlink" title="明日世界"></a>明日世界</h3><p>充满科技感的银白色环行坡道在阳光的照射下，亮闪闪的光在四周飘散的水雾中闪烁着，招牌的创极速光轮轨道横跨在这些环形坡道上，一辆辆映射着幽幽蓝光的摩托在轨道上疾驰，划过空气的尖啸声、游客们的喊叫声和扩音器中的奇幻配乐一起，无一不在将版区上的游客吸入一个异次元的世界。</p><h4 id="创极速光轮-FP"><a href="#创极速光轮-FP" class="headerlink" title="创极速光轮(FP)"></a>创极速光轮(FP)</h4><p>作为明日世界的招牌项目，对于玩不来过山车的人来说，实属可惜。该项目推荐使用FP,队伍不算太慢，但是排挺久的队玩一次也不过2min. 不过就像骑哈雷摩托就是比开四轮的跑车拉风一样，创极速光轮的摩托设计更能带给游客飞驰的感觉。</p><h4 id="巴斯光年星际营救-FP"><a href="#巴斯光年星际营救-FP" class="headerlink" title="巴斯光年星际营救(FP)"></a>巴斯光年星际营救(FP)</h4><p>这个项目其实挺无聊的，就是坐在一个可以360度旋转的小车上那个激光枪打靶。如果喜欢玩具总动员里巴斯光年的来这里倒是比较适合，这也是为什么这个项目虽然属于(FP)但基本上没什么人排队的原因。</p><h4 id="喷气背包飞行器"><a href="#喷气背包飞行器" class="headerlink" title="喷气背包飞行器"></a>喷气背包飞行器</h4><p>这个项目排队非常长，由于一次好像只能两个人玩，而且也没有FP，所以我们没有参加这个项目。跟弹射座椅一样，而且可以自己控制高度。阁下何不背包起，扶摇直上九万里？</p><h4 id="创界：雪佛兰数字挑战"><a href="#创界：雪佛兰数字挑战" class="headerlink" title="创界：雪佛兰数字挑战"></a>创界：雪佛兰数字挑战</h4><p>这个里面有很多交互式的游戏，算是个小游戏厅了吧。而且不需要排队，在未来世界逛的时候可以进去转一转玩一玩。</p><h4 id="其他项目-1"><a href="#其他项目-1" class="headerlink" title="其他项目"></a>其他项目</h4><p>其他项目依旧是粉丝向or儿童项的，比如这里有大白的表演、有乐高的积木室，有《星球大战》中的千年隼号驾驶舱……我们兴趣不是特别浓厚，就没继续转了。</p><p>值得一提的是，明日世界出来就是迪士尼小镇，所以在路线安排上可以把它放到中午，要么转完去吃午餐，要么吃完午餐来这里玩。</p><h3 id="奇想花园"><a href="#奇想花园" class="headerlink" title="奇想花园"></a>奇想花园</h3><p>如果说梦幻世界是童话的乐园，奇想花园就像小朋友的乐园；这里的娱乐设施都是面向小朋友的，旋转木马、小飞象…… 不过看着这些场景，让我不由得想起来尼尔·机械纪元里的游乐园，</p><h4 id="米奇童话系列演出"><a href="#米奇童话系列演出" class="headerlink" title="米奇童话系列演出"></a>米奇童话系列演出</h4><p>这个算是白天的重头戏了，在游玩之前一定要先看好这个表演的时间，等到表演快开始的时候去米奇大街这里找一个好位置。能看到迪士尼的经典动画人物随着</p><p>我们一起快乐无边<br>我们一起亲密无间<br>我们陪在彼此身边<br>我只想大声对你说<br>多么美好的一天</p><p>音乐向你招手。无论此刻的你多么匹配，也都会被他们的微笑和热情所治愈。一定要看的节目！</p><h4 id="烟花表演"><a href="#烟花表演" class="headerlink" title="烟花表演"></a>烟花表演</h4><p>这个也算是招牌了，看好烟花表演的时间，如果转累了可以提前去占座；毕竟可是有人下午17:00就开始坐在那边等烟花了…我们因为太累了，所以将这个作为下次的游玩项目之一。如果精力充沛或者时间紧迫的话，这个项目可以纳入游玩列表中。</p><h3 id="游玩顺序"><a href="#游玩顺序" class="headerlink" title="游玩顺序"></a>游玩顺序</h3><p>A. 进门直走拿票-&gt;向探险岛出发(同时绑定票拿FP) -&gt; 拿雷鸣山漂流/飞跃地平线的FP, 然后玩飞跃地平线/雷鸣山漂流 -&gt;加勒比海盗沉落宝藏之战 -&gt; 第一个FP的时间应该到了,去玩雷鸣山漂流/飞跃地平线 -&gt; 此时的时间应该是快中午，拿七个小矮人矿山车/维尼小熊历险记的FP -&gt; 然后去未来世界排创极速光轮or火箭背包, FP的时间应该已经到下午了 -&gt;玩了创极速光轮后，可以根据时间在未来世界再转转 -&gt; 随后去迪士尼小镇吃饭 -&gt; 吃完饭在米奇大街说不定能看到上海迪士尼乐团的表演 -&gt;饭后回来看一下米奇童话系列的演出时间 -&gt; 可以继续玩未来世界剩下的项目等游行 -&gt; 游行时间到了后去米奇大街看游行 -&gt; 去梦幻世界玩FP的项目以及其他项目。</p><p>梦幻世界的项目内容比较多，几个FP、城堡、晶彩奇航都是值得一玩的，而且还有冰雪奇缘的表演——《冰雪奇缘：欢唱盛会》可以看，所以比较适合放到时间安排不固定的下午，可以随时加减。玩的差不多了走奇想花园转转然后去迪士尼小镇吃晚饭。晚饭后可以选择去找烟花的座位，或者就直接在迪士尼小镇逛逛，结束后就可以撤了。</p><p>B. 也可以进门就去未来世界玩创极速光轮，不过FP还是拿探险岛的吧，目前看下来还是飞跃地平线的队伍总是最长；这样的话未来世界就只玩创极速光轮，然后就去探险岛玩漂流和地平线，随后去宝藏湾玩沉落宝藏之战；午饭可以选择在宝藏湾or探险岛的园内餐厅就餐；下午去梦幻世界和奇想花园继续玩，这样是可以在中午的时间看宝藏湾的表演——《杰克船长之惊天特技大冒险》，这个表演质量十分不错，推荐一看；下午还可以去探险岛看《人猿泰山：丛林的呼唤》</p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>迪士尼的一天不光是自身体力的考验，也考验精力。大部分的时间都是在排队和走路，和朋友一起要考虑如何安排这些冗长而无趣的时间，和小朋友or老人一起的要考虑他们的体力是否能承受像我们那样过于紧凑的游玩安排。纵然项目质量上乘，也耐不住人海的拥挤熙攘；所以如果不想自己此程大部分时间耗在无意义的排队、犹豫的决策和无休止的尴尬或争吵中的话，去之前请做好计划、攻略和身心准备。</p><p>我几乎不看迪士尼的片子，在去之前甚至不觉得迪士尼对我的吸引力能超过游戏的折扣、漫展的本子；我也去玩过一些像广州长隆欢乐世界这种比较大的游乐场；不过对于我这个没有去过香港、日本迪士尼的人来说，此番游玩依旧令我觉得十分震撼。我终于理解了小时候表姐从东京迪士尼回来后告诉我：“你无法想象那里的人在炎热的夏天，穿着布偶装还能如此的热情和敬业，园区的卫生是那么的干净！”时的激动了，彼时的我还认为是日本服务业人员职业精神强，游客民众的个人素质高。而当我从上海迪士尼回来后，我也同样能够说”你无法想象在那么忙碌的一天后，穿着布偶装的工作人员还能露出让你瞬间忘掉疲惫的可人笑容；你无法想象在经过每日如此多游客的洗礼后，园区的卫生和环境依旧那么整洁和清新；你无法想象当现代科技和这些刺激感官的项目结合起来后，那沉浸式的体验让人是多么的难忘！”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来到上海之后一直没有什么契机让我这个深度宅去一趟童话般的迪士尼，
不过全能的D桑竟然能买到打折票，
也促成了这次的童话世界游园之旅。
作一篇小记希望能帮助到同样想去迪士尼的小伙伴们~&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="http://silentming.net/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>2018 追番总结</title>
    <link href="http://silentming.net/blog/2019/01/15/2018-acg-summary/"/>
    <id>http://silentming.net/blog/2019/01/15/2018-acg-summary/</id>
    <published>2019-01-15T04:09:55.000Z</published>
    <updated>2022-10-30T12:09:54.917Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说工作之后看动画的时间就少了许多，一方面是时间的原因，也有一方面是是因为为了赶时间许多动画出了后就直接补漫画了…不过总的来说2018的动画仍然有不少精品(紫罗兰万岁)。给有兴趣补2018番的小伙伴提供一些参考, 也给自己一个小小的总结。(由于百度云盘在Mac上的同步功能去掉了，所以中间有次记录从Excel到github的变更, 漏了一些不太重要的动画, 忽略就好啦)</p><a id="more"></a><p>与去年的变化:</p><ol><li>都写出来的还是太多了，且大部分都没什么用，所以就把个人认为3分以下的动画分到Others里面了, 实在无聊再看吧</li><li>去掉了日文原名, 毕竟中文博客并不关心原名</li><li>续作类和Others都单独归类，不按月份来啦</li></ol><h2 id="Jan"><a href="#Jan" class="headerlink" title="Jan."></a>Jan.</h2><h3 id="5-0-紫罗兰永恒花园-京都动画"><a href="#5-0-紫罗兰永恒花园-京都动画" class="headerlink" title="5.0 紫罗兰永恒花园-京都动画"></a>5.0 紫罗兰永恒花园-京都动画</h3><img src="http://i0.hdslb.com/bfs/bangumi/f098647c62d1261b6d53e3c0ba61056bcbd6a2ec.jpg"><p>人类圣经，可以作为2018年度霸权的最有力竞争者之一了。从战场上归来的薇尔莉特·伊芙加登从仅知道服从命令的杀戮兵器到成为为他人传递心情、代笔写信的自动人偶，主角慢慢成长，慢慢取回作为人的感情，慢慢学会人心…京阿尼精美的作画，可以直接和剧场版比肩了，沿袭了小说改一向剧情丰富的有点，女主无口、反差萌，作画、人物塑造、音乐、剧情均无可挑剔的动画作品，满分强推，吹爆！</p><img src="http://www.violet-evergarden.jp/img/top/keyvisual.jpg"><p>给满分女主额外的大图~</p><h3 id="4-8-我的三体-逻辑传-神游八方"><a href="#4-8-我的三体-逻辑传-神游八方" class="headerlink" title="4.8 我的三体 逻辑传-神游八方"></a>4.8 我的三体 逻辑传-神游八方</h3><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike272%2C5%2C5%2C272%2C90/sign=a76de924f9d3572c72ef948eeb7a0842/0df3d7ca7bcb0a465fa335f46063f6246a60af7e.jpg"><p>从图就可以看出来，这个虽然模型类似我的世界，但是实际上是用专业的动画/3D软件做的，听说是MAYA，能够看出来作者已经尽力在还原原著的各种细节了，动画里面也有许多细节很值得一看，无论是水的描绘、烟、人物的表情，个人感觉都不会让三体的粉丝失望。非常推荐！</p><h3 id="4-3-刻刻-GENO-Studio"><a href="#4-3-刻刻-GENO-Studio" class="headerlink" title="4.3 刻刻-GENO Studio"></a>4.3 刻刻-GENO Studio</h3><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=aa55b9984190f60310bd9415587bd87e/10dfa9ec8a1363274207f79a9a8fa0ec09fac7b4.jpg"><p>精巧的叙事不必采用宏大的时间观，而是能够将一个小的故事全面完整的表述出来。挖坑填好、人物丰富、剧情跌宕，就可以视作不错的作品了。刻刻讲述的是女主一家与反派在静止世界中的一次对抗，动画杰出的地方在于对静止世界的刻画，静止世界中物体与人物互动也有对应的逻辑进行解释，作画还算精细，整个故事叙述也很完整。对于静止世界的描画还是很有启发性的(也可能我静止系的看的太少)。推荐~</p><h3 id="4-2-比宇宙更远的地方-MADHOUSE"><a href="#4-2-比宇宙更远的地方-MADHOUSE" class="headerlink" title="4.2 比宇宙更远的地方-MADHOUSE"></a>4.2 比宇宙更远的地方-MADHOUSE</h3><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=4d56de9225738bd4d02cba63c0e2ecb3/58ee3d6d55fbb2fbd4f4f95d444a20a44723dca6.jpg"><p>高中女生去南极探险的过程，四名女主因各自不同的理由集聚一起，最终完成了梦想中南极的游玩。女一敢于为理想付诸行动的果敢、四位少女穿越艰险的不易，高中妹子间的友情，游玩南极路途间的趣事，都可以成为此番的看点。这是一部一月的黑马，能让无数看过的人热泪盈眶。</p><h3 id="4-0-citrus-柑橘味香氣-Passione"><a href="#4-0-citrus-柑橘味香氣-Passione" class="headerlink" title="4.0 citrus~柑橘味香氣~-Passione"></a>4.0 citrus~柑橘味香氣~-Passione</h3><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=aa1363053efae6cd18b9a3336eda6441/eac4b74543a98226f2c4a9158182b9014a90ebff.jpg"><p>这是一部可以载入百合番经典的动画，而且是纯粹的深度百合，和摇曳百合那种轻百合可不一样，一迅社出品，漫画的正版在布卡上，作为百合向这一小众作品，漫画就具有极为优美的画风，动画也是出色复现了漫画人物的美。虽说剧情不是特别的优秀，不过在百合漫里面已经属于上品了。</p><h3 id="3-5-Fate-EXTRA-Last-Encore-SHAFT"><a href="#3-5-Fate-EXTRA-Last-Encore-SHAFT" class="headerlink" title="3.5 Fate/EXTRA Last Encore-SHAFT"></a>3.5 Fate/EXTRA Last Encore-SHAFT</h3><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=c09674c571f40ad101e9cfb136457aba/f7246b600c33874421156c815b0fd9f9d62aa07f.jpg"><p>直到如今，个人也感觉Fate系列的巅峰是 Fate/Zero，也即第一部作品Fate/Stay Night的前传，卫宫切嗣作为Saber御主的故事。与之相比，如果说Fate/Stay Night是因为初次制作资金不足的情况下获得爆炸性成功；那么Fate/Extra Last Encore的作画就不得不被吐槽一下了。尼禄的眼睛下面那三个点是什么鬼啊！然后剧情完全没有原设定中那种紧凑和线索缠绕的感觉，给人一种男主带着女主一边卖萌一边打怪升级刷副本的感觉，没有悲壮的剧情，没有宏大的设定，人设也很一般，感觉还是挺失望的，不过看在是Fate系列也不会给太低的分就是了。</p><h3 id="3-5-龙王的工作！-Project-No-9"><a href="#3-5-龙王的工作！-Project-No-9" class="headerlink" title="3.5 龙王的工作！-Project No.9"></a>3.5 龙王的工作！-Project No.9</h3><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=52aa46bbfb1f3a294ec5dd9cf84cd754/94cad1c8a786c917a1c0b55cc23d70cf3ac75790.jpg"><p>萝莉控的福音，不过整部番实际上是个以萝莉为噱头的将棋番，值得称赞的地方在于能够能够将将棋这种文艺活动描绘的热血沸腾，女二师姐也是萌点颇丰的角色，整体是一部不错的将棋/萝莉番，即使是将棋0基础的也可以一看~</p><h3 id="3-4-爱吃拉面的小泉同学-Studio五组-AXsiZ"><a href="#3-4-爱吃拉面的小泉同学-Studio五组-AXsiZ" class="headerlink" title="3.4 爱吃拉面的小泉同学-Studio五组/AXsiZ"></a>3.4 爱吃拉面的小泉同学-Studio五组/AXsiZ</h3><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike220%2C5%2C5%2C220%2C73/sign=d3ff243347fbfbedc8543e2d19999c53/b21c8701a18b87d6ae2f1e130b0828381f30fd49.jpg"><p>说真的..我真没想到这部番就真的是从头吃拉面吃到尾…正常来讲，吃也要换几种嘛..结果女主就是在换拉面口味。不过微百合+女主萌，也就奠定了这部分是个为萌而去的番了。消磨时间可以看看~</p><h3 id="3-4-宅饮。-Production-IMS"><a href="#3-4-宅饮。-Production-IMS" class="headerlink" title="3.4 宅饮。-Production IMS"></a>3.4 宅饮。-Production IMS</h3><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=d21ecd7dc8fdfc03f175ebeab556ecf1/09fa513d269759ee278f5b48b9fb43166c22df51.jpg"><p>喜欢喝酒的4个社会女性的日(夜晚)常，镜头锁定的是下班后的4位酒友+合租人的生活，每一集都会出现一种酒，不过也不是什么高度数的劲酒，更多是一些啤酒和鸡尾酒。不过这种描绘工作人士下班后生活的动画则很容易让已经大学毕业or准毕业的小伙伴们代入，从而获得些许治愈，毕竟下班后开罐啤酒确实不错呀~</p><h3 id="3-0-DARLING-in-the-FRANXX-TRIGGER-A-1-Pictures"><a href="#3-0-DARLING-in-the-FRANXX-TRIGGER-A-1-Pictures" class="headerlink" title="3.0 DARLING in the FRANXX-TRIGGER/A-1 Pictures"></a>3.0 DARLING in the FRANXX-TRIGGER/A-1 Pictures</h3><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike272%2C5%2C5%2C272%2C90/sign=213f568f2a3fb80e18dc698557b8444b/2cf5e0fe9925bc317cb65b2655df8db1ca1370a0.jpg"><p>这就是号称国家队的动画，单看阵容都是动画界的大佬，让人不得不期待一下其极高的质量和剧情，不过实际上成品却是个依靠些许色情暗示卖一点点福利,开着莫名其妙的机甲对抗莫名其妙的敌人的动画，打着打着敌人还瞬间从以为的大boss变成了天降外星人。作画不少崩坏，剧情也十分平庸的作品。依靠女主一人撑起这部作品的片子，说实话十分的失望，爱奇艺押宝也是押错了，哎…（-_-#)</p><h2 id="Apr"><a href="#Apr" class="headerlink" title="Apr."></a>Apr.</h2><h3 id="4-7-黑社会的超能力女儿-feel"><a href="#4-7-黑社会的超能力女儿-feel" class="headerlink" title="4.7 黑社会的超能力女儿-feel."></a>4.7 黑社会的超能力女儿-feel.</h3><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike220%2C5%2C5%2C220%2C73/sign=4b825dcf17d5ad6ebef46cb8e0a252be/024f78f0f736afc3e0a8596ebf19ebc4b7451210.jpg"><p>超能力妹子被黑帮撞到作为养女的故事，这部番我是先追的漫画，最令人印象深刻的就是“智障”式的搞笑，虽然作画和搞笑的方式比较令人无语，然而故事本身却很温情，几个人物的塑造都包含了反差在里面，可以作为比较好的利用反差来描绘人物的参考了，非常推荐！</p><h3 id="4-4-工作细胞-david-production"><a href="#4-4-工作细胞-david-production" class="headerlink" title="4.4 工作细胞-david production"></a>4.4 工作细胞-david production</h3><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike272%2C5%2C5%2C272%2C90/sign=55b85866fd1f3a294ec5dd9cf84cd754/32fa828ba61ea8d324f38dbc9a0a304e241f58b1.jpg"><p>这部番非常令人意外，中规中矩甚至可以说是科教片的题材。里面涉及到的生物/医学知识其实不多，都是初中生物上的内容,然而配上生动的动画比喻和优秀的人物设定,使得这部番成为了一部老少皆宜的动画,其中的血小板这一形象更是萌出天际，曾霸占P站和B站。</p><h3 id="4-2-MEGALO-BOX-TMS-Entertainment"><a href="#4-2-MEGALO-BOX-TMS-Entertainment" class="headerlink" title="4.2 MEGALO BOX-TMS Entertainment"></a>4.2 MEGALO BOX-TMS Entertainment</h3><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=0a4f53229b2bd40756cadbaf1ae0f534/4b90f603738da9773a794b21bc51f8198618e362.jpg"><p>4月的黑马，一部让人热血沸腾的动画。拳击这一最冲击的暴力能够激起男性最原始的野性、那种血与汗的刺激。我想每个男生都梦想过自己一身硕肌站在斗技场上，经过一番番的战斗最后虽然满身是伤，但是高举右手享受冠军的高光时刻。动画中拳击的动作非常专业，而且配乐令人亢奋，单单听其音乐就能唤醒战斗的欲望。</p><h3 id="3-8-奴隶区-ZERO-G-TNK"><a href="#3-8-奴隶区-ZERO-G-TNK" class="headerlink" title="3.8 奴隶区-ZERO-G/TNK"></a>3.8 奴隶区-ZERO-G/TNK</h3><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=fa37f0736e380cd7f213aabfc02dc651/a6efce1b9d16fdfae518c92dbf8f8c5495ee7bf8.jpg"><p>一部游戏、诡辩、欺诈加上奴隶这一阴暗的主题能够满足我这种烧脑剧情爱好者的胃口，带上特殊的牙套，与他人进行游戏，输的人就会成为赢的人的奴隶，无法反抗其命令；喜欢这类的(狂赌之渊、达尔文游戏、全职猎人、惊爆游戏)的推荐观看，毕竟当加上规则之后，一切会变的如此的有趣。</p><h3 id="3-7-B：彼之初-Production-I-G"><a href="#3-7-B：彼之初-Production-I-G" class="headerlink" title="3.7 B：彼之初-Production I.G"></a>3.7 B：彼之初-Production I.G</h3><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=ead0b6ed8e025aafc73f76999a84c001/b21bb051f81986180db91fa946ed2e738bd4e625.jpg"><p>这部番是网飞(NetFlix)爸爸买的独播，网飞的眼光也确实不错，剧情风格有点像心理测量者，不过叙事上个人感觉还有所欠缺。整部番的基调给人一种推理番的感觉，然而剧情则和推理没有太大关系，侦探也一直不过是出现在主角所在的各种场合而已。而未来风的战斗在加上超能力这个设定后，说实话就显得有点不伦不类了。然而制作、动作、画面依旧不错。</p><h3 id="3-6-宅男腐女恋爱真难-A-1-Pictures"><a href="#3-6-宅男腐女恋爱真难-A-1-Pictures" class="headerlink" title="3.6 宅男腐女恋爱真难-A-1 Pictures"></a>3.6 宅男腐女恋爱真难-A-1 Pictures</h3><img src="http://n.sinaimg.cn/comic/crawl/529/w550h779/20180320/aIcE-fyskeuc8209267.jpg"><p>又一部名字与内容相反的动画，宅男腐女第一集就恋爱，可能画风有的人接受不了，不过剧情本身还是挺甜的。说来也奇怪，即便是单身狗的我们为什么也喜欢吃狗粮呢？汪汪汪汪~</p><h3 id="3-3-Comic-Girls-漫画女孩-Nexus"><a href="#3-3-Comic-Girls-漫画女孩-Nexus" class="headerlink" title="3.3 Comic Girls/漫画女孩-Nexus"></a>3.3 Comic Girls/漫画女孩-Nexus</h3><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=18dd12918101a18be4e61a1dff466c6d/42166d224f4a20a4d52aa87a96529822720ed053.jpg"><p>微白合的动画，可能由于主角们的年龄偏低，或者是作者的编剧能力较弱，与New Game这种已经工作的少女们的日常相比，漫画女孩在一起画画集训的日常就显得单薄许多，加上和漫画这一主题挂钩不深，使得剧情除了微白合以外几乎就不剩什么看点了。</p><h3 id="3-2-老子是魔法少女-pierrot-plus"><a href="#3-2-老子是魔法少女-pierrot-plus" class="headerlink" title="3.2 老子是魔法少女-pierrot plus"></a>3.2 老子是魔法少女-pierrot plus</h3><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=4de7f7f1ddc8a786aa27425c0660a258/d31b0ef41bd5ad6eb53c33e18dcb39dbb7fd3cf7.jpg"><p>猎奇类的动画，只能说看了可以扩宽三观，开拓视野。两个主角就能满足百合、BL、攻受互换、男女三角各类口味挑剔的看官，女装大佬肌肉男in魔法少女装，简直辣眼睛，然而就是有让人忍不住一看的魔力。</p><h2 id="Jul"><a href="#Jul" class="headerlink" title="Jul."></a>Jul.</h2><h3 id="3-8-后街女孩-J-C-STAFF"><a href="#3-8-后街女孩-J-C-STAFF" class="headerlink" title="3.8 后街女孩-J.C.STAFF"></a>3.8 后街女孩-J.C.STAFF</h3><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=2ffd726e9f2bd40756cadbaf1ae0f534/4b90f603738da9771fcb6a6db851f8198718e394.jpg"><p>三名黑帮被老大罚去整容变性做偶像的故事，这种超级反差带来的矛盾冲突必然让剧情不会平淡，其老大”毕竟我也不是魔鬼”也成为红极一时，以至到现在依旧能在弹幕中看到。正式由于三名黑帮混混变成偶像这种荒诞的设定，才能够打破偶像这一形象的固有束缚，也能更加夸张对其进行描绘，这一点使得即使是偶像部分的剧情也比真正的偶相番有趣的多。</p><h3 id="3-3-碧蓝之海-ZERO-G"><a href="#3-3-碧蓝之海-ZERO-G" class="headerlink" title="3.3 碧蓝之海-ZERO G"></a>3.3 碧蓝之海-ZERO G</h3><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=4089826a711ed21b6dc426b7cc07b6a1/79f0f736afc37931cd4895b1e7c4b74543a91101.jpg"><p>嘛..讲道理，虽然我也喜欢看搞笑的，但是不喜欢画图突变类的。而这种潜水的题材，本来还是挺不错的，不过动不动喝酒裸奔让我有点跌眼镜，一群潜水社的裸奔(误)醉酒日常，傲娇表妹、温柔表姐和大叔学姐加入让整个团体的人物性格也得到了平衡。</p><h3 id="3-2-千绪的上学路-Diomedea"><a href="#3-2-千绪的上学路-Diomedea" class="headerlink" title="3.2 千绪的上学路-Diomedéa"></a>3.2 千绪的上学路-Diomedéa</h3><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=fa5333bb3512b31bd361c57be7715d1f/63d0f703918fa0ec8124cbf12a9759ee3c6ddb6f.jpg"><p>曾经的我认为日本由于高中有社团，所以可以将高中生活描绘的有声有色，而国内的小伙伴则必须紧锣密鼓备战高考，才会相较乏味无聊许多。然而这部番能够颠覆我的这一认知，仅仅是上学路上就能将腹黑与宅女这说翻就翻的友情小船晃荡的和剧情一样充满起伏,能够借助想象将日常生活编织为有趣的故事的能力则非常值得借鉴和学习。</p><h2 id="Oct"><a href="#Oct" class="headerlink" title="Oct."></a>Oct.</h2><h3 id="4-2-青春猪头少年不会梦到兔女郎学姐-CloverWorks"><a href="#4-2-青春猪头少年不会梦到兔女郎学姐-CloverWorks" class="headerlink" title="4.2 青春猪头少年不会梦到兔女郎学姐-CloverWorks"></a>4.2 青春猪头少年不会梦到兔女郎学姐-CloverWorks</h3><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=29ee217100f431ada8df4b6b2a5fc7ca/f11f3a292df5e0fe027c4de2506034a85fdf72e9.jpg"><p>这是一个被名字耽误的番，名字中的猪头更多是描绘男主的一股莽劲而非笨。作为一部青春系的番，男主虽然特立独行，由于一些流言而被同学疏远，但是对自己在乎的人则能够拼尽一切。依旧采用日本常见的“青春期综合症”这一题材，不过剧情则是完整而紧凑的。(XX准的某番剧情真的是一个天上一个地下)</p><h3 id="4-0-关于我转生变成史莱姆这档事-8bit"><a href="#4-0-关于我转生变成史莱姆这档事-8bit" class="headerlink" title="4.0 关于我转生变成史莱姆这档事-8bit"></a>4.0 关于我转生变成史莱姆这档事-8bit</h3><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=b09c0d84424a20a425133495f13bf347/3b87e950352ac65ce3b233e5f6f2b21192138af5.jpg"><p>还有什么比看主角开挂装X更享受的呢？龙傲天式的番多了虽然会无聊，但是在没什么能打的十月，一部剧情完整，人物可爱，稍稍再给点福利的异世界开挂番还是很爽的。与骨王那种一上来就满级满属性还满身氪金装备去新手村虐菜的设定不同,这部番里面就是带了挂从新手村打到Boss点最后成为大Boss的剧情。这种一上来就告诉你老子带挂的要比那些什么假装男主废柴，时不时开挂一秒翻盘的要好看多了，毕竟都是开挂吊打，我为什么要看主角假装挨揍呢？</p><h3 id="3-4-邻家索菲-隔壁的吸血鬼美眉-Studio-五组，AXsiZ"><a href="#3-4-邻家索菲-隔壁的吸血鬼美眉-Studio-五组，AXsiZ" class="headerlink" title="3.4 邻家索菲/隔壁的吸血鬼美眉-Studio 五组，AXsiZ"></a>3.4 邻家索菲/隔壁的吸血鬼美眉-Studio 五组，AXsiZ</h3><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike220%2C5%2C5%2C220%2C73/sign=b22ac960c595d143ce7bec711299e967/b151f8198618367a2a395abe23738bd4b31ce525.jpg"><p>日常微百合萌妹番，讲述的就是喜欢人偶的女主:灯偶遇(?)住在隔壁的吸血鬼萌妹子索菲，之后带着自己的好姬友日向以及后来又过来的索菲的好姬友艾莉的日常故事。与普通的日常相比，吸血鬼+宅女的结合让观众常常发出“这可真是真实”的感叹；在一开始就加入了待看列表，不过正式上映时名字叫做邻家索菲没有认出来，导致最后才补完的，喜欢《向阳素描》、《黄金拼图》、《点兔》等微百合、萌妹纸日常、吸血鬼Loli的可以一看。</p><h3 id="3-3-终将成为你-TROYCA"><a href="#3-3-终将成为你-TROYCA" class="headerlink" title="3.3 终将成为你-TROYCA"></a>3.3 终将成为你-TROYCA</h3><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=5703663c04f79052fb124f6c6d9abcaf/0823dd54564e9258a6ae93c19182d158ccbf4e02.jpg"><p>纯爱百合番，不过剧情比较有趣，营造了一个不可解的结：一个人讨厌自己，如果你爱上了她，那么她也会讨厌这个爱上她讨厌事物的你；而你如果对她没兴趣，她却会喜欢这个远离她讨厌事物的你；所以，如果想要继续获得她的爱话，请不要爱上她哦~</p><h2 id="续作类"><a href="#续作类" class="headerlink" title="续作类"></a>续作类</h2><p>个人评分直接写到前面啦~</p><ul><li>4.6 吹响吧！上低音号2-京都动画  京都动画对于软妹之间微百合的描绘、精致的作画，依旧和前一部一样的高质量，继续顶~4.6 命运石之门 0-WHITE FOX  0是β线，相比较于α线，这条线的剧情更加虐心，不过叙事上依旧非常出色，比普通的续集要好看许多！</li><li>4.5 RWBY 5, 6  剧情依旧出彩，而且还介绍了真正的大Boss，就是不知道后面该怎么圆…</li><li>4.2 刀剑神域 Alicization  Alicization 是刀剑系列里面最为出彩的一章，动画要播4季整整一年，不要错过哦~</li><li>4.1 OVERLOAD/不死者之王 2, 3-MADHOUSE  骨傲天依旧不会让你失望，看着男主装X自己莫名也很爽~</li><li>4.0 超能力者齐木楠雄的灾难 2-EGG FIRM/J.C.STAFF  依旧如前作一般，夸张的搞笑手法加上时不时的发糖，让人不能拒绝呀。</li><li>3.8 食戟之灵：餐之皿-J.C.STAFF  熟悉的配方，熟悉的味道，熟悉的爆衣，熟悉的嘴炮~</li><li>3.3 魔法禁书目录 3-J.C.STAFF  魔法禁书目录整体上没有炮姐成功的原因在于女主是个酱油，而且没什么萌点, 所以一直就这样。由于设定上的庞大，所以想要看的话最好补补以前的剧情。</li><li>3.2 東京喰種：re-Studio Pierrot  剧情其实还是挺不错的，不过动画作画上还是有点经费不足的样子，没看过漫画的可以看看，男主成为CCG这边的了~</li><li>2.5 女神异闻录5-CloverWorks  个人始终不喜欢女神异闻录5，可能是因为这个迎合的是初中生的叛逆期，因此我这种中年人只觉得无聊…  当时玩游戏也觉得挺无聊的.用替身在幻想世家攻击的剧情。</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>2.9 少女☆歌剧 Revue Starlight-KINEMA CITRUS  作画和动作还是很精致的，不过剧情就？？？ 莫名奇妙打来打去，就一种虽然不知道发生了什么，但是好厉害的样子，因为还有歌剧，所以歌唱的还不错…</li><li>2.8 多田君不恋爱-动画工房  这种名字的肯定是要恋爱的，分低的原因在于女主塑造的过于刻意，作为国家公主形象是没有智商的傻白甜，还经常尬演一些动作, 不过百合工房的基本功还是有的。</li><li>2.8 邪神与厨二病少女-nomad  本来以为是个可以和小林家的龙女仆一战的番，不过剧情相比之下无聊的多，完全就是看小邪神卖萌和卖蠢，作为开心剂就OK啦。</li><li>2.7 魔法少女サイト/魔法少女网站-production dóA  感觉自从魔法少女小圆成功后，猎奇的魔法少女越来越多了，本番也是一样，不过在作画和剧情上要更弱一些，还是可以看的</li><li>2.6 刀剑神域外传 Gun Gale Online-Studio 3Hz  外传只是个借用GGO世界观的微白合番而已，不过作画和剧情和原著相比确实弱不少，作为剧情主要人物，女主要打倒的人也没给很多合理的解释，女主的现实和虚拟之间的矛盾描绘也不到位。</li><li>2.5 A.I.C.O. Incarnation-BONES  由于是骨头社+网飞爸爸，所以制作上还是属上乘的，里面衣服的创新设定、女主的剧情设定还可以认同，不过剧情的进展着实无聊，打斗也很一般，结局也很容易猜出来。</li><li>2.5 爆肝工程师的异世界狂想曲-SILVER LINK./CONNECT  骨(龙)傲天式的番，男主作为游戏程序员穿越到了一个与自己开发的游戏类似的游戏中开后宫的故事</li><li>2.4 Alice or Alice-EMT Squared  四格漫画改变，讲述的是男主和两个妹妹的日常, 因为是日常..所以真的挺无聊的，只是卖萌而已，因为剧情过于无聊，漫画我都已经弃了😔</li><li>2.2 One Room-ZERO-G  第一人称视角的动画，可以理解为I社XX女友orXX少女orXX之狼样式的全年龄动画版…</li><li>1.8 赛马娘 Pretty Derby-P.A.WORKS  赛马变成萌妹来赛跑..个人很不喜欢猫耳以外的兽化，而且这个剧情实在没营养</li><li>1.4异世界魔王与召唤少女的奴隶魔术-亚细亚堂  和爆肝工程师的异世界狂想曲差不多一样无聊，然而为什么这个分低更多呢？因为莫名其妙的两个后宫还是不如明明白白的后宫看着舒服。</li><li>1.2 实验品家庭/実験品家族 -クリーチャーズ・ファミリー・デイズ–大火鸟动画  作为国产动画是个不错的尝试, 家人都是异能/异性，描述的家庭的亲密关系, 不过剧情get不到什么点</li><li>1.0 原书·原书使-Hoods Entertainment  女主上来啥都不会但是却被最强的xxx附身/选中， 然后一路嘴炮到最后开挂收尾和女儿亲亲我我的故事…</li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>7月之后工作上开始步入正轨，有了小可爱一起玩耍，动漫看的相比之前就会少一些，加上7月本身的动画质量一般，所以追的少了许多。加上愈发感觉自己的知识储备过少，涉及面单一，所以新的一年还想要多读一些书、看看综艺和电影什么的，或许从今年之后，追番总结会变成娱乐总结了吧~哈哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不说工作之后看动画的时间就少了许多，一方面是时间的原因，也有一方面是是因为为了赶时间许多动画出了后就直接补漫画了…
不过总的来说2018的动画仍然有不少精品(紫罗兰万岁)。
给有兴趣补2018番的小伙伴提供一些参考, 也给自己一个小小的总结。
(由于百度云盘在Mac上的同步功能去掉了，所以中间有次记录从Excel到github的变更, 漏了一些不太重要的动画, 忽略就好啦)&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="http://silentming.net/tags/acg/"/>
    
  </entry>
  
</feed>
